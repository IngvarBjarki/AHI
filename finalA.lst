GAMS 24.8.1  r59919 Released Dec 22, 2016 DEX-DEG x86 64bit/Mac OS X                                                                                                                                                                   01/17/17 22:39:53 Page 1
G e n e r a l   A l g e b r a i c   M o d e l i n g   S y s t e m
C o m p i l a t i o n


   1  * FinalA.gms
   2  *
   4  option iterlim=999999999;     // avoid limit on iterations
   5  option reslim=300;            // timelimit for solver in sec.
   6  option optcr=0.0;             // gap tolerance
   7  option solprint=ON;           // include solution print in .lst file
   8  option limrow=100;            // limit number of rows in .lst file
   9  option limcol=100;            // limit number of columns in .lst file
  10  //--------------------------------------------------------------------
  11   
  12  SET timber 'raw material bought by Metsa Oy'
  13  /   Mat, Kut, Kot, Mak, Kuk, Kok   /;
  14  SET products 'Products made by Metsa Oy'
  15  /   Mas, Kus, Kos, Kuv, Kov, Hsel, Lsel, Pap    /;
  16  SET destinations 'places where Metsa sells products'
  17  /   EU, IE, PA, KI  /;
  18  SET p1(products) 'normal products'
  19  / Mas, Kus, Kos, Kuv, Kov  /;
  20  SET p2(products) 'products possible to make from leftovers'
  21  /   Hsel, Lsel, Pap     /;
  22  SET p3(products) 'Pulp products which can make paper'
  23  /   HSEL, LSEL /;
  24  SET n 'number of barges'
  25  /   1*107  /;
  26  SET l 'number of barges'
  27  / 1*23 /;
  28   
  29  ALIAS(timber, i);
  30  ALIAS(products, j);
  31  ALIAS(destinations, k);
  32   
  33  PARAMETERS
  34   
  35   
  36  c(products) 'the cost of producing each product, mesured in erous/1000m^3'
  37      /   Mas   550
  38          Kus   500
  39          Kos   450
  40          Kuv   250
  41          Kov   260
  42          Hsel  820
  43          Lsel  800
  44          Pap   1700  /
  45   
  46  alpha(timber) 'alpha cost parameters by timber assortments'
  47      /   MAT     190
  48          KUT     150
  49          KOT     120
  50          MAK     180
  51          KUK     150
  52          KOK     150 /
  53   
  54  beta(timber) 'Beta cost parameter by timber assortments'
GAMS 24.8.1  r59919 Released Dec 22, 2016 DEX-DEG x86 64bit/Mac OS X                                                                                                                                                                   01/17/17 22:39:53 Page 2
G e n e r a l   A l g e b r a i c   M o d e l i n g   S y s t e m
C o m p i l a t i o n


  55      /   MAT     1.0
  56          KUT     0.5
  57          KOT     3.0
  58          MAK     0.2
  59          KUK     0.3
  60          KOK     0.2 /;
  61   
  62   
  63   
  64   
  65  TABLE table2(j,i)'Cubic-meters of material i used in cubic-meter of product j'
  66                  MAT     KUT     KOT     MAK     KUK     KOK
  67          MAS     2.0     0.0     0.0     -0.8    0.0     0.0
  68          KUS     0.0     2.0     0.0     0.0     -0.8    0.0
  69          KOS     0.0     0.0     2.0     0.0     0.0     -0.8
  70          KUV     0.0     2.8     0.0     0.0     -1.6    0.0
  71          KOV     0.0     0.0     2.8     0.0     0.0     -1.6
  72          HSEL    0.0     0.0     0.0     4.8     0.0     0.0
  73          LSEL    0.0     0.0     0.0     0.0     0.0     4.2
  74          PAP     0.0     0.0     0.0     0.0     1.0     0.0      ;
  75   
  76  *TABLE table3(p2, p3) 'timber p3 needed for production of product p2'
  77  *                     Mak    Kuk     Kok   Hsel    Lsel
  78  *        Hsel      4.8      0.0      0.0      0.0      0.0
  79  *        Lsel       0.0      0.0      4.2      0.0      0.0
  80  *        Pap       0.0      1.0       0.0     0.2      0.2;
  81   
  82   
  83   
  84  TABLE GAMMA(j,k) 'Gamma coefficent for selling product j in region k'
  85                    EU      IE      PA      KI
  86           MAS     1600    1300    1400    1500
  87           KUS     1400    1200    1300    1400
  88           KOS     1300    1400    1500    1600
  89           KUV     4400    3800    3600    3500
  90           KOV     4300    4100    3900    3800
  91           HSEL    2300    2500    2300    2600
  92           LSEL    2500    2800    2300    2500
  93           PAP     4500    4700    4300    4800 ;
  94   
  95   
  96  TABLE DELTA(j,k) 'Delta coefficient for selling product j in region k'
  97                   EU      IE      PA      KI
  98           MAS     4       10      12      15
  99           KUS     4       10      12      15
 100           KOS     14      20      22      25
 101           KUV     4       10      12      15
 102           KOV     4       10      12      15
 103           HSEL    2       4       5       6
 104           LSEL    3       2       5       7
 105           PAP     4       10      12      15 ;
 106   
 107   
GAMS 24.8.1  r59919 Released Dec 22, 2016 DEX-DEG x86 64bit/Mac OS X                                                                                                                                                                   01/17/17 22:39:53 Page 3
G e n e r a l   A l g e b r a i c   M o d e l i n g   S y s t e m
C o m p i l a t i o n


 108   
 109   
 110   
 111  TABLE q(l,j) 'Options of amount l to be sold of product j'
 112     MAS     KOS     KUV     KOV    HSEL   LSEL   PAP
 113  1  0       0       0       0      0      0      0
 114  2  10000   10000   10000   10000  10000  10000  10000
 115  3  20000   20000   20000   20000  20000  20000  20000
 116  4  30000   30000   30000   30000  30000  30000  30000
 117  5  40000   40000   40000   40000  40000  40000  40000
 118  6  50000   50000   50000   50000  50000  50000  50000
 119  7  60000   60000   60000   60000  60000  60000  60000
 120  8  70000   70000   70000   70000  70000  70000  70000
 121  9  80000   80000   80000   80000  80000  80000  80000
 122  10 90000   90000   90000   90000  90000  90000  90000
 123  11 100000  100000  100000  100000 100000 100000 100000
 124  12 110000  110000  110000  110000 110000 110000 110000
 125  13 120000  120000  120000  120000 120000 120000 120000
 126  14 130000  130000  130000  130000 130000 130000 130000
 127  15 140000  140000  140000  140000 140000 140000 140000
 128  16 150000  150000  150000  150000 150000 150000 150000
 129  17 160000  160000  160000  160000 160000 160000 160000
 130  18 170000  170000  170000  170000 170000 170000 170000
 131  19 180000  180000  180000  180000 180000 180000 180000
 132  20 190000  190000  190000  190000 190000 190000 190000
 133  21 200000  200000  200000  200000 200000 200000 200000
 134  22 210000  210000  210000  210000 210000 210000 210000
 135  23 220000  220000  220000  220000 220000 220000 220000 ;
 136   
 137   
 138   
 139  TABLE h(n,i) 'Options of amount n to be bought of material i'
 140      Mat     KUT     KOT     MAK     KUK     KOK
 141  1   0       0       0       0       0       0
 142  2   10000   10000   10000   10000   10000   10000
 143  3   20000   20000   20000   20000   20000   20000
 144  4   30000   30000   30000   30000   30000   30000
 145  5   40000   40000   40000   40000   40000   40000
 146  6   50000   50000   50000   50000   50000   50000
 147  7   60000   60000   60000   60000   60000   60000
 148  8   70000   70000   70000   70000   70000   70000
 149  9   80000   80000   80000   80000   80000   80000
 150  10  90000   90000   90000   90000   90000   90000
 151  11  100000  100000  100000  100000  100000  100000
 152  12  110000  110000  110000  110000  110000  110000
 153  13  120000  120000  120000  120000  120000  120000
 154  14  130000  130000  130000  130000  130000  130000
 155  15  140000  140000  140000  140000  140000  140000
 156  16  150000  150000  150000  150000  150000  150000
 157  17  160000  160000  160000  160000  160000  160000
 158  18  170000  170000  170000  170000  170000  170000
 159  19  180000  180000  180000  180000  180000  180000
 160  20  190000  190000  190000  190000  190000  190000
GAMS 24.8.1  r59919 Released Dec 22, 2016 DEX-DEG x86 64bit/Mac OS X                                                                                                                                                                   01/17/17 22:39:53 Page 4
G e n e r a l   A l g e b r a i c   M o d e l i n g   S y s t e m
C o m p i l a t i o n


 161  21  200000  200000  200000  200000  200000  200000
 162  22  210000  210000  210000  210000  210000  210000
 163  23  220000  220000  220000  220000  220000  220000
 164  24  230000  230000  230000  230000  230000  230000
 165  25  240000  240000  240000  240000  240000  240000
 166  26  250000  250000  250000  250000  250000  250000
 167  27  260000  260000  260000  260000  260000  260000
 168  28  270000  270000  270000  270000  270000  270000
 169  29  280000  280000  280000  280000  280000  280000
 170  30  290000  290000  290000  290000  290000  290000
 171  31  300000  300000  300000  300000  300000  300000
 172  32  310000  310000  310000  310000  310000  310000
 173  33  320000  320000  320000  320000  320000  320000
 174  34  330000  330000  330000  330000  330000  330000
 175  35  340000  340000  340000  340000  340000  340000
 176  36  350000  350000  350000  350000  350000  350000
 177  37  360000  360000  360000  360000  360000  360000
 178  38  370000  370000  370000  370000  370000  370000
 179  39  380000  380000  380000  380000  380000  380000
 180  40  390000  390000  390000  390000  390000  390000
 181  41  400000  400000  400000  400000  400000  400000
 182  42  410000  410000  410000  410000  410000  410000
 183  43  420000  420000  420000  420000  420000  420000
 184  44  430000  430000  430000  430000  430000  430000
 185  45  440000  440000  440000  440000  440000  440000
 186  46  450000  450000  450000  450000  450000  450000
 187  47  460000  460000  460000  460000  460000  460000
 188  48  470000  470000  470000  470000  470000  470000
 189  49  480000  480000  480000  480000  480000  480000
 190  50  490000  490000  490000  490000  490000  490000
 191  51  500000  500000  500000  500000  500000  500000
 192  52  510000  510000  510000  510000  510000  510000
 193  53  520000  520000  520000  520000  520000  520000
 194  54  530000  530000  530000  530000  530000  530000
 195  55  540000  540000  540000  540000  540000  540000
 196  56  550000  550000  550000  550000  550000  550000
 197  57  560000  560000  560000  560000  560000  560000
 198  58  570000  570000  570000  570000  570000  570000
 199  59  580000  580000  580000  580000  580000  580000
 200  60  590000  590000  590000  590000  590000  590000
 201  61  600000  600000  600000  600000  600000  600000
 202  62  610000  610000  610000  610000  610000  610000
 203  63  620000  620000  620000  620000  620000  620000
 204  64  630000  630000  630000  630000  630000  630000
 205  65  640000  640000  640000  640000  640000  640000
 206  66  650000  650000  650000  650000  650000  650000
 207  67  660000  660000  660000  660000  660000  660000
 208  68  670000  670000  670000  670000  670000  670000
 209  69  680000  680000  680000  680000  680000  680000
 210  70  690000  690000  690000  690000  690000  690000
 211  71  700000  700000  700000  700000  700000  700000
 212  72  710000  710000  710000  710000  710000  710000
 213  73  720000  720000  720000  720000  720000  720000
GAMS 24.8.1  r59919 Released Dec 22, 2016 DEX-DEG x86 64bit/Mac OS X                                                                                                                                                                   01/17/17 22:39:53 Page 5
G e n e r a l   A l g e b r a i c   M o d e l i n g   S y s t e m
C o m p i l a t i o n


 214  74  730000  730000  730000  730000  730000  730000
 215  75  740000  740000  740000  740000  740000  740000
 216  76  750000  750000  750000  750000  750000  750000
 217  77  760000  760000  760000  760000  760000  760000
 218  78  770000  770000  770000  770000  770000  770000
 219  79  780000  780000  780000  780000  780000  780000
 220  80  790000  790000  790000  790000  790000  790000
 221  81  800000  800000  800000  800000  800000  800000
 222  82  810000  810000  810000  810000  810000  810000
 223  83  820000  820000  820000  820000  820000  820000
 224  84  830000  830000  830000  830000  830000  830000
 225  85  840000  840000  840000  840000  840000  840000
 226  86  850000  850000  850000  850000  850000  850000
 227  87  860000  860000  860000  860000  860000  860000
 228  88  870000  870000  870000  870000  870000  870000
 229  89  880000  880000  880000  880000  880000  880000
 230  90  890000  890000  890000  890000  890000  890000
 231  91  900000  900000  900000  900000  900000  900000
 232  92  910000  910000  910000  910000  910000  910000
 233  93  920000  920000  920000  920000  920000  920000
 234  94  930000  930000  930000  930000  930000  930000
 235  95  940000  940000  940000  940000  940000  940000
 236  96  950000  950000  950000  950000  950000  950000
 237  97  960000  960000  960000  960000  960000  960000
 238  98  970000  970000  970000  970000  970000  970000
 239  99  980000  980000  980000  980000  980000  980000
 240  100 990000  990000  990000  990000  990000  990000
 241  101 1000000 1000000 1000000 1000000 1000000 1000000
 242  102 1010000 1010000 1010000 1010000 1010000 1010000
 243  103 1020000 1020000 1020000 1020000 1020000 1020000
 244  104 1030000 1030000 1030000 1030000 1030000 1030000
 245  105 1040000 1040000 1040000 1040000 1040000 1040000
 246  106 1050000 1050000 1050000 1050000 1050000 1050000
 247  107 1060000 1060000 1060000 1060000 1060000 1060000 ;
 248   
 249   
 250   
 251  SCALAR saw_mill 'the capacity of the saw mill, m^3/year'
 252           /200000/;
 253  SCALAR plywood_mill 'the capacity of the playwood mill, m^3/year'
 254           /90000/;
 255  SCALAR Hsel_line 'the capacity of the first line, production hsel ton/year'
 256           /220000/;
 257  SCALAR Lsel_line 'the capacity of the second line, producinng lsel ton/year'
 258           /180000/;
 259  SCALAR Pap_mill 'the capcity of the paper mill, ton/year'
 260           /80000/;
 261  SCALAR fuel_price 'fuel wood suitable for producing energy at value of 40'
 262           /40/;
 263  SCALAR PAP_Pro  'Proportion of HSEL and LSEL needed for PAP'
 264           /0.2/;
 265  SCALAR fuel_amount 'the amount of fuel we gain by production timbers in p1'
 266           /-0.2/
GAMS 24.8.1  r59919 Released Dec 22, 2016 DEX-DEG x86 64bit/Mac OS X                                                                                                                                                                   01/17/17 22:39:53 Page 6
G e n e r a l   A l g e b r a i c   M o d e l i n g   S y s t e m
C o m p i l a t i o n


 267   
 268   
 269  VARIABLES
 270  z 'the objective'
 271  *h(i) 'Cubic meters of timber i' // getum breytt í parameter og margfaldað með r(i,n) fyrir balance
 272  y(j) 'Cubic meters produced of product j'//total timber i for used in product j -- make constraint to find outu how many products..
 273  *q(j, k) 'Cubic meters of product j sold to destination k' // getum breytt í parameter og margfaldað með u
 274  //s(i)'Cubic meters of timber i in stock' // should be integer since all member of the constraint are integer
 275  s(i) 'amount of timber i used to make products'
 276  r(n, i) '1 if we buy n boats of timber i, 0 otherwise'
 277  u(l,j,k) '1 if we use n boats for product j shiping to region k, 0 otherwise'
 278  b(i) 'amount of timber i bought'
 279  ;
 280   
 281  // y/table --> product made
 282  INTEGER VARIABLES y;
 283  BINARY VARIABLES u, r;
 284  POSITIVE VARIABLES s, b;
 285   
 286  y.up(j) = 1060000;
 287   
 288  EQUATIONS
 289   
 290  obj  'Maximum gross profit'
 291   
 292   
 293   
 294  //=============================================ENOUGH TIMBER
 295  timber_used(i) ' amount of  timber i used to make  product j'
 296  prod_starved(i)  'ensure that production can not be starved'
 297  //USAGE(i)     'We have to buy material (or produce as byproducts) to be able to produce products'
 298  Sold_Prod(j)   'we cant sell more than we produce'
 299  timber_bought(i) 'amount of timber i bought'
 300   
 301  //============================== ONLY BUY ONE NUMBER OF BARGERS FOR EACH TIMBER i
 302  Barges_buy(i)  'ensure we only pick one value n for barges for each timber i'
 303  Barges_sell(j, k)  'ensure we only pick one value  n for barges for each product to each city'
 304   
 305  //=====================================CAPACITYS FOR PRODUCTION
 306  SawmillCap 'Maximum capacity of the saw mill'
 307  PlywoodCap 'Maximum capacity of plywood mill'
 308  HSELCap    'Maximum capacity of HSEL production'
 309  LSELCap    'Maximum capacity of LSEL production'
 310  PAPCap     'Maximum capacity of PAP production'
 311   
 312  // =====================  PROPORTION OF HSEL AND LSEL NEEDED FOR PAP
 313  PAP_HSEL     'Proportion needed of HSEL for PAP'
 314  PAP_LSEL     'Proportion needed of LSEL for PAP'
 315  PULP_Bal(p3)     'Cant produce paper without pulp'
 316  ;
 317   
 318   
 319   
GAMS 24.8.1  r59919 Released Dec 22, 2016 DEX-DEG x86 64bit/Mac OS X                                                                                                                                                                   01/17/17 22:39:53 Page 7
G e n e r a l   A l g e b r a i c   M o d e l i n g   S y s t e m
C o m p i l a t i o n


 320  obj ..
 321   
 322          Z =e= (sum((k,j), (GAMMA(j,k)/1000) * sum(l, q(l,j)*u(l,j,k)))- sum((k,j), (DELTA(j,k)/(1000*1000)) * sum(l, q(l,j)*q(l,j) * u(l,j,k))))   //Amount sold times sellingprice
 323   
 324          - sum(i, ALPHA(i)/1000 * sum(n, h(n,i)*r(n,i))) - sum(i, BETA(i)/(1000*1000) * sum(n, h(n,i)*h(n,i) * r(n,i)))                    //Amount bought times buying price
 325          + sum(p1, y(p1)*fuel_amount*(-fuel_price/1000))                                                               //Amount of fuel produced times selling price of fuel
 326          + sum(i, (b(i)-s(i))*ALPHA(i)/1000)                                                                                        //Amount of extra material times its selling price
 327   
 328          - sum(j, y(j)*c(j)/1000)                                                                                         //Amount of produced products times the production cost
 329          ;
 330   
 331   
 332   
 333  //==========================ENSURE WE HAVE ENOUGH TIMBER==================================
 334  timber_used(i) ..  sum(j, y(j)*table2(j, i)) =e= s(i);
 335  prod_starved(i) .. sum(n, r(n, i)*h(n, i)) =g= s(i);
 336  Sold_Prod(j) .. sum((l,k), q(l,j)*u(l,j,k)) =l= y(j);
 337  //USAGE(i) .. sum(j, y(j) * table2(j,i)) =l= sum(n, h(n,i) * r(n,i));
 338  timber_bought(i) .. b(i) =e= sum(n, r(n, i)*h(n, i));
 339   
 340  //=================== ONLY BUY ONE NUMBER OF BARGERS FOR EACH TIMBER i ========================
 341  Barges_buy(i) ..  sum( n,r(n,i)) =E= 1;
 342  Barges_sell(j, k) .. sum(l, u(l, j, k)) =E= 1;
 343   
 344   
 345  //===============================CAPACITYS FOR PRODUCTION =============================
 346  SawmillCap ..  y("Mas") + y("Kus") + y("Kos")  =l= saw_mill;
 347  PlywoodCap ..    y("Kuv") + y("Kov")  =l= plywood_mill;
 348  HSELCap ..   y("Hsel") =l= Hsel_line;
 349  LSELCap ..  y("Lsel") =l= Lsel_line;
 350  PAPCap ..   y("Pap") =l= Pap_mill;
 351   
 352  // =====================  PROPORTION OF HSEL AND LSEL NEEDED FOR PAP ===========
 353  PAP_HSEL..  PAP_Pro*y("PAP") =l= y("HSEL");
 354  PAP_LSEL..  PAP_Pro*y("PAP") =l= y("LSEL");
 355  PULP_Bal(p3) .. sum((l,k), u(l,p3,k)*q(l,p3)) + PAP_Pro*y("PAP") =l= y(P3);
 356   
 357  MODEL final /all/;
 358  Solve final using mip maxmizing Z;
 359  DISPLAY z.l, u.l, r.l, y.l, s.l;
 360   
 361   


COMPILATION TIME     =        0.004 SECONDS      3 MB  24.8.1 r59919 DEX-DEG
GAMS 24.8.1  r59919 Released Dec 22, 2016 DEX-DEG x86 64bit/Mac OS X                                                                                                                                                                   01/17/17 22:39:53 Page 8
G e n e r a l   A l g e b r a i c   M o d e l i n g   S y s t e m
Equation Listing    SOLVE final Using MIP From line 358


---- obj  =E=  Maximum gross profit

obj..  z + 0.542*y(Mas) + 0.492*y(Kus) + 0.442*y(Kos) + 0.242*y(Kuv) + 0.252*y(Kov) + 0.82*y(Hsel) + 0.8*y(Lsel) + 1.7*y(Pap) + 0.19*s(Mat) + 0.15*s(Kut) + 0.12*s(Kot) + 0.18*s(Mak) + 0.15*s(Kuk) + 0.15*s(Kok) + 2000*r(2,Mat) + 1550*r(2,Kut)
     
      + 1500*r(2,Kot) + 1820*r(2,Mak) + 1530*r(2,Kuk) + 1520*r(2,Kok) + 4200*r(3,Mat) + 3200*r(3,Kut) + 3600*r(3,Kot) + 3680*r(3,Mak) + 3120*r(3,Kuk) + 3080*r(3,Kok) + 6600*r(4,Mat) + 4950*r(4,Kut) + 6300*r(4,Kot) + 5580*r(4,Mak) + 4770*r(4,Kuk)
     
      + 4680*r(4,Kok) + 9200*r(5,Mat) + 6800*r(5,Kut) + 9600*r(5,Kot) + 7520*r(5,Mak) + 6480*r(5,Kuk) + 6320*r(5,Kok) + 12000*r(6,Mat) + 8750*r(6,Kut) + 13500*r(6,Kot) + 9500*r(6,Mak) + 8250*r(6,Kuk) + 8000*r(6,Kok) + 15000*r(7,Mat) + 10800*r(7,Kut)
     
      + 18000*r(7,Kot) + 11520*r(7,Mak) + 10080*r(7,Kuk) + 9720*r(7,Kok) + 18200*r(8,Mat) + 12950*r(8,Kut) + 23100*r(8,Kot) + 13580*r(8,Mak) + 11970*r(8,Kuk) + 11480*r(8,Kok) + 21600*r(9,Mat) + 15200*r(9,Kut) + 28800*r(9,Kot) + 15680*r(9,Mak)
     
      + 13920*r(9,Kuk) + 13280*r(9,Kok) + 25200*r(10,Mat) + 17550*r(10,Kut) + 35100*r(10,Kot) + 17820*r(10,Mak) + 15930*r(10,Kuk) + 15120*r(10,Kok) + 29000*r(11,Mat) + 20000*r(11,Kut) + 42000*r(11,Kot) + 20000*r(11,Mak) + 18000*r(11,Kuk) + 17000*r(11,Kok)
     
      + 33000*r(12,Mat) + 22550*r(12,Kut) + 49500*r(12,Kot) + 22220*r(12,Mak) + 20130*r(12,Kuk) + 18920*r(12,Kok) + 37200*r(13,Mat) + 25200*r(13,Kut) + 57600*r(13,Kot) + 24480*r(13,Mak) + 22320*r(13,Kuk) + 20880*r(13,Kok) + 41600*r(14,Mat)
     
      + 27950*r(14,Kut) + 66300*r(14,Kot) + 26780*r(14,Mak) + 24570*r(14,Kuk) + 22880*r(14,Kok) + 46200*r(15,Mat) + 30800*r(15,Kut) + 75600*r(15,Kot) + 29120*r(15,Mak) + 26880*r(15,Kuk) + 24920*r(15,Kok) + 51000*r(16,Mat) + 33750*r(16,Kut)
     
      + 85500*r(16,Kot) + 31500*r(16,Mak) + 29250*r(16,Kuk) + 27000*r(16,Kok) + 56000*r(17,Mat) + 36800*r(17,Kut) + 96000*r(17,Kot) + 33920*r(17,Mak) + 31680*r(17,Kuk) + 29120*r(17,Kok) + 61200*r(18,Mat) + 39950*r(18,Kut) + 107100*r(18,Kot)
     
      + 36380*r(18,Mak) + 34170*r(18,Kuk) + 31280*r(18,Kok) + 66600*r(19,Mat) + 43200*r(19,Kut) + 118800*r(19,Kot) + 38880*r(19,Mak) + 36720*r(19,Kuk) + 33480*r(19,Kok) + 72200*r(20,Mat) + 46550*r(20,Kut) + 131100*r(20,Kot) + 41420*r(20,Mak)
     
      + 39330*r(20,Kuk) + 35720*r(20,Kok) + 78000*r(21,Mat) + 50000*r(21,Kut) + 144000*r(21,Kot) + 44000*r(21,Mak) + 42000*r(21,Kuk) + 38000*r(21,Kok) + 84000*r(22,Mat) + 53550*r(22,Kut) + 157500*r(22,Kot) + 46620*r(22,Mak) + 44730*r(22,Kuk)
     
      + 40320*r(22,Kok) + 90200*r(23,Mat) + 57200*r(23,Kut) + 171600*r(23,Kot) + 49280*r(23,Mak) + 47520*r(23,Kuk) + 42680*r(23,Kok) + 96600*r(24,Mat) + 60950*r(24,Kut) + 186300*r(24,Kot) + 51980*r(24,Mak) + 50370*r(24,Kuk) + 45080*r(24,Kok)
     
      + 103200*r(25,Mat) + 64800*r(25,Kut) + 201600*r(25,Kot) + 54720*r(25,Mak) + 53280*r(25,Kuk) + 47520*r(25,Kok) + 110000*r(26,Mat) + 68750*r(26,Kut) + 217500*r(26,Kot) + 57500*r(26,Mak) + 56250*r(26,Kuk) + 50000*r(26,Kok) + 117000*r(27,Mat)
     
      + 72800*r(27,Kut) + 234000*r(27,Kot) + 60320*r(27,Mak) + 59280*r(27,Kuk) + 52520*r(27,Kok) + 124200*r(28,Mat) + 76950*r(28,Kut) + 251100*r(28,Kot) + 63180*r(28,Mak) + 62370*r(28,Kuk) + 55080*r(28,Kok) + 131600*r(29,Mat) + 81200*r(29,Kut)
     
      + 268800*r(29,Kot) + 66080*r(29,Mak) + 65520*r(29,Kuk) + 57680*r(29,Kok) + 139200*r(30,Mat) + 85550*r(30,Kut) + 287100*r(30,Kot) + 69020*r(30,Mak) + 68730*r(30,Kuk) + 60320*r(30,Kok) + 147000*r(31,Mat) + 90000*r(31,Kut) + 306000*r(31,Kot)
     
      + 72000*r(31,Mak) + 72000*r(31,Kuk) + 63000*r(31,Kok) + 155000*r(32,Mat) + 94550*r(32,Kut) + 325500*r(32,Kot) + 75020*r(32,Mak) + 75330*r(32,Kuk) + 65720*r(32,Kok) + 163200*r(33,Mat) + 99200*r(33,Kut) + 345600*r(33,Kot) + 78080*r(33,Mak)
     
      + 78720*r(33,Kuk) + 68480*r(33,Kok) + 171600*r(34,Mat) + 103950*r(34,Kut) + 366300*r(34,Kot) + 81180*r(34,Mak) + 82170*r(34,Kuk) + 71280*r(34,Kok) + 180200*r(35,Mat) + 108800*r(35,Kut) + 387600*r(35,Kot) + 84320*r(35,Mak) + 85680*r(35,Kuk)
     
      + 74120*r(35,Kok) + 189000*r(36,Mat) + 113750*r(36,Kut) + 409500*r(36,Kot) + 87500*r(36,Mak) + 89250*r(36,Kuk) + 77000*r(36,Kok) + 198000*r(37,Mat) + 118800*r(37,Kut) + 432000*r(37,Kot) + 90720*r(37,Mak) + 92880*r(37,Kuk) + 79920*r(37,Kok)
     
      + 207200*r(38,Mat) + 123950*r(38,Kut) + 455100*r(38,Kot) + 93980*r(38,Mak) + 96570*r(38,Kuk) + 82880*r(38,Kok) + 216600*r(39,Mat) + 129200*r(39,Kut) + 478800*r(39,Kot) + 97280*r(39,Mak) + 100320*r(39,Kuk) + 85880*r(39,Kok) + 226200*r(40,Mat)
     
      + 134550*r(40,Kut) + 503100*r(40,Kot) + 100620*r(40,Mak) + 104130*r(40,Kuk) + 88920*r(40,Kok) + 236000*r(41,Mat) + 140000*r(41,Kut) + 528000*r(41,Kot) + 104000*r(41,Mak) + 108000*r(41,Kuk) + 92000*r(41,Kok) + 246000*r(42,Mat) + 145550*r(42,Kut)
     
      + 553500*r(42,Kot) + 107420*r(42,Mak) + 111930*r(42,Kuk) + 95120*r(42,Kok) + 256200*r(43,Mat) + 151200*r(43,Kut) + 579600*r(43,Kot) + 110880*r(43,Mak) + 115920*r(43,Kuk) + 98280*r(43,Kok) + 266600*r(44,Mat) + 156950*r(44,Kut) + 606300*r(44,Kot)
     
      + 114380*r(44,Mak) + 119970*r(44,Kuk) + 101480*r(44,Kok) + 277200*r(45,Mat) + 162800*r(45,Kut) + 633600*r(45,Kot) + 117920*r(45,Mak) + 124080*r(45,Kuk) + 104720*r(45,Kok) + 288000*r(46,Mat) + 168750*r(46,Kut) + 661500*r(46,Kot) + 121500*r(46,Mak)
     
      + 128250*r(46,Kuk) + 108000*r(46,Kok) + 299000*r(47,Mat) + 174800*r(47,Kut) + 690000*r(47,Kot) + 125120*r(47,Mak) + 132480*r(47,Kuk) + 111320*r(47,Kok) + 310200*r(48,Mat) + 180950*r(48,Kut) + 719100*r(48,Kot) + 128780*r(48,Mak) + 136770*r(48,Kuk)
     
      + 114680*r(48,Kok) + 321600*r(49,Mat) + 187200*r(49,Kut) + 748800*r(49,Kot) + 132480*r(49,Mak) + 141120*r(49,Kuk) + 118080*r(49,Kok) + 333200*r(50,Mat) + 193550*r(50,Kut) + 779100*r(50,Kot) + 136220*r(50,Mak) + 145530*r(50,Kuk) + 121520*r(50,Kok)
     
      + 345000*r(51,Mat) + 200000*r(51,Kut) + 810000*r(51,Kot) + 140000*r(51,Mak) + 150000*r(51,Kuk) + 125000*r(51,Kok) + 357000*r(52,Mat) + 206550*r(52,Kut) + 841500*r(52,Kot) + 143820*r(52,Mak) + 154530*r(52,Kuk) + 128520*r(52,Kok) + 369200*r(53,Mat)
     
      + 213200*r(53,Kut) + 873600*r(53,Kot) + 147680*r(53,Mak) + 159120*r(53,Kuk) + 132080*r(53,Kok) + 381600*r(54,Mat) + 219950*r(54,Kut) + 906300*r(54,Kot) + 151580*r(54,Mak) + 163770*r(54,Kuk) + 135680*r(54,Kok) + 394200*r(55,Mat) + 226800*r(55,Kut)
     
      + 939600*r(55,Kot) + 155520*r(55,Mak) + 168480*r(55,Kuk) + 139320*r(55,Kok) + 407000*r(56,Mat) + 233750*r(56,Kut) + 973500*r(56,Kot) + 159500*r(56,Mak) + 173250*r(56,Kuk) + 143000*r(56,Kok) + 420000*r(57,Mat) + 240800*r(57,Kut) + 1008000*r(57,Kot)
GAMS 24.8.1  r59919 Released Dec 22, 2016 DEX-DEG x86 64bit/Mac OS X                                                                                                                                                                   01/17/17 22:39:53 Page 9
G e n e r a l   A l g e b r a i c   M o d e l i n g   S y s t e m
Equation Listing    SOLVE final Using MIP From line 358


     obj  =E=  Maximum gross profit     
     
      + 163520*r(57,Mak) + 178080*r(57,Kuk) + 146720*r(57,Kok) + 433200*r(58,Mat) + 247950*r(58,Kut) + 1043100*r(58,Kot) + 167580*r(58,Mak) + 182970*r(58,Kuk) + 150480*r(58,Kok) + 446600*r(59,Mat) + 255200*r(59,Kut) + 1078800*r(59,Kot) + 171680*r(59,Mak)
     
      + 187920*r(59,Kuk) + 154280*r(59,Kok) + 460200*r(60,Mat) + 262550*r(60,Kut) + 1115100*r(60,Kot) + 175820*r(60,Mak) + 192930*r(60,Kuk) + 158120*r(60,Kok) + 474000*r(61,Mat) + 270000*r(61,Kut) + 1152000*r(61,Kot) + 180000*r(61,Mak) + 198000*r(61,Kuk)
     
      + 162000*r(61,Kok) + 488000*r(62,Mat) + 277550*r(62,Kut) + 1189500*r(62,Kot) + 184220*r(62,Mak) + 203130*r(62,Kuk) + 165920*r(62,Kok) + 502200*r(63,Mat) + 285200*r(63,Kut) + 1227600*r(63,Kot) + 188480*r(63,Mak) + 208320*r(63,Kuk) + 169880*r(63,Kok)
     
      + 516600*r(64,Mat) + 292950*r(64,Kut) + 1266300*r(64,Kot) + 192780*r(64,Mak) + 213570*r(64,Kuk) + 173880*r(64,Kok) + 531200*r(65,Mat) + 300800*r(65,Kut) + 1305600*r(65,Kot) + 197120*r(65,Mak) + 218880*r(65,Kuk) + 177920*r(65,Kok) + 546000*r(66,Mat)
     
      + 308750*r(66,Kut) + 1345500*r(66,Kot) + 201500*r(66,Mak) + 224250*r(66,Kuk) + 182000*r(66,Kok) + 561000*r(67,Mat) + 316800*r(67,Kut) + 1386000*r(67,Kot) + 205920*r(67,Mak) + 229680*r(67,Kuk) + 186120*r(67,Kok) + 576200*r(68,Mat) + 324950*r(68,Kut)
     
      + 1427100*r(68,Kot) + 210380*r(68,Mak) + 235170*r(68,Kuk) + 190280*r(68,Kok) + 591600*r(69,Mat) + 333200*r(69,Kut) + 1468800*r(69,Kot) + 214880*r(69,Mak) + 240720*r(69,Kuk) + 194480*r(69,Kok) + 607200*r(70,Mat) + 341550*r(70,Kut) + 1511100*r(70,Kot)
     
      + 219420*r(70,Mak) + 246330*r(70,Kuk) + 198720*r(70,Kok) + 623000*r(71,Mat) + 350000*r(71,Kut) + 1554000*r(71,Kot) + 224000*r(71,Mak) + 252000*r(71,Kuk) + 203000*r(71,Kok) + 639000*r(72,Mat) + 358550*r(72,Kut) + 1597500*r(72,Kot) + 228620*r(72,Mak)
     
      + 257730*r(72,Kuk) + 207320*r(72,Kok) + 655200*r(73,Mat) + 367200*r(73,Kut) + 1641600*r(73,Kot) + 233280*r(73,Mak) + 263520*r(73,Kuk) + 211680*r(73,Kok) + 671600*r(74,Mat) + 375950*r(74,Kut) + 1686300*r(74,Kot) + 237980*r(74,Mak) + 269370*r(74,Kuk)
     
      + 216080*r(74,Kok) + 688200*r(75,Mat) + 384800*r(75,Kut) + 1731600*r(75,Kot) + 242720*r(75,Mak) + 275280*r(75,Kuk) + 220520*r(75,Kok) + 705000*r(76,Mat) + 393750*r(76,Kut) + 1777500*r(76,Kot) + 247500*r(76,Mak) + 281250*r(76,Kuk) + 225000*r(76,Kok)
     
      + 722000*r(77,Mat) + 402800*r(77,Kut) + 1824000*r(77,Kot) + 252320*r(77,Mak) + 287280*r(77,Kuk) + 229520*r(77,Kok) + 739200*r(78,Mat) + 411950*r(78,Kut) + 1871100*r(78,Kot) + 257180*r(78,Mak) + 293370*r(78,Kuk) + 234080*r(78,Kok) + 756600*r(79,Mat)
     
      + 421200*r(79,Kut) + 1918800*r(79,Kot) + 262080*r(79,Mak) + 299520*r(79,Kuk) + 238680*r(79,Kok) + 774200*r(80,Mat) + 430550*r(80,Kut) + 1967100*r(80,Kot) + 267020*r(80,Mak) + 305730*r(80,Kuk) + 243320*r(80,Kok) + 792000*r(81,Mat) + 440000*r(81,Kut)
     
      + 2016000*r(81,Kot) + 272000*r(81,Mak) + 312000*r(81,Kuk) + 248000*r(81,Kok) + 810000*r(82,Mat) + 449550*r(82,Kut) + 2065500*r(82,Kot) + 277020*r(82,Mak) + 318330*r(82,Kuk) + 252720*r(82,Kok) + 828200*r(83,Mat) + 459200*r(83,Kut) + 2115600*r(83,Kot)
     
      + 282080*r(83,Mak) + 324720*r(83,Kuk) + 257480*r(83,Kok) + 846600*r(84,Mat) + 468950*r(84,Kut) + 2166300*r(84,Kot) + 287180*r(84,Mak) + 331170*r(84,Kuk) + 262280*r(84,Kok) + 865200*r(85,Mat) + 478800*r(85,Kut) + 2217600*r(85,Kot) + 292320*r(85,Mak)
     
      + 337680*r(85,Kuk) + 267120*r(85,Kok) + 884000*r(86,Mat) + 488750*r(86,Kut) + 2269500*r(86,Kot) + 297500*r(86,Mak) + 344250*r(86,Kuk) + 272000*r(86,Kok) + 903000*r(87,Mat) + 498800*r(87,Kut) + 2322000*r(87,Kot) + 302720*r(87,Mak) + 350880*r(87,Kuk)
     
      + 276920*r(87,Kok) + 922200*r(88,Mat) + 508950*r(88,Kut) + 2375100*r(88,Kot) + 307980*r(88,Mak) + 357570*r(88,Kuk) + 281880*r(88,Kok) + 941600*r(89,Mat) + 519200*r(89,Kut) + 2428800*r(89,Kot) + 313280*r(89,Mak) + 364320*r(89,Kuk) + 286880*r(89,Kok)
     
      + 961200*r(90,Mat) + 529550*r(90,Kut) + 2483100*r(90,Kot) + 318620*r(90,Mak) + 371130*r(90,Kuk) + 291920*r(90,Kok) + 981000*r(91,Mat) + 540000*r(91,Kut) + 2538000*r(91,Kot) + 324000*r(91,Mak) + 378000*r(91,Kuk) + 297000*r(91,Kok) + 1001000*r(92,Mat)
     
      + 550550*r(92,Kut) + 2593500*r(92,Kot) + 329420*r(92,Mak) + 384930*r(92,Kuk) + 302120*r(92,Kok) + 1021200*r(93,Mat) + 561200*r(93,Kut) + 2649600*r(93,Kot) + 334880*r(93,Mak) + 391920*r(93,Kuk) + 307280*r(93,Kok) + 1041600*r(94,Mat)
     
      + 571950*r(94,Kut) + 2706300*r(94,Kot) + 340380*r(94,Mak) + 398970*r(94,Kuk) + 312480*r(94,Kok) + 1062200*r(95,Mat) + 582800*r(95,Kut) + 2763600*r(95,Kot) + 345920*r(95,Mak) + 406080*r(95,Kuk) + 317720*r(95,Kok) + 1083000*r(96,Mat)
     
      + 593750*r(96,Kut) + 2821500*r(96,Kot) + 351500*r(96,Mak) + 413250*r(96,Kuk) + 323000*r(96,Kok) + 1104000*r(97,Mat) + 604800*r(97,Kut) + 2880000*r(97,Kot) + 357120*r(97,Mak) + 420480*r(97,Kuk) + 328320*r(97,Kok) + 1125200*r(98,Mat)
     
      + 615950*r(98,Kut) + 2939100*r(98,Kot) + 362780*r(98,Mak) + 427770*r(98,Kuk) + 333680*r(98,Kok) + 1146600*r(99,Mat) + 627200*r(99,Kut) + 2998800*r(99,Kot) + 368480*r(99,Mak) + 435120*r(99,Kuk) + 339080*r(99,Kok) + 1168200*r(100,Mat)
     
      + 638550*r(100,Kut) + 3059100*r(100,Kot) + 374220*r(100,Mak) + 442530*r(100,Kuk) + 344520*r(100,Kok) + 1190000*r(101,Mat) + 650000*r(101,Kut) + 3120000*r(101,Kot) + 380000*r(101,Mak) + 450000*r(101,Kuk) + 350000*r(101,Kok) + 1212000*r(102,Mat)
     
      + 661550*r(102,Kut) + 3181500*r(102,Kot) + 385820*r(102,Mak) + 457530*r(102,Kuk) + 355520*r(102,Kok) + 1234200*r(103,Mat) + 673200*r(103,Kut) + 3243600*r(103,Kot) + 391680*r(103,Mak) + 465120*r(103,Kuk) + 361080*r(103,Kok) + 1256600*r(104,Mat)
     
      + 684950*r(104,Kut) + 3306300*r(104,Kot) + 397580*r(104,Mak) + 472770*r(104,Kuk) + 366680*r(104,Kok) + 1279200*r(105,Mat) + 696800*r(105,Kut) + 3369600*r(105,Kot) + 403520*r(105,Mak) + 480480*r(105,Kuk) + 372320*r(105,Kok) + 1302000*r(106,Mat)
     
      + 708750*r(106,Kut) + 3433500*r(106,Kot) + 409500*r(106,Mak) + 488250*r(106,Kuk) + 378000*r(106,Kok) + 1325000*r(107,Mat) + 720800*r(107,Kut) + 3498000*r(107,Kot) + 415520*r(107,Mak) + 496080*r(107,Kuk) + 383720*r(107,Kok) - 15600*u(2,Mas,EU)
     
      - 12000*u(2,Mas,IE) - 12800*u(2,Mas,PA) - 13500*u(2,Mas,KI) - 11600*u(2,Kos,EU) - 12000*u(2,Kos,IE) - 12800*u(2,Kos,PA) - 13500*u(2,Kos,KI) - 43600*u(2,Kuv,EU) - 37000*u(2,Kuv,IE) - 34800*u(2,Kuv,PA) - 33500*u(2,Kuv,KI) - 42600*u(2,Kov,EU)
     
      - 40000*u(2,Kov,IE) - 37800*u(2,Kov,PA) - 36500*u(2,Kov,KI) - 22800*u(2,Hsel,EU) - 24600*u(2,Hsel,IE) - 22500*u(2,Hsel,PA) - 25400*u(2,Hsel,KI) - 24700*u(2,Lsel,EU) - 27800*u(2,Lsel,IE) - 22500*u(2,Lsel,PA) - 24300*u(2,Lsel,KI) - 44600*u(2,Pap,EU)
GAMS 24.8.1  r59919 Released Dec 22, 2016 DEX-DEG x86 64bit/Mac OS X                                                                                                                                                                  01/17/17 22:39:53 Page 10
G e n e r a l   A l g e b r a i c   M o d e l i n g   S y s t e m
Equation Listing    SOLVE final Using MIP From line 358


     obj  =E=  Maximum gross profit     
     
      - 46000*u(2,Pap,IE) - 41800*u(2,Pap,PA) - 46500*u(2,Pap,KI) - 30400*u(3,Mas,EU) - 22000*u(3,Mas,IE) - 23200*u(3,Mas,PA) - 24000*u(3,Mas,KI) - 20400*u(3,Kos,EU) - 20000*u(3,Kos,IE) - 21200*u(3,Kos,PA) - 22000*u(3,Kos,KI) - 86400*u(3,Kuv,EU)
     
      - 72000*u(3,Kuv,IE) - 67200*u(3,Kuv,PA) - 64000*u(3,Kuv,KI) - 84400*u(3,Kov,EU) - 78000*u(3,Kov,IE) - 73200*u(3,Kov,PA) - 70000*u(3,Kov,KI) - 45200*u(3,Hsel,EU) - 48400*u(3,Hsel,IE) - 44000*u(3,Hsel,PA) - 49600*u(3,Hsel,KI) - 48800*u(3,Lsel,EU)
     
      - 55200*u(3,Lsel,IE) - 44000*u(3,Lsel,PA) - 47200*u(3,Lsel,KI) - 88400*u(3,Pap,EU) - 90000*u(3,Pap,IE) - 81200*u(3,Pap,PA) - 90000*u(3,Pap,KI) - 44400*u(4,Mas,EU) - 30000*u(4,Mas,IE) - 31200*u(4,Mas,PA) - 31500*u(4,Mas,KI) - 26400*u(4,Kos,EU)
     
      - 24000*u(4,Kos,IE) - 25200*u(4,Kos,PA) - 25500*u(4,Kos,KI) - 128400*u(4,Kuv,EU) - 105000*u(4,Kuv,IE) - 97200*u(4,Kuv,PA) - 91500*u(4,Kuv,KI) - 125400*u(4,Kov,EU) - 114000*u(4,Kov,IE) - 106200*u(4,Kov,PA) - 100500*u(4,Kov,KI) - 67200*u(4,Hsel,EU)
     
      - 71400*u(4,Hsel,IE) - 64500*u(4,Hsel,PA) - 72600*u(4,Hsel,KI) - 72300*u(4,Lsel,EU) - 82200*u(4,Lsel,IE) - 64500*u(4,Lsel,PA) - 68700*u(4,Lsel,KI) - 131400*u(4,Pap,EU) - 132000*u(4,Pap,IE) - 118200*u(4,Pap,PA) - 130500*u(4,Pap,KI)
     
      - 57600*u(5,Mas,EU) - 36000*u(5,Mas,IE) - 36800*u(5,Mas,PA) - 36000*u(5,Mas,KI) - 29600*u(5,Kos,EU) - 24000*u(5,Kos,IE) - 24800*u(5,Kos,PA) - 24000*u(5,Kos,KI) - 169600*u(5,Kuv,EU) - 136000*u(5,Kuv,IE) - 124800*u(5,Kuv,PA) - 116000*u(5,Kuv,KI)
     
      - 165600*u(5,Kov,EU) - 148000*u(5,Kov,IE) - 136800*u(5,Kov,PA) - 128000*u(5,Kov,KI) - 88800*u(5,Hsel,EU) - 93600*u(5,Hsel,IE) - 84000*u(5,Hsel,PA) - 94400*u(5,Hsel,KI) - 95200*u(5,Lsel,EU) - 108800*u(5,Lsel,IE) - 84000*u(5,Lsel,PA)
     
      - 88800*u(5,Lsel,KI) - 173600*u(5,Pap,EU) - 172000*u(5,Pap,IE) - 152800*u(5,Pap,PA) - 168000*u(5,Pap,KI) - 70000*u(6,Mas,EU) - 40000*u(6,Mas,IE) - 40000*u(6,Mas,PA) - 37500*u(6,Mas,KI) - 30000*u(6,Kos,EU) - 20000*u(6,Kos,IE) - 20000*u(6,Kos,PA)
     
      - 17500*u(6,Kos,KI) - 210000*u(6,Kuv,EU) - 165000*u(6,Kuv,IE) - 150000*u(6,Kuv,PA) - 137500*u(6,Kuv,KI) - 205000*u(6,Kov,EU) - 180000*u(6,Kov,IE) - 165000*u(6,Kov,PA) - 152500*u(6,Kov,KI) - 110000*u(6,Hsel,EU) - 115000*u(6,Hsel,IE)
     
      - 102500*u(6,Hsel,PA) - 115000*u(6,Hsel,KI) - 117500*u(6,Lsel,EU) - 135000*u(6,Lsel,IE) - 102500*u(6,Lsel,PA) - 107500*u(6,Lsel,KI) - 215000*u(6,Pap,EU) - 210000*u(6,Pap,IE) - 185000*u(6,Pap,PA) - 202500*u(6,Pap,KI) - 81600*u(7,Mas,EU)
     
      - 42000*u(7,Mas,IE) - 40800*u(7,Mas,PA) - 36000*u(7,Mas,KI) - 27600*u(7,Kos,EU) - 12000*u(7,Kos,IE) - 10800*u(7,Kos,PA) - 6000*u(7,Kos,KI) - 249600*u(7,Kuv,EU) - 192000*u(7,Kuv,IE) - 172800*u(7,Kuv,PA) - 156000*u(7,Kuv,KI) - 243600*u(7,Kov,EU)
     
      - 210000*u(7,Kov,IE) - 190800*u(7,Kov,PA) - 174000*u(7,Kov,KI) - 130800*u(7,Hsel,EU) - 135600*u(7,Hsel,IE) - 120000*u(7,Hsel,PA) - 134400*u(7,Hsel,KI) - 139200*u(7,Lsel,EU) - 160800*u(7,Lsel,IE) - 120000*u(7,Lsel,PA) - 124800*u(7,Lsel,KI)
     
      - 255600*u(7,Pap,EU) - 246000*u(7,Pap,IE) - 214800*u(7,Pap,PA) - 234000*u(7,Pap,KI) - 92400*u(8,Mas,EU) - 42000*u(8,Mas,IE) - 39200*u(8,Mas,PA) - 31500*u(8,Mas,KI) - 22400*u(8,Kos,EU) + 2800*u(8,Kos,PA) + 10500*u(8,Kos,KI) - 288400*u(8,Kuv,EU)
     
      - 217000*u(8,Kuv,IE) - 193200*u(8,Kuv,PA) - 171500*u(8,Kuv,KI) - 281400*u(8,Kov,EU) - 238000*u(8,Kov,IE) - 214200*u(8,Kov,PA) - 192500*u(8,Kov,KI) - 151200*u(8,Hsel,EU) - 155400*u(8,Hsel,IE) - 136500*u(8,Hsel,PA) - 152600*u(8,Hsel,KI)
     
      - 160300*u(8,Lsel,EU) - 186200*u(8,Lsel,IE) - 136500*u(8,Lsel,PA) - 140700*u(8,Lsel,KI) - 295400*u(8,Pap,EU) - 280000*u(8,Pap,IE) - 242200*u(8,Pap,PA) - 262500*u(8,Pap,KI) - 102400*u(9,Mas,EU) - 40000*u(9,Mas,IE) - 35200*u(9,Mas,PA)
     
      - 24000*u(9,Mas,KI) - 14400*u(9,Kos,EU) + 16000*u(9,Kos,IE) + 20800*u(9,Kos,PA) + 32000*u(9,Kos,KI) - 326400*u(9,Kuv,EU) - 240000*u(9,Kuv,IE) - 211200*u(9,Kuv,PA) - 184000*u(9,Kuv,KI) - 318400*u(9,Kov,EU) - 264000*u(9,Kov,IE) - 235200*u(9,Kov,PA)
     
      - 208000*u(9,Kov,KI) - 171200*u(9,Hsel,EU) - 174400*u(9,Hsel,IE) - 152000*u(9,Hsel,PA) - 169600*u(9,Hsel,KI) - 180800*u(9,Lsel,EU) - 211200*u(9,Lsel,IE) - 152000*u(9,Lsel,PA) - 155200*u(9,Lsel,KI) - 334400*u(9,Pap,EU) - 312000*u(9,Pap,IE)
     
      - 267200*u(9,Pap,PA) - 288000*u(9,Pap,KI) - 111600*u(10,Mas,EU) - 36000*u(10,Mas,IE) - 28800*u(10,Mas,PA) - 13500*u(10,Mas,KI) - 3600*u(10,Kos,EU) + 36000*u(10,Kos,IE) + 43200*u(10,Kos,PA) + 58500*u(10,Kos,KI) - 363600*u(10,Kuv,EU)
     
      - 261000*u(10,Kuv,IE) - 226800*u(10,Kuv,PA) - 193500*u(10,Kuv,KI) - 354600*u(10,Kov,EU) - 288000*u(10,Kov,IE) - 253800*u(10,Kov,PA) - 220500*u(10,Kov,KI) - 190800*u(10,Hsel,EU) - 192600*u(10,Hsel,IE) - 166500*u(10,Hsel,PA) - 185400*u(10,Hsel,KI)
     
      - 200700*u(10,Lsel,EU) - 235800*u(10,Lsel,IE) - 166500*u(10,Lsel,PA) - 168300*u(10,Lsel,KI) - 372600*u(10,Pap,EU) - 342000*u(10,Pap,IE) - 289800*u(10,Pap,PA) - 310500*u(10,Pap,KI) - 120000*u(11,Mas,EU) - 30000*u(11,Mas,IE) - 20000*u(11,Mas,PA)
     
      + 10000*u(11,Kos,EU) + 60000*u(11,Kos,IE) + 70000*u(11,Kos,PA) + 90000*u(11,Kos,KI) - 400000*u(11,Kuv,EU) - 280000*u(11,Kuv,IE) - 240000*u(11,Kuv,PA) - 200000*u(11,Kuv,KI) - 390000*u(11,Kov,EU) - 310000*u(11,Kov,IE) - 270000*u(11,Kov,PA)
     
      - 230000*u(11,Kov,KI) - 210000*u(11,Hsel,EU) - 210000*u(11,Hsel,IE) - 180000*u(11,Hsel,PA) - 200000*u(11,Hsel,KI) - 220000*u(11,Lsel,EU) - 260000*u(11,Lsel,IE) - 180000*u(11,Lsel,PA) - 180000*u(11,Lsel,KI) - 410000*u(11,Pap,EU) - 370000*u(11,Pap,IE)
     
      - 310000*u(11,Pap,PA) - 330000*u(11,Pap,KI) - 127600*u(12,Mas,EU) - 22000*u(12,Mas,IE) - 8800.00000000003*u(12,Mas,PA) + 16500*u(12,Mas,KI) + 26400*u(12,Kos,EU) + 88000*u(12,Kos,IE) + 101200*u(12,Kos,PA) + 126500*u(12,Kos,KI) - 435600*u(12,Kuv,EU)
     
      - 297000*u(12,Kuv,IE) - 250800*u(12,Kuv,PA) - 203500*u(12,Kuv,KI) - 424600*u(12,Kov,EU) - 330000*u(12,Kov,IE) - 283800*u(12,Kov,PA) - 236500*u(12,Kov,KI) - 228800*u(12,Hsel,EU) - 226600*u(12,Hsel,IE) - 192500*u(12,Hsel,PA) - 213400*u(12,Hsel,KI)
     
      - 238700*u(12,Lsel,EU) - 283800*u(12,Lsel,IE) - 192500*u(12,Lsel,PA) - 190300*u(12,Lsel,KI) - 446600*u(12,Pap,EU) - 396000*u(12,Pap,IE) - 327800*u(12,Pap,PA) - 346500*u(12,Pap,KI) - 134400*u(13,Mas,EU) - 12000*u(13,Mas,IE)
     
      + 4799.99999999997*u(13,Mas,PA) + 36000*u(13,Mas,KI) + 45600*u(13,Kos,EU) + 120000*u(13,Kos,IE) + 136800*u(13,Kos,PA) + 168000*u(13,Kos,KI) - 470400*u(13,Kuv,EU) - 312000*u(13,Kuv,IE) - 259200*u(13,Kuv,PA) - 204000*u(13,Kuv,KI) - 458400*u(13,Kov,EU)
GAMS 24.8.1  r59919 Released Dec 22, 2016 DEX-DEG x86 64bit/Mac OS X                                                                                                                                                                  01/17/17 22:39:53 Page 11
G e n e r a l   A l g e b r a i c   M o d e l i n g   S y s t e m
Equation Listing    SOLVE final Using MIP From line 358


     obj  =E=  Maximum gross profit     
     
      - 348000*u(13,Kov,IE) - 295200*u(13,Kov,PA) - 240000*u(13,Kov,KI) - 247200*u(13,Hsel,EU) - 242400*u(13,Hsel,IE) - 204000*u(13,Hsel,PA) - 225600*u(13,Hsel,KI) - 256800*u(13,Lsel,EU) - 307200*u(13,Lsel,IE) - 204000*u(13,Lsel,PA) - 199200*u(13,Lsel,KI)
     
      - 482400*u(13,Pap,EU) - 420000*u(13,Pap,IE) - 343200*u(13,Pap,PA) - 360000*u(13,Pap,KI) - 140400*u(14,Mas,EU) + 20800*u(14,Mas,PA) + 58500*u(14,Mas,KI) + 67600*u(14,Kos,EU) + 156000*u(14,Kos,IE) + 176800*u(14,Kos,PA) + 214500*u(14,Kos,KI)
     
      - 504400*u(14,Kuv,EU) - 325000*u(14,Kuv,IE) - 265200*u(14,Kuv,PA) - 201500*u(14,Kuv,KI) - 491400*u(14,Kov,EU) - 364000*u(14,Kov,IE) - 304200*u(14,Kov,PA) - 240500*u(14,Kov,KI) - 265200*u(14,Hsel,EU) - 257400*u(14,Hsel,IE) - 214500*u(14,Hsel,PA)
     
      - 236600*u(14,Hsel,KI) - 274300*u(14,Lsel,EU) - 330200*u(14,Lsel,IE) - 214500*u(14,Lsel,PA) - 206700*u(14,Lsel,KI) - 517400*u(14,Pap,EU) - 442000*u(14,Pap,IE) - 356200*u(14,Pap,PA) - 370500*u(14,Pap,KI) - 145600*u(15,Mas,EU) + 14000*u(15,Mas,IE)
     
      + 39200*u(15,Mas,PA) + 84000*u(15,Mas,KI) + 92400*u(15,Kos,EU) + 196000*u(15,Kos,IE) + 221200*u(15,Kos,PA) + 266000*u(15,Kos,KI) - 537600*u(15,Kuv,EU) - 336000*u(15,Kuv,IE) - 268800*u(15,Kuv,PA) - 196000*u(15,Kuv,KI) - 523600*u(15,Kov,EU)
     
      - 378000*u(15,Kov,IE) - 310800*u(15,Kov,PA) - 238000*u(15,Kov,KI) - 282800*u(15,Hsel,EU) - 271600*u(15,Hsel,IE) - 224000*u(15,Hsel,PA) - 246400*u(15,Hsel,KI) - 291200*u(15,Lsel,EU) - 352800*u(15,Lsel,IE) - 224000*u(15,Lsel,PA) - 212800*u(15,Lsel,KI)
     
      - 551600*u(15,Pap,EU) - 462000*u(15,Pap,IE) - 366800*u(15,Pap,PA) - 378000*u(15,Pap,KI) - 150000*u(16,Mas,EU) + 30000*u(16,Mas,IE) + 60000*u(16,Mas,PA) + 112500*u(16,Mas,KI) + 120000*u(16,Kos,EU) + 240000*u(16,Kos,IE) + 270000*u(16,Kos,PA)
     
      + 322500*u(16,Kos,KI) - 570000*u(16,Kuv,EU) - 345000*u(16,Kuv,IE) - 270000*u(16,Kuv,PA) - 187500*u(16,Kuv,KI) - 555000*u(16,Kov,EU) - 390000*u(16,Kov,IE) - 315000*u(16,Kov,PA) - 232500*u(16,Kov,KI) - 300000*u(16,Hsel,EU) - 285000*u(16,Hsel,IE)
     
      - 232500*u(16,Hsel,PA) - 255000*u(16,Hsel,KI) - 307500*u(16,Lsel,EU) - 375000*u(16,Lsel,IE) - 232500*u(16,Lsel,PA) - 217500*u(16,Lsel,KI) - 585000*u(16,Pap,EU) - 480000*u(16,Pap,IE) - 375000*u(16,Pap,PA) - 382500*u(16,Pap,KI) - 153600*u(17,Mas,EU)
     
      + 48000*u(17,Mas,IE) + 83200*u(17,Mas,PA) + 144000*u(17,Mas,KI) + 150400*u(17,Kos,EU) + 288000*u(17,Kos,IE) + 323200*u(17,Kos,PA) + 384000*u(17,Kos,KI) - 601600*u(17,Kuv,EU) - 352000*u(17,Kuv,IE) - 268800*u(17,Kuv,PA) - 176000*u(17,Kuv,KI)
     
      - 585600*u(17,Kov,EU) - 400000*u(17,Kov,IE) - 316800*u(17,Kov,PA) - 224000*u(17,Kov,KI) - 316800*u(17,Hsel,EU) - 297600*u(17,Hsel,IE) - 240000*u(17,Hsel,PA) - 262400*u(17,Hsel,KI) - 323200*u(17,Lsel,EU) - 396800*u(17,Lsel,IE) - 240000*u(17,Lsel,PA)
     
      - 220800*u(17,Lsel,KI) - 617600*u(17,Pap,EU) - 496000*u(17,Pap,IE) - 380800*u(17,Pap,PA) - 384000*u(17,Pap,KI) - 156400*u(18,Mas,EU) + 68000*u(18,Mas,IE) + 108800*u(18,Mas,PA) + 178500*u(18,Mas,KI) + 183600*u(18,Kos,EU) + 340000*u(18,Kos,IE)
     
      + 380800*u(18,Kos,PA) + 450500*u(18,Kos,KI) - 632400*u(18,Kuv,EU) - 357000*u(18,Kuv,IE) - 265200*u(18,Kuv,PA) - 161500*u(18,Kuv,KI) - 615400*u(18,Kov,EU) - 408000*u(18,Kov,IE) - 316200*u(18,Kov,PA) - 212500*u(18,Kov,KI) - 333200*u(18,Hsel,EU)
     
      - 309400*u(18,Hsel,IE) - 246500*u(18,Hsel,PA) - 268600*u(18,Hsel,KI) - 338300*u(18,Lsel,EU) - 418200*u(18,Lsel,IE) - 246500*u(18,Lsel,PA) - 222700*u(18,Lsel,KI) - 649400*u(18,Pap,EU) - 510000*u(18,Pap,IE) - 384200*u(18,Pap,PA) - 382500*u(18,Pap,KI)
     
      - 158400*u(19,Mas,EU) + 90000*u(19,Mas,IE) + 136800*u(19,Mas,PA) + 216000*u(19,Mas,KI) + 219600*u(19,Kos,EU) + 396000*u(19,Kos,IE) + 442800*u(19,Kos,PA) + 522000*u(19,Kos,KI) - 662400*u(19,Kuv,EU) - 360000*u(19,Kuv,IE) - 259200*u(19,Kuv,PA)
     
      - 144000*u(19,Kuv,KI) - 644400*u(19,Kov,EU) - 414000*u(19,Kov,IE) - 313200*u(19,Kov,PA) - 198000*u(19,Kov,KI) - 349200*u(19,Hsel,EU) - 320400*u(19,Hsel,IE) - 252000*u(19,Hsel,PA) - 273600*u(19,Hsel,KI) - 352800*u(19,Lsel,EU) - 439200*u(19,Lsel,IE)
     
      - 252000*u(19,Lsel,PA) - 223200*u(19,Lsel,KI) - 680400*u(19,Pap,EU) - 522000*u(19,Pap,IE) - 385200*u(19,Pap,PA) - 378000*u(19,Pap,KI) - 159600*u(20,Mas,EU) + 114000*u(20,Mas,IE) + 167200*u(20,Mas,PA) + 256500*u(20,Mas,KI) + 258400*u(20,Kos,EU)
     
      + 456000*u(20,Kos,IE) + 509200*u(20,Kos,PA) + 598500*u(20,Kos,KI) - 691600*u(20,Kuv,EU) - 361000*u(20,Kuv,IE) - 250800*u(20,Kuv,PA) - 123500*u(20,Kuv,KI) - 672600*u(20,Kov,EU) - 418000*u(20,Kov,IE) - 307800*u(20,Kov,PA) - 180500*u(20,Kov,KI)
     
      - 364800*u(20,Hsel,EU) - 330600*u(20,Hsel,IE) - 256500*u(20,Hsel,PA) - 277400*u(20,Hsel,KI) - 366700*u(20,Lsel,EU) - 459800*u(20,Lsel,IE) - 256500*u(20,Lsel,PA) - 222300*u(20,Lsel,KI) - 710600*u(20,Pap,EU) - 532000*u(20,Pap,IE) - 383800*u(20,Pap,PA)
     
      - 370500*u(20,Pap,KI) - 160000*u(21,Mas,EU) + 140000*u(21,Mas,IE) + 200000*u(21,Mas,PA) + 300000*u(21,Mas,KI) + 300000*u(21,Kos,EU) + 520000*u(21,Kos,IE) + 580000*u(21,Kos,PA) + 680000*u(21,Kos,KI) - 720000*u(21,Kuv,EU) - 360000*u(21,Kuv,IE)
     
      - 240000*u(21,Kuv,PA) - 100000*u(21,Kuv,KI) - 700000*u(21,Kov,EU) - 420000*u(21,Kov,IE) - 300000*u(21,Kov,PA) - 160000*u(21,Kov,KI) - 380000*u(21,Hsel,EU) - 340000*u(21,Hsel,IE) - 260000*u(21,Hsel,PA) - 280000*u(21,Hsel,KI) - 380000*u(21,Lsel,EU)
     
      - 480000*u(21,Lsel,IE) - 260000*u(21,Lsel,PA) - 220000*u(21,Lsel,KI) - 740000*u(21,Pap,EU) - 540000*u(21,Pap,IE) - 380000*u(21,Pap,PA) - 360000*u(21,Pap,KI) - 159600*u(22,Mas,EU) + 168000*u(22,Mas,IE) + 235200*u(22,Mas,PA) + 346500*u(22,Mas,KI)
     
      + 344400*u(22,Kos,EU) + 588000*u(22,Kos,IE) + 655200*u(22,Kos,PA) + 766500*u(22,Kos,KI) - 747600*u(22,Kuv,EU) - 357000*u(22,Kuv,IE) - 226800*u(22,Kuv,PA) - 73500*u(22,Kuv,KI) - 726600*u(22,Kov,EU) - 420000*u(22,Kov,IE) - 289800*u(22,Kov,PA)
     
      - 136500*u(22,Kov,KI) - 394800*u(22,Hsel,EU) - 348600*u(22,Hsel,IE) - 262500*u(22,Hsel,PA) - 281400*u(22,Hsel,KI) - 392700*u(22,Lsel,EU) - 499800*u(22,Lsel,IE) - 262500*u(22,Lsel,PA) - 216300*u(22,Lsel,KI) - 768600*u(22,Pap,EU) - 546000*u(22,Pap,IE)
     
      - 373800*u(22,Pap,PA) - 346500*u(22,Pap,KI) - 158400*u(23,Mas,EU) + 198000*u(23,Mas,IE) + 272800*u(23,Mas,PA) + 396000*u(23,Mas,KI) + 391600*u(23,Kos,EU) + 660000*u(23,Kos,IE) + 734800*u(23,Kos,PA) + 858000*u(23,Kos,KI) - 774400*u(23,Kuv,EU)
     
      - 352000*u(23,Kuv,IE) - 211200*u(23,Kuv,PA) - 44000*u(23,Kuv,KI) - 752400*u(23,Kov,EU) - 418000*u(23,Kov,IE) - 277200*u(23,Kov,PA) - 110000*u(23,Kov,KI) - 409200*u(23,Hsel,EU) - 356400*u(23,Hsel,IE) - 264000*u(23,Hsel,PA) - 281600*u(23,Hsel,KI)
GAMS 24.8.1  r59919 Released Dec 22, 2016 DEX-DEG x86 64bit/Mac OS X                                                                                                                                                                  01/17/17 22:39:53 Page 12
G e n e r a l   A l g e b r a i c   M o d e l i n g   S y s t e m
Equation Listing    SOLVE final Using MIP From line 358


     obj  =E=  Maximum gross profit     
     
      - 404800*u(23,Lsel,EU) - 519200*u(23,Lsel,IE) - 264000*u(23,Lsel,PA) - 211200*u(23,Lsel,KI) - 796400*u(23,Pap,EU) - 550000*u(23,Pap,IE) - 365200*u(23,Pap,PA) - 330000*u(23,Pap,KI) - 0.19*b(Mat) - 0.15*b(Kut) - 0.12*b(Kot) - 0.18*b(Mak) - 0.15*b(Kuk)
     
      - 0.15*b(Kok) =E= 0 ; (LHS = 0)
     

---- timber_used  =E=   amount of  timber i used to make  product j

timber_used(Mat)..  2*y(Mas) - s(Mat) =E= 0 ; (LHS = 0)
     
timber_used(Kut)..  2*y(Kus) + 2.8*y(Kuv) - s(Kut) =E= 0 ; (LHS = 0)
     
timber_used(Kot)..  2*y(Kos) + 2.8*y(Kov) - s(Kot) =E= 0 ; (LHS = 0)
     
timber_used(Mak)..  - 0.8*y(Mas) + 4.8*y(Hsel) - s(Mak) =E= 0 ; (LHS = 0)
     
timber_used(Kuk)..  - 0.8*y(Kus) - 1.6*y(Kuv) + y(Pap) - s(Kuk) =E= 0 ; (LHS = 0)
     
timber_used(Kok)..  - 0.8*y(Kos) - 1.6*y(Kov) + 4.2*y(Lsel) - s(Kok) =E= 0 ; (LHS = 0)
     

---- prod_starved  =G=  ensure that production can not be starved

prod_starved(Mat)..  - s(Mat) + 10000*r(2,Mat) + 20000*r(3,Mat) + 30000*r(4,Mat) + 40000*r(5,Mat) + 50000*r(6,Mat) + 60000*r(7,Mat) + 70000*r(8,Mat) + 80000*r(9,Mat) + 90000*r(10,Mat) + 100000*r(11,Mat) + 110000*r(12,Mat) + 120000*r(13,Mat)
     
      + 130000*r(14,Mat) + 140000*r(15,Mat) + 150000*r(16,Mat) + 160000*r(17,Mat) + 170000*r(18,Mat) + 180000*r(19,Mat) + 190000*r(20,Mat) + 200000*r(21,Mat) + 210000*r(22,Mat) + 220000*r(23,Mat) + 230000*r(24,Mat) + 240000*r(25,Mat) + 250000*r(26,Mat)
     
      + 260000*r(27,Mat) + 270000*r(28,Mat) + 280000*r(29,Mat) + 290000*r(30,Mat) + 300000*r(31,Mat) + 310000*r(32,Mat) + 320000*r(33,Mat) + 330000*r(34,Mat) + 340000*r(35,Mat) + 350000*r(36,Mat) + 360000*r(37,Mat) + 370000*r(38,Mat) + 380000*r(39,Mat)
     
      + 390000*r(40,Mat) + 400000*r(41,Mat) + 410000*r(42,Mat) + 420000*r(43,Mat) + 430000*r(44,Mat) + 440000*r(45,Mat) + 450000*r(46,Mat) + 460000*r(47,Mat) + 470000*r(48,Mat) + 480000*r(49,Mat) + 490000*r(50,Mat) + 500000*r(51,Mat) + 510000*r(52,Mat)
     
      + 520000*r(53,Mat) + 530000*r(54,Mat) + 540000*r(55,Mat) + 550000*r(56,Mat) + 560000*r(57,Mat) + 570000*r(58,Mat) + 580000*r(59,Mat) + 590000*r(60,Mat) + 600000*r(61,Mat) + 610000*r(62,Mat) + 620000*r(63,Mat) + 630000*r(64,Mat) + 640000*r(65,Mat)
     
      + 650000*r(66,Mat) + 660000*r(67,Mat) + 670000*r(68,Mat) + 680000*r(69,Mat) + 690000*r(70,Mat) + 700000*r(71,Mat) + 710000*r(72,Mat) + 720000*r(73,Mat) + 730000*r(74,Mat) + 740000*r(75,Mat) + 750000*r(76,Mat) + 760000*r(77,Mat) + 770000*r(78,Mat)
     
      + 780000*r(79,Mat) + 790000*r(80,Mat) + 800000*r(81,Mat) + 810000*r(82,Mat) + 820000*r(83,Mat) + 830000*r(84,Mat) + 840000*r(85,Mat) + 850000*r(86,Mat) + 860000*r(87,Mat) + 870000*r(88,Mat) + 880000*r(89,Mat) + 890000*r(90,Mat) + 900000*r(91,Mat)
     
      + 910000*r(92,Mat) + 920000*r(93,Mat) + 930000*r(94,Mat) + 940000*r(95,Mat) + 950000*r(96,Mat) + 960000*r(97,Mat) + 970000*r(98,Mat) + 980000*r(99,Mat) + 990000*r(100,Mat) + 1000000*r(101,Mat) + 1010000*r(102,Mat) + 1020000*r(103,Mat)
     
      + 1030000*r(104,Mat) + 1040000*r(105,Mat) + 1050000*r(106,Mat) + 1060000*r(107,Mat) =G= 0 ; (LHS = 0)
     
prod_starved(Kut)..  - s(Kut) + 10000*r(2,Kut) + 20000*r(3,Kut) + 30000*r(4,Kut) + 40000*r(5,Kut) + 50000*r(6,Kut) + 60000*r(7,Kut) + 70000*r(8,Kut) + 80000*r(9,Kut) + 90000*r(10,Kut) + 100000*r(11,Kut) + 110000*r(12,Kut) + 120000*r(13,Kut)
     
      + 130000*r(14,Kut) + 140000*r(15,Kut) + 150000*r(16,Kut) + 160000*r(17,Kut) + 170000*r(18,Kut) + 180000*r(19,Kut) + 190000*r(20,Kut) + 200000*r(21,Kut) + 210000*r(22,Kut) + 220000*r(23,Kut) + 230000*r(24,Kut) + 240000*r(25,Kut) + 250000*r(26,Kut)
     
      + 260000*r(27,Kut) + 270000*r(28,Kut) + 280000*r(29,Kut) + 290000*r(30,Kut) + 300000*r(31,Kut) + 310000*r(32,Kut) + 320000*r(33,Kut) + 330000*r(34,Kut) + 340000*r(35,Kut) + 350000*r(36,Kut) + 360000*r(37,Kut) + 370000*r(38,Kut) + 380000*r(39,Kut)
     
      + 390000*r(40,Kut) + 400000*r(41,Kut) + 410000*r(42,Kut) + 420000*r(43,Kut) + 430000*r(44,Kut) + 440000*r(45,Kut) + 450000*r(46,Kut) + 460000*r(47,Kut) + 470000*r(48,Kut) + 480000*r(49,Kut) + 490000*r(50,Kut) + 500000*r(51,Kut) + 510000*r(52,Kut)
     
      + 520000*r(53,Kut) + 530000*r(54,Kut) + 540000*r(55,Kut) + 550000*r(56,Kut) + 560000*r(57,Kut) + 570000*r(58,Kut) + 580000*r(59,Kut) + 590000*r(60,Kut) + 600000*r(61,Kut) + 610000*r(62,Kut) + 620000*r(63,Kut) + 630000*r(64,Kut) + 640000*r(65,Kut)
     
      + 650000*r(66,Kut) + 660000*r(67,Kut) + 670000*r(68,Kut) + 680000*r(69,Kut) + 690000*r(70,Kut) + 700000*r(71,Kut) + 710000*r(72,Kut) + 720000*r(73,Kut) + 730000*r(74,Kut) + 740000*r(75,Kut) + 750000*r(76,Kut) + 760000*r(77,Kut) + 770000*r(78,Kut)
GAMS 24.8.1  r59919 Released Dec 22, 2016 DEX-DEG x86 64bit/Mac OS X                                                                                                                                                                  01/17/17 22:39:53 Page 13
G e n e r a l   A l g e b r a i c   M o d e l i n g   S y s t e m
Equation Listing    SOLVE final Using MIP From line 358


     prod_starved  =G=  ensure that production can not be starved     
     
      + 780000*r(79,Kut) + 790000*r(80,Kut) + 800000*r(81,Kut) + 810000*r(82,Kut) + 820000*r(83,Kut) + 830000*r(84,Kut) + 840000*r(85,Kut) + 850000*r(86,Kut) + 860000*r(87,Kut) + 870000*r(88,Kut) + 880000*r(89,Kut) + 890000*r(90,Kut) + 900000*r(91,Kut)
     
      + 910000*r(92,Kut) + 920000*r(93,Kut) + 930000*r(94,Kut) + 940000*r(95,Kut) + 950000*r(96,Kut) + 960000*r(97,Kut) + 970000*r(98,Kut) + 980000*r(99,Kut) + 990000*r(100,Kut) + 1000000*r(101,Kut) + 1010000*r(102,Kut) + 1020000*r(103,Kut)
     
      + 1030000*r(104,Kut) + 1040000*r(105,Kut) + 1050000*r(106,Kut) + 1060000*r(107,Kut) =G= 0 ; (LHS = 0)
     
prod_starved(Kot)..  - s(Kot) + 10000*r(2,Kot) + 20000*r(3,Kot) + 30000*r(4,Kot) + 40000*r(5,Kot) + 50000*r(6,Kot) + 60000*r(7,Kot) + 70000*r(8,Kot) + 80000*r(9,Kot) + 90000*r(10,Kot) + 100000*r(11,Kot) + 110000*r(12,Kot) + 120000*r(13,Kot)
     
      + 130000*r(14,Kot) + 140000*r(15,Kot) + 150000*r(16,Kot) + 160000*r(17,Kot) + 170000*r(18,Kot) + 180000*r(19,Kot) + 190000*r(20,Kot) + 200000*r(21,Kot) + 210000*r(22,Kot) + 220000*r(23,Kot) + 230000*r(24,Kot) + 240000*r(25,Kot) + 250000*r(26,Kot)
     
      + 260000*r(27,Kot) + 270000*r(28,Kot) + 280000*r(29,Kot) + 290000*r(30,Kot) + 300000*r(31,Kot) + 310000*r(32,Kot) + 320000*r(33,Kot) + 330000*r(34,Kot) + 340000*r(35,Kot) + 350000*r(36,Kot) + 360000*r(37,Kot) + 370000*r(38,Kot) + 380000*r(39,Kot)
     
      + 390000*r(40,Kot) + 400000*r(41,Kot) + 410000*r(42,Kot) + 420000*r(43,Kot) + 430000*r(44,Kot) + 440000*r(45,Kot) + 450000*r(46,Kot) + 460000*r(47,Kot) + 470000*r(48,Kot) + 480000*r(49,Kot) + 490000*r(50,Kot) + 500000*r(51,Kot) + 510000*r(52,Kot)
     
      + 520000*r(53,Kot) + 530000*r(54,Kot) + 540000*r(55,Kot) + 550000*r(56,Kot) + 560000*r(57,Kot) + 570000*r(58,Kot) + 580000*r(59,Kot) + 590000*r(60,Kot) + 600000*r(61,Kot) + 610000*r(62,Kot) + 620000*r(63,Kot) + 630000*r(64,Kot) + 640000*r(65,Kot)
     
      + 650000*r(66,Kot) + 660000*r(67,Kot) + 670000*r(68,Kot) + 680000*r(69,Kot) + 690000*r(70,Kot) + 700000*r(71,Kot) + 710000*r(72,Kot) + 720000*r(73,Kot) + 730000*r(74,Kot) + 740000*r(75,Kot) + 750000*r(76,Kot) + 760000*r(77,Kot) + 770000*r(78,Kot)
     
      + 780000*r(79,Kot) + 790000*r(80,Kot) + 800000*r(81,Kot) + 810000*r(82,Kot) + 820000*r(83,Kot) + 830000*r(84,Kot) + 840000*r(85,Kot) + 850000*r(86,Kot) + 860000*r(87,Kot) + 870000*r(88,Kot) + 880000*r(89,Kot) + 890000*r(90,Kot) + 900000*r(91,Kot)
     
      + 910000*r(92,Kot) + 920000*r(93,Kot) + 930000*r(94,Kot) + 940000*r(95,Kot) + 950000*r(96,Kot) + 960000*r(97,Kot) + 970000*r(98,Kot) + 980000*r(99,Kot) + 990000*r(100,Kot) + 1000000*r(101,Kot) + 1010000*r(102,Kot) + 1020000*r(103,Kot)
     
      + 1030000*r(104,Kot) + 1040000*r(105,Kot) + 1050000*r(106,Kot) + 1060000*r(107,Kot) =G= 0 ; (LHS = 0)
     
prod_starved(Mak)..  - s(Mak) + 10000*r(2,Mak) + 20000*r(3,Mak) + 30000*r(4,Mak) + 40000*r(5,Mak) + 50000*r(6,Mak) + 60000*r(7,Mak) + 70000*r(8,Mak) + 80000*r(9,Mak) + 90000*r(10,Mak) + 100000*r(11,Mak) + 110000*r(12,Mak) + 120000*r(13,Mak)
     
      + 130000*r(14,Mak) + 140000*r(15,Mak) + 150000*r(16,Mak) + 160000*r(17,Mak) + 170000*r(18,Mak) + 180000*r(19,Mak) + 190000*r(20,Mak) + 200000*r(21,Mak) + 210000*r(22,Mak) + 220000*r(23,Mak) + 230000*r(24,Mak) + 240000*r(25,Mak) + 250000*r(26,Mak)
     
      + 260000*r(27,Mak) + 270000*r(28,Mak) + 280000*r(29,Mak) + 290000*r(30,Mak) + 300000*r(31,Mak) + 310000*r(32,Mak) + 320000*r(33,Mak) + 330000*r(34,Mak) + 340000*r(35,Mak) + 350000*r(36,Mak) + 360000*r(37,Mak) + 370000*r(38,Mak) + 380000*r(39,Mak)
     
      + 390000*r(40,Mak) + 400000*r(41,Mak) + 410000*r(42,Mak) + 420000*r(43,Mak) + 430000*r(44,Mak) + 440000*r(45,Mak) + 450000*r(46,Mak) + 460000*r(47,Mak) + 470000*r(48,Mak) + 480000*r(49,Mak) + 490000*r(50,Mak) + 500000*r(51,Mak) + 510000*r(52,Mak)
     
      + 520000*r(53,Mak) + 530000*r(54,Mak) + 540000*r(55,Mak) + 550000*r(56,Mak) + 560000*r(57,Mak) + 570000*r(58,Mak) + 580000*r(59,Mak) + 590000*r(60,Mak) + 600000*r(61,Mak) + 610000*r(62,Mak) + 620000*r(63,Mak) + 630000*r(64,Mak) + 640000*r(65,Mak)
     
      + 650000*r(66,Mak) + 660000*r(67,Mak) + 670000*r(68,Mak) + 680000*r(69,Mak) + 690000*r(70,Mak) + 700000*r(71,Mak) + 710000*r(72,Mak) + 720000*r(73,Mak) + 730000*r(74,Mak) + 740000*r(75,Mak) + 750000*r(76,Mak) + 760000*r(77,Mak) + 770000*r(78,Mak)
     
      + 780000*r(79,Mak) + 790000*r(80,Mak) + 800000*r(81,Mak) + 810000*r(82,Mak) + 820000*r(83,Mak) + 830000*r(84,Mak) + 840000*r(85,Mak) + 850000*r(86,Mak) + 860000*r(87,Mak) + 870000*r(88,Mak) + 880000*r(89,Mak) + 890000*r(90,Mak) + 900000*r(91,Mak)
     
      + 910000*r(92,Mak) + 920000*r(93,Mak) + 930000*r(94,Mak) + 940000*r(95,Mak) + 950000*r(96,Mak) + 960000*r(97,Mak) + 970000*r(98,Mak) + 980000*r(99,Mak) + 990000*r(100,Mak) + 1000000*r(101,Mak) + 1010000*r(102,Mak) + 1020000*r(103,Mak)
     
      + 1030000*r(104,Mak) + 1040000*r(105,Mak) + 1050000*r(106,Mak) + 1060000*r(107,Mak) =G= 0 ; (LHS = 0)
     
prod_starved(Kuk)..  - s(Kuk) + 10000*r(2,Kuk) + 20000*r(3,Kuk) + 30000*r(4,Kuk) + 40000*r(5,Kuk) + 50000*r(6,Kuk) + 60000*r(7,Kuk) + 70000*r(8,Kuk) + 80000*r(9,Kuk) + 90000*r(10,Kuk) + 100000*r(11,Kuk) + 110000*r(12,Kuk) + 120000*r(13,Kuk)
     
      + 130000*r(14,Kuk) + 140000*r(15,Kuk) + 150000*r(16,Kuk) + 160000*r(17,Kuk) + 170000*r(18,Kuk) + 180000*r(19,Kuk) + 190000*r(20,Kuk) + 200000*r(21,Kuk) + 210000*r(22,Kuk) + 220000*r(23,Kuk) + 230000*r(24,Kuk) + 240000*r(25,Kuk) + 250000*r(26,Kuk)
     
      + 260000*r(27,Kuk) + 270000*r(28,Kuk) + 280000*r(29,Kuk) + 290000*r(30,Kuk) + 300000*r(31,Kuk) + 310000*r(32,Kuk) + 320000*r(33,Kuk) + 330000*r(34,Kuk) + 340000*r(35,Kuk) + 350000*r(36,Kuk) + 360000*r(37,Kuk) + 370000*r(38,Kuk) + 380000*r(39,Kuk)
     
      + 390000*r(40,Kuk) + 400000*r(41,Kuk) + 410000*r(42,Kuk) + 420000*r(43,Kuk) + 430000*r(44,Kuk) + 440000*r(45,Kuk) + 450000*r(46,Kuk) + 460000*r(47,Kuk) + 470000*r(48,Kuk) + 480000*r(49,Kuk) + 490000*r(50,Kuk) + 500000*r(51,Kuk) + 510000*r(52,Kuk)
     
      + 520000*r(53,Kuk) + 530000*r(54,Kuk) + 540000*r(55,Kuk) + 550000*r(56,Kuk) + 560000*r(57,Kuk) + 570000*r(58,Kuk) + 580000*r(59,Kuk) + 590000*r(60,Kuk) + 600000*r(61,Kuk) + 610000*r(62,Kuk) + 620000*r(63,Kuk) + 630000*r(64,Kuk) + 640000*r(65,Kuk)
GAMS 24.8.1  r59919 Released Dec 22, 2016 DEX-DEG x86 64bit/Mac OS X                                                                                                                                                                  01/17/17 22:39:53 Page 14
G e n e r a l   A l g e b r a i c   M o d e l i n g   S y s t e m
Equation Listing    SOLVE final Using MIP From line 358


     prod_starved  =G=  ensure that production can not be starved     
     
      + 650000*r(66,Kuk) + 660000*r(67,Kuk) + 670000*r(68,Kuk) + 680000*r(69,Kuk) + 690000*r(70,Kuk) + 700000*r(71,Kuk) + 710000*r(72,Kuk) + 720000*r(73,Kuk) + 730000*r(74,Kuk) + 740000*r(75,Kuk) + 750000*r(76,Kuk) + 760000*r(77,Kuk) + 770000*r(78,Kuk)
     
      + 780000*r(79,Kuk) + 790000*r(80,Kuk) + 800000*r(81,Kuk) + 810000*r(82,Kuk) + 820000*r(83,Kuk) + 830000*r(84,Kuk) + 840000*r(85,Kuk) + 850000*r(86,Kuk) + 860000*r(87,Kuk) + 870000*r(88,Kuk) + 880000*r(89,Kuk) + 890000*r(90,Kuk) + 900000*r(91,Kuk)
     
      + 910000*r(92,Kuk) + 920000*r(93,Kuk) + 930000*r(94,Kuk) + 940000*r(95,Kuk) + 950000*r(96,Kuk) + 960000*r(97,Kuk) + 970000*r(98,Kuk) + 980000*r(99,Kuk) + 990000*r(100,Kuk) + 1000000*r(101,Kuk) + 1010000*r(102,Kuk) + 1020000*r(103,Kuk)
     
      + 1030000*r(104,Kuk) + 1040000*r(105,Kuk) + 1050000*r(106,Kuk) + 1060000*r(107,Kuk) =G= 0 ; (LHS = 0)
     
prod_starved(Kok)..  - s(Kok) + 10000*r(2,Kok) + 20000*r(3,Kok) + 30000*r(4,Kok) + 40000*r(5,Kok) + 50000*r(6,Kok) + 60000*r(7,Kok) + 70000*r(8,Kok) + 80000*r(9,Kok) + 90000*r(10,Kok) + 100000*r(11,Kok) + 110000*r(12,Kok) + 120000*r(13,Kok)
     
      + 130000*r(14,Kok) + 140000*r(15,Kok) + 150000*r(16,Kok) + 160000*r(17,Kok) + 170000*r(18,Kok) + 180000*r(19,Kok) + 190000*r(20,Kok) + 200000*r(21,Kok) + 210000*r(22,Kok) + 220000*r(23,Kok) + 230000*r(24,Kok) + 240000*r(25,Kok) + 250000*r(26,Kok)
     
      + 260000*r(27,Kok) + 270000*r(28,Kok) + 280000*r(29,Kok) + 290000*r(30,Kok) + 300000*r(31,Kok) + 310000*r(32,Kok) + 320000*r(33,Kok) + 330000*r(34,Kok) + 340000*r(35,Kok) + 350000*r(36,Kok) + 360000*r(37,Kok) + 370000*r(38,Kok) + 380000*r(39,Kok)
     
      + 390000*r(40,Kok) + 400000*r(41,Kok) + 410000*r(42,Kok) + 420000*r(43,Kok) + 430000*r(44,Kok) + 440000*r(45,Kok) + 450000*r(46,Kok) + 460000*r(47,Kok) + 470000*r(48,Kok) + 480000*r(49,Kok) + 490000*r(50,Kok) + 500000*r(51,Kok) + 510000*r(52,Kok)
     
      + 520000*r(53,Kok) + 530000*r(54,Kok) + 540000*r(55,Kok) + 550000*r(56,Kok) + 560000*r(57,Kok) + 570000*r(58,Kok) + 580000*r(59,Kok) + 590000*r(60,Kok) + 600000*r(61,Kok) + 610000*r(62,Kok) + 620000*r(63,Kok) + 630000*r(64,Kok) + 640000*r(65,Kok)
     
      + 650000*r(66,Kok) + 660000*r(67,Kok) + 670000*r(68,Kok) + 680000*r(69,Kok) + 690000*r(70,Kok) + 700000*r(71,Kok) + 710000*r(72,Kok) + 720000*r(73,Kok) + 730000*r(74,Kok) + 740000*r(75,Kok) + 750000*r(76,Kok) + 760000*r(77,Kok) + 770000*r(78,Kok)
     
      + 780000*r(79,Kok) + 790000*r(80,Kok) + 800000*r(81,Kok) + 810000*r(82,Kok) + 820000*r(83,Kok) + 830000*r(84,Kok) + 840000*r(85,Kok) + 850000*r(86,Kok) + 860000*r(87,Kok) + 870000*r(88,Kok) + 880000*r(89,Kok) + 890000*r(90,Kok) + 900000*r(91,Kok)
     
      + 910000*r(92,Kok) + 920000*r(93,Kok) + 930000*r(94,Kok) + 940000*r(95,Kok) + 950000*r(96,Kok) + 960000*r(97,Kok) + 970000*r(98,Kok) + 980000*r(99,Kok) + 990000*r(100,Kok) + 1000000*r(101,Kok) + 1010000*r(102,Kok) + 1020000*r(103,Kok)
     
      + 1030000*r(104,Kok) + 1040000*r(105,Kok) + 1050000*r(106,Kok) + 1060000*r(107,Kok) =G= 0 ; (LHS = 0)
     

---- Sold_Prod  =L=  we cant sell more than we produce

Sold_Prod(Mas)..  - y(Mas) + 10000*u(2,Mas,EU) + 10000*u(2,Mas,IE) + 10000*u(2,Mas,PA) + 10000*u(2,Mas,KI) + 20000*u(3,Mas,EU) + 20000*u(3,Mas,IE) + 20000*u(3,Mas,PA) + 20000*u(3,Mas,KI) + 30000*u(4,Mas,EU) + 30000*u(4,Mas,IE) + 30000*u(4,Mas,PA)
     
      + 30000*u(4,Mas,KI) + 40000*u(5,Mas,EU) + 40000*u(5,Mas,IE) + 40000*u(5,Mas,PA) + 40000*u(5,Mas,KI) + 50000*u(6,Mas,EU) + 50000*u(6,Mas,IE) + 50000*u(6,Mas,PA) + 50000*u(6,Mas,KI) + 60000*u(7,Mas,EU) + 60000*u(7,Mas,IE) + 60000*u(7,Mas,PA)
     
      + 60000*u(7,Mas,KI) + 70000*u(8,Mas,EU) + 70000*u(8,Mas,IE) + 70000*u(8,Mas,PA) + 70000*u(8,Mas,KI) + 80000*u(9,Mas,EU) + 80000*u(9,Mas,IE) + 80000*u(9,Mas,PA) + 80000*u(9,Mas,KI) + 90000*u(10,Mas,EU) + 90000*u(10,Mas,IE) + 90000*u(10,Mas,PA)
     
      + 90000*u(10,Mas,KI) + 100000*u(11,Mas,EU) + 100000*u(11,Mas,IE) + 100000*u(11,Mas,PA) + 100000*u(11,Mas,KI) + 110000*u(12,Mas,EU) + 110000*u(12,Mas,IE) + 110000*u(12,Mas,PA) + 110000*u(12,Mas,KI) + 120000*u(13,Mas,EU) + 120000*u(13,Mas,IE)
     
      + 120000*u(13,Mas,PA) + 120000*u(13,Mas,KI) + 130000*u(14,Mas,EU) + 130000*u(14,Mas,IE) + 130000*u(14,Mas,PA) + 130000*u(14,Mas,KI) + 140000*u(15,Mas,EU) + 140000*u(15,Mas,IE) + 140000*u(15,Mas,PA) + 140000*u(15,Mas,KI) + 150000*u(16,Mas,EU)
     
      + 150000*u(16,Mas,IE) + 150000*u(16,Mas,PA) + 150000*u(16,Mas,KI) + 160000*u(17,Mas,EU) + 160000*u(17,Mas,IE) + 160000*u(17,Mas,PA) + 160000*u(17,Mas,KI) + 170000*u(18,Mas,EU) + 170000*u(18,Mas,IE) + 170000*u(18,Mas,PA) + 170000*u(18,Mas,KI)
     
      + 180000*u(19,Mas,EU) + 180000*u(19,Mas,IE) + 180000*u(19,Mas,PA) + 180000*u(19,Mas,KI) + 190000*u(20,Mas,EU) + 190000*u(20,Mas,IE) + 190000*u(20,Mas,PA) + 190000*u(20,Mas,KI) + 200000*u(21,Mas,EU) + 200000*u(21,Mas,IE) + 200000*u(21,Mas,PA)
     
      + 200000*u(21,Mas,KI) + 210000*u(22,Mas,EU) + 210000*u(22,Mas,IE) + 210000*u(22,Mas,PA) + 210000*u(22,Mas,KI) + 220000*u(23,Mas,EU) + 220000*u(23,Mas,IE) + 220000*u(23,Mas,PA) + 220000*u(23,Mas,KI) =L= 0 ; (LHS = 0)
     
Sold_Prod(Kus)..  - y(Kus) =L= 0 ; (LHS = 0)
     
Sold_Prod(Kos)..  - y(Kos) + 10000*u(2,Kos,EU) + 10000*u(2,Kos,IE) + 10000*u(2,Kos,PA) + 10000*u(2,Kos,KI) + 20000*u(3,Kos,EU) + 20000*u(3,Kos,IE) + 20000*u(3,Kos,PA) + 20000*u(3,Kos,KI) + 30000*u(4,Kos,EU) + 30000*u(4,Kos,IE) + 30000*u(4,Kos,PA)
     
      + 30000*u(4,Kos,KI) + 40000*u(5,Kos,EU) + 40000*u(5,Kos,IE) + 40000*u(5,Kos,PA) + 40000*u(5,Kos,KI) + 50000*u(6,Kos,EU) + 50000*u(6,Kos,IE) + 50000*u(6,Kos,PA) + 50000*u(6,Kos,KI) + 60000*u(7,Kos,EU) + 60000*u(7,Kos,IE) + 60000*u(7,Kos,PA)
     
GAMS 24.8.1  r59919 Released Dec 22, 2016 DEX-DEG x86 64bit/Mac OS X                                                                                                                                                                  01/17/17 22:39:53 Page 15
G e n e r a l   A l g e b r a i c   M o d e l i n g   S y s t e m
Equation Listing    SOLVE final Using MIP From line 358


     Sold_Prod  =L=  we cant sell more than we produce     
     
      + 60000*u(7,Kos,KI) + 70000*u(8,Kos,EU) + 70000*u(8,Kos,IE) + 70000*u(8,Kos,PA) + 70000*u(8,Kos,KI) + 80000*u(9,Kos,EU) + 80000*u(9,Kos,IE) + 80000*u(9,Kos,PA) + 80000*u(9,Kos,KI) + 90000*u(10,Kos,EU) + 90000*u(10,Kos,IE) + 90000*u(10,Kos,PA)
     
      + 90000*u(10,Kos,KI) + 100000*u(11,Kos,EU) + 100000*u(11,Kos,IE) + 100000*u(11,Kos,PA) + 100000*u(11,Kos,KI) + 110000*u(12,Kos,EU) + 110000*u(12,Kos,IE) + 110000*u(12,Kos,PA) + 110000*u(12,Kos,KI) + 120000*u(13,Kos,EU) + 120000*u(13,Kos,IE)
     
      + 120000*u(13,Kos,PA) + 120000*u(13,Kos,KI) + 130000*u(14,Kos,EU) + 130000*u(14,Kos,IE) + 130000*u(14,Kos,PA) + 130000*u(14,Kos,KI) + 140000*u(15,Kos,EU) + 140000*u(15,Kos,IE) + 140000*u(15,Kos,PA) + 140000*u(15,Kos,KI) + 150000*u(16,Kos,EU)
     
      + 150000*u(16,Kos,IE) + 150000*u(16,Kos,PA) + 150000*u(16,Kos,KI) + 160000*u(17,Kos,EU) + 160000*u(17,Kos,IE) + 160000*u(17,Kos,PA) + 160000*u(17,Kos,KI) + 170000*u(18,Kos,EU) + 170000*u(18,Kos,IE) + 170000*u(18,Kos,PA) + 170000*u(18,Kos,KI)
     
      + 180000*u(19,Kos,EU) + 180000*u(19,Kos,IE) + 180000*u(19,Kos,PA) + 180000*u(19,Kos,KI) + 190000*u(20,Kos,EU) + 190000*u(20,Kos,IE) + 190000*u(20,Kos,PA) + 190000*u(20,Kos,KI) + 200000*u(21,Kos,EU) + 200000*u(21,Kos,IE) + 200000*u(21,Kos,PA)
     
      + 200000*u(21,Kos,KI) + 210000*u(22,Kos,EU) + 210000*u(22,Kos,IE) + 210000*u(22,Kos,PA) + 210000*u(22,Kos,KI) + 220000*u(23,Kos,EU) + 220000*u(23,Kos,IE) + 220000*u(23,Kos,PA) + 220000*u(23,Kos,KI) =L= 0 ; (LHS = 0)
     
Sold_Prod(Kuv)..  - y(Kuv) + 10000*u(2,Kuv,EU) + 10000*u(2,Kuv,IE) + 10000*u(2,Kuv,PA) + 10000*u(2,Kuv,KI) + 20000*u(3,Kuv,EU) + 20000*u(3,Kuv,IE) + 20000*u(3,Kuv,PA) + 20000*u(3,Kuv,KI) + 30000*u(4,Kuv,EU) + 30000*u(4,Kuv,IE) + 30000*u(4,Kuv,PA)
     
      + 30000*u(4,Kuv,KI) + 40000*u(5,Kuv,EU) + 40000*u(5,Kuv,IE) + 40000*u(5,Kuv,PA) + 40000*u(5,Kuv,KI) + 50000*u(6,Kuv,EU) + 50000*u(6,Kuv,IE) + 50000*u(6,Kuv,PA) + 50000*u(6,Kuv,KI) + 60000*u(7,Kuv,EU) + 60000*u(7,Kuv,IE) + 60000*u(7,Kuv,PA)
     
      + 60000*u(7,Kuv,KI) + 70000*u(8,Kuv,EU) + 70000*u(8,Kuv,IE) + 70000*u(8,Kuv,PA) + 70000*u(8,Kuv,KI) + 80000*u(9,Kuv,EU) + 80000*u(9,Kuv,IE) + 80000*u(9,Kuv,PA) + 80000*u(9,Kuv,KI) + 90000*u(10,Kuv,EU) + 90000*u(10,Kuv,IE) + 90000*u(10,Kuv,PA)
     
      + 90000*u(10,Kuv,KI) + 100000*u(11,Kuv,EU) + 100000*u(11,Kuv,IE) + 100000*u(11,Kuv,PA) + 100000*u(11,Kuv,KI) + 110000*u(12,Kuv,EU) + 110000*u(12,Kuv,IE) + 110000*u(12,Kuv,PA) + 110000*u(12,Kuv,KI) + 120000*u(13,Kuv,EU) + 120000*u(13,Kuv,IE)
     
      + 120000*u(13,Kuv,PA) + 120000*u(13,Kuv,KI) + 130000*u(14,Kuv,EU) + 130000*u(14,Kuv,IE) + 130000*u(14,Kuv,PA) + 130000*u(14,Kuv,KI) + 140000*u(15,Kuv,EU) + 140000*u(15,Kuv,IE) + 140000*u(15,Kuv,PA) + 140000*u(15,Kuv,KI) + 150000*u(16,Kuv,EU)
     
      + 150000*u(16,Kuv,IE) + 150000*u(16,Kuv,PA) + 150000*u(16,Kuv,KI) + 160000*u(17,Kuv,EU) + 160000*u(17,Kuv,IE) + 160000*u(17,Kuv,PA) + 160000*u(17,Kuv,KI) + 170000*u(18,Kuv,EU) + 170000*u(18,Kuv,IE) + 170000*u(18,Kuv,PA) + 170000*u(18,Kuv,KI)
     
      + 180000*u(19,Kuv,EU) + 180000*u(19,Kuv,IE) + 180000*u(19,Kuv,PA) + 180000*u(19,Kuv,KI) + 190000*u(20,Kuv,EU) + 190000*u(20,Kuv,IE) + 190000*u(20,Kuv,PA) + 190000*u(20,Kuv,KI) + 200000*u(21,Kuv,EU) + 200000*u(21,Kuv,IE) + 200000*u(21,Kuv,PA)
     
      + 200000*u(21,Kuv,KI) + 210000*u(22,Kuv,EU) + 210000*u(22,Kuv,IE) + 210000*u(22,Kuv,PA) + 210000*u(22,Kuv,KI) + 220000*u(23,Kuv,EU) + 220000*u(23,Kuv,IE) + 220000*u(23,Kuv,PA) + 220000*u(23,Kuv,KI) =L= 0 ; (LHS = 0)
     
Sold_Prod(Kov)..  - y(Kov) + 10000*u(2,Kov,EU) + 10000*u(2,Kov,IE) + 10000*u(2,Kov,PA) + 10000*u(2,Kov,KI) + 20000*u(3,Kov,EU) + 20000*u(3,Kov,IE) + 20000*u(3,Kov,PA) + 20000*u(3,Kov,KI) + 30000*u(4,Kov,EU) + 30000*u(4,Kov,IE) + 30000*u(4,Kov,PA)
     
      + 30000*u(4,Kov,KI) + 40000*u(5,Kov,EU) + 40000*u(5,Kov,IE) + 40000*u(5,Kov,PA) + 40000*u(5,Kov,KI) + 50000*u(6,Kov,EU) + 50000*u(6,Kov,IE) + 50000*u(6,Kov,PA) + 50000*u(6,Kov,KI) + 60000*u(7,Kov,EU) + 60000*u(7,Kov,IE) + 60000*u(7,Kov,PA)
     
      + 60000*u(7,Kov,KI) + 70000*u(8,Kov,EU) + 70000*u(8,Kov,IE) + 70000*u(8,Kov,PA) + 70000*u(8,Kov,KI) + 80000*u(9,Kov,EU) + 80000*u(9,Kov,IE) + 80000*u(9,Kov,PA) + 80000*u(9,Kov,KI) + 90000*u(10,Kov,EU) + 90000*u(10,Kov,IE) + 90000*u(10,Kov,PA)
     
      + 90000*u(10,Kov,KI) + 100000*u(11,Kov,EU) + 100000*u(11,Kov,IE) + 100000*u(11,Kov,PA) + 100000*u(11,Kov,KI) + 110000*u(12,Kov,EU) + 110000*u(12,Kov,IE) + 110000*u(12,Kov,PA) + 110000*u(12,Kov,KI) + 120000*u(13,Kov,EU) + 120000*u(13,Kov,IE)
     
      + 120000*u(13,Kov,PA) + 120000*u(13,Kov,KI) + 130000*u(14,Kov,EU) + 130000*u(14,Kov,IE) + 130000*u(14,Kov,PA) + 130000*u(14,Kov,KI) + 140000*u(15,Kov,EU) + 140000*u(15,Kov,IE) + 140000*u(15,Kov,PA) + 140000*u(15,Kov,KI) + 150000*u(16,Kov,EU)
     
      + 150000*u(16,Kov,IE) + 150000*u(16,Kov,PA) + 150000*u(16,Kov,KI) + 160000*u(17,Kov,EU) + 160000*u(17,Kov,IE) + 160000*u(17,Kov,PA) + 160000*u(17,Kov,KI) + 170000*u(18,Kov,EU) + 170000*u(18,Kov,IE) + 170000*u(18,Kov,PA) + 170000*u(18,Kov,KI)
     
      + 180000*u(19,Kov,EU) + 180000*u(19,Kov,IE) + 180000*u(19,Kov,PA) + 180000*u(19,Kov,KI) + 190000*u(20,Kov,EU) + 190000*u(20,Kov,IE) + 190000*u(20,Kov,PA) + 190000*u(20,Kov,KI) + 200000*u(21,Kov,EU) + 200000*u(21,Kov,IE) + 200000*u(21,Kov,PA)
     
      + 200000*u(21,Kov,KI) + 210000*u(22,Kov,EU) + 210000*u(22,Kov,IE) + 210000*u(22,Kov,PA) + 210000*u(22,Kov,KI) + 220000*u(23,Kov,EU) + 220000*u(23,Kov,IE) + 220000*u(23,Kov,PA) + 220000*u(23,Kov,KI) =L= 0 ; (LHS = 0)
     
Sold_Prod(Hsel)..  - y(Hsel) + 10000*u(2,Hsel,EU) + 10000*u(2,Hsel,IE) + 10000*u(2,Hsel,PA) + 10000*u(2,Hsel,KI) + 20000*u(3,Hsel,EU) + 20000*u(3,Hsel,IE) + 20000*u(3,Hsel,PA) + 20000*u(3,Hsel,KI) + 30000*u(4,Hsel,EU) + 30000*u(4,Hsel,IE)
     
      + 30000*u(4,Hsel,PA) + 30000*u(4,Hsel,KI) + 40000*u(5,Hsel,EU) + 40000*u(5,Hsel,IE) + 40000*u(5,Hsel,PA) + 40000*u(5,Hsel,KI) + 50000*u(6,Hsel,EU) + 50000*u(6,Hsel,IE) + 50000*u(6,Hsel,PA) + 50000*u(6,Hsel,KI) + 60000*u(7,Hsel,EU)
     
      + 60000*u(7,Hsel,IE) + 60000*u(7,Hsel,PA) + 60000*u(7,Hsel,KI) + 70000*u(8,Hsel,EU) + 70000*u(8,Hsel,IE) + 70000*u(8,Hsel,PA) + 70000*u(8,Hsel,KI) + 80000*u(9,Hsel,EU) + 80000*u(9,Hsel,IE) + 80000*u(9,Hsel,PA) + 80000*u(9,Hsel,KI)
     
      + 90000*u(10,Hsel,EU) + 90000*u(10,Hsel,IE) + 90000*u(10,Hsel,PA) + 90000*u(10,Hsel,KI) + 100000*u(11,Hsel,EU) + 100000*u(11,Hsel,IE) + 100000*u(11,Hsel,PA) + 100000*u(11,Hsel,KI) + 110000*u(12,Hsel,EU) + 110000*u(12,Hsel,IE) + 110000*u(12,Hsel,PA)
GAMS 24.8.1  r59919 Released Dec 22, 2016 DEX-DEG x86 64bit/Mac OS X                                                                                                                                                                  01/17/17 22:39:53 Page 16
G e n e r a l   A l g e b r a i c   M o d e l i n g   S y s t e m
Equation Listing    SOLVE final Using MIP From line 358


     Sold_Prod  =L=  we cant sell more than we produce     
     
      + 110000*u(12,Hsel,KI) + 120000*u(13,Hsel,EU) + 120000*u(13,Hsel,IE) + 120000*u(13,Hsel,PA) + 120000*u(13,Hsel,KI) + 130000*u(14,Hsel,EU) + 130000*u(14,Hsel,IE) + 130000*u(14,Hsel,PA) + 130000*u(14,Hsel,KI) + 140000*u(15,Hsel,EU)
     
      + 140000*u(15,Hsel,IE) + 140000*u(15,Hsel,PA) + 140000*u(15,Hsel,KI) + 150000*u(16,Hsel,EU) + 150000*u(16,Hsel,IE) + 150000*u(16,Hsel,PA) + 150000*u(16,Hsel,KI) + 160000*u(17,Hsel,EU) + 160000*u(17,Hsel,IE) + 160000*u(17,Hsel,PA)
     
      + 160000*u(17,Hsel,KI) + 170000*u(18,Hsel,EU) + 170000*u(18,Hsel,IE) + 170000*u(18,Hsel,PA) + 170000*u(18,Hsel,KI) + 180000*u(19,Hsel,EU) + 180000*u(19,Hsel,IE) + 180000*u(19,Hsel,PA) + 180000*u(19,Hsel,KI) + 190000*u(20,Hsel,EU)
     
      + 190000*u(20,Hsel,IE) + 190000*u(20,Hsel,PA) + 190000*u(20,Hsel,KI) + 200000*u(21,Hsel,EU) + 200000*u(21,Hsel,IE) + 200000*u(21,Hsel,PA) + 200000*u(21,Hsel,KI) + 210000*u(22,Hsel,EU) + 210000*u(22,Hsel,IE) + 210000*u(22,Hsel,PA)
     
      + 210000*u(22,Hsel,KI) + 220000*u(23,Hsel,EU) + 220000*u(23,Hsel,IE) + 220000*u(23,Hsel,PA) + 220000*u(23,Hsel,KI) =L= 0 ; (LHS = 0)
     
Sold_Prod(Lsel)..  - y(Lsel) + 10000*u(2,Lsel,EU) + 10000*u(2,Lsel,IE) + 10000*u(2,Lsel,PA) + 10000*u(2,Lsel,KI) + 20000*u(3,Lsel,EU) + 20000*u(3,Lsel,IE) + 20000*u(3,Lsel,PA) + 20000*u(3,Lsel,KI) + 30000*u(4,Lsel,EU) + 30000*u(4,Lsel,IE)
     
      + 30000*u(4,Lsel,PA) + 30000*u(4,Lsel,KI) + 40000*u(5,Lsel,EU) + 40000*u(5,Lsel,IE) + 40000*u(5,Lsel,PA) + 40000*u(5,Lsel,KI) + 50000*u(6,Lsel,EU) + 50000*u(6,Lsel,IE) + 50000*u(6,Lsel,PA) + 50000*u(6,Lsel,KI) + 60000*u(7,Lsel,EU)
     
      + 60000*u(7,Lsel,IE) + 60000*u(7,Lsel,PA) + 60000*u(7,Lsel,KI) + 70000*u(8,Lsel,EU) + 70000*u(8,Lsel,IE) + 70000*u(8,Lsel,PA) + 70000*u(8,Lsel,KI) + 80000*u(9,Lsel,EU) + 80000*u(9,Lsel,IE) + 80000*u(9,Lsel,PA) + 80000*u(9,Lsel,KI)
     
      + 90000*u(10,Lsel,EU) + 90000*u(10,Lsel,IE) + 90000*u(10,Lsel,PA) + 90000*u(10,Lsel,KI) + 100000*u(11,Lsel,EU) + 100000*u(11,Lsel,IE) + 100000*u(11,Lsel,PA) + 100000*u(11,Lsel,KI) + 110000*u(12,Lsel,EU) + 110000*u(12,Lsel,IE) + 110000*u(12,Lsel,PA)
     
      + 110000*u(12,Lsel,KI) + 120000*u(13,Lsel,EU) + 120000*u(13,Lsel,IE) + 120000*u(13,Lsel,PA) + 120000*u(13,Lsel,KI) + 130000*u(14,Lsel,EU) + 130000*u(14,Lsel,IE) + 130000*u(14,Lsel,PA) + 130000*u(14,Lsel,KI) + 140000*u(15,Lsel,EU)
     
      + 140000*u(15,Lsel,IE) + 140000*u(15,Lsel,PA) + 140000*u(15,Lsel,KI) + 150000*u(16,Lsel,EU) + 150000*u(16,Lsel,IE) + 150000*u(16,Lsel,PA) + 150000*u(16,Lsel,KI) + 160000*u(17,Lsel,EU) + 160000*u(17,Lsel,IE) + 160000*u(17,Lsel,PA)
     
      + 160000*u(17,Lsel,KI) + 170000*u(18,Lsel,EU) + 170000*u(18,Lsel,IE) + 170000*u(18,Lsel,PA) + 170000*u(18,Lsel,KI) + 180000*u(19,Lsel,EU) + 180000*u(19,Lsel,IE) + 180000*u(19,Lsel,PA) + 180000*u(19,Lsel,KI) + 190000*u(20,Lsel,EU)
     
      + 190000*u(20,Lsel,IE) + 190000*u(20,Lsel,PA) + 190000*u(20,Lsel,KI) + 200000*u(21,Lsel,EU) + 200000*u(21,Lsel,IE) + 200000*u(21,Lsel,PA) + 200000*u(21,Lsel,KI) + 210000*u(22,Lsel,EU) + 210000*u(22,Lsel,IE) + 210000*u(22,Lsel,PA)
     
      + 210000*u(22,Lsel,KI) + 220000*u(23,Lsel,EU) + 220000*u(23,Lsel,IE) + 220000*u(23,Lsel,PA) + 220000*u(23,Lsel,KI) =L= 0 ; (LHS = 0)
     
Sold_Prod(Pap)..  - y(Pap) + 10000*u(2,Pap,EU) + 10000*u(2,Pap,IE) + 10000*u(2,Pap,PA) + 10000*u(2,Pap,KI) + 20000*u(3,Pap,EU) + 20000*u(3,Pap,IE) + 20000*u(3,Pap,PA) + 20000*u(3,Pap,KI) + 30000*u(4,Pap,EU) + 30000*u(4,Pap,IE) + 30000*u(4,Pap,PA)
     
      + 30000*u(4,Pap,KI) + 40000*u(5,Pap,EU) + 40000*u(5,Pap,IE) + 40000*u(5,Pap,PA) + 40000*u(5,Pap,KI) + 50000*u(6,Pap,EU) + 50000*u(6,Pap,IE) + 50000*u(6,Pap,PA) + 50000*u(6,Pap,KI) + 60000*u(7,Pap,EU) + 60000*u(7,Pap,IE) + 60000*u(7,Pap,PA)
     
      + 60000*u(7,Pap,KI) + 70000*u(8,Pap,EU) + 70000*u(8,Pap,IE) + 70000*u(8,Pap,PA) + 70000*u(8,Pap,KI) + 80000*u(9,Pap,EU) + 80000*u(9,Pap,IE) + 80000*u(9,Pap,PA) + 80000*u(9,Pap,KI) + 90000*u(10,Pap,EU) + 90000*u(10,Pap,IE) + 90000*u(10,Pap,PA)
     
      + 90000*u(10,Pap,KI) + 100000*u(11,Pap,EU) + 100000*u(11,Pap,IE) + 100000*u(11,Pap,PA) + 100000*u(11,Pap,KI) + 110000*u(12,Pap,EU) + 110000*u(12,Pap,IE) + 110000*u(12,Pap,PA) + 110000*u(12,Pap,KI) + 120000*u(13,Pap,EU) + 120000*u(13,Pap,IE)
     
      + 120000*u(13,Pap,PA) + 120000*u(13,Pap,KI) + 130000*u(14,Pap,EU) + 130000*u(14,Pap,IE) + 130000*u(14,Pap,PA) + 130000*u(14,Pap,KI) + 140000*u(15,Pap,EU) + 140000*u(15,Pap,IE) + 140000*u(15,Pap,PA) + 140000*u(15,Pap,KI) + 150000*u(16,Pap,EU)
     
      + 150000*u(16,Pap,IE) + 150000*u(16,Pap,PA) + 150000*u(16,Pap,KI) + 160000*u(17,Pap,EU) + 160000*u(17,Pap,IE) + 160000*u(17,Pap,PA) + 160000*u(17,Pap,KI) + 170000*u(18,Pap,EU) + 170000*u(18,Pap,IE) + 170000*u(18,Pap,PA) + 170000*u(18,Pap,KI)
     
      + 180000*u(19,Pap,EU) + 180000*u(19,Pap,IE) + 180000*u(19,Pap,PA) + 180000*u(19,Pap,KI) + 190000*u(20,Pap,EU) + 190000*u(20,Pap,IE) + 190000*u(20,Pap,PA) + 190000*u(20,Pap,KI) + 200000*u(21,Pap,EU) + 200000*u(21,Pap,IE) + 200000*u(21,Pap,PA)
     
      + 200000*u(21,Pap,KI) + 210000*u(22,Pap,EU) + 210000*u(22,Pap,IE) + 210000*u(22,Pap,PA) + 210000*u(22,Pap,KI) + 220000*u(23,Pap,EU) + 220000*u(23,Pap,IE) + 220000*u(23,Pap,PA) + 220000*u(23,Pap,KI) =L= 0 ; (LHS = 0)
     

---- timber_bought  =E=  amount of timber i bought

timber_bought(Mat)..  - 10000*r(2,Mat) - 20000*r(3,Mat) - 30000*r(4,Mat) - 40000*r(5,Mat) - 50000*r(6,Mat) - 60000*r(7,Mat) - 70000*r(8,Mat) - 80000*r(9,Mat) - 90000*r(10,Mat) - 100000*r(11,Mat) - 110000*r(12,Mat) - 120000*r(13,Mat) - 130000*r(14,Mat)
     
      - 140000*r(15,Mat) - 150000*r(16,Mat) - 160000*r(17,Mat) - 170000*r(18,Mat) - 180000*r(19,Mat) - 190000*r(20,Mat) - 200000*r(21,Mat) - 210000*r(22,Mat) - 220000*r(23,Mat) - 230000*r(24,Mat) - 240000*r(25,Mat) - 250000*r(26,Mat) - 260000*r(27,Mat)
     
GAMS 24.8.1  r59919 Released Dec 22, 2016 DEX-DEG x86 64bit/Mac OS X                                                                                                                                                                  01/17/17 22:39:53 Page 17
G e n e r a l   A l g e b r a i c   M o d e l i n g   S y s t e m
Equation Listing    SOLVE final Using MIP From line 358


     timber_bought  =E=  amount of timber i bought     
     
      - 270000*r(28,Mat) - 280000*r(29,Mat) - 290000*r(30,Mat) - 300000*r(31,Mat) - 310000*r(32,Mat) - 320000*r(33,Mat) - 330000*r(34,Mat) - 340000*r(35,Mat) - 350000*r(36,Mat) - 360000*r(37,Mat) - 370000*r(38,Mat) - 380000*r(39,Mat) - 390000*r(40,Mat)
     
      - 400000*r(41,Mat) - 410000*r(42,Mat) - 420000*r(43,Mat) - 430000*r(44,Mat) - 440000*r(45,Mat) - 450000*r(46,Mat) - 460000*r(47,Mat) - 470000*r(48,Mat) - 480000*r(49,Mat) - 490000*r(50,Mat) - 500000*r(51,Mat) - 510000*r(52,Mat) - 520000*r(53,Mat)
     
      - 530000*r(54,Mat) - 540000*r(55,Mat) - 550000*r(56,Mat) - 560000*r(57,Mat) - 570000*r(58,Mat) - 580000*r(59,Mat) - 590000*r(60,Mat) - 600000*r(61,Mat) - 610000*r(62,Mat) - 620000*r(63,Mat) - 630000*r(64,Mat) - 640000*r(65,Mat) - 650000*r(66,Mat)
     
      - 660000*r(67,Mat) - 670000*r(68,Mat) - 680000*r(69,Mat) - 690000*r(70,Mat) - 700000*r(71,Mat) - 710000*r(72,Mat) - 720000*r(73,Mat) - 730000*r(74,Mat) - 740000*r(75,Mat) - 750000*r(76,Mat) - 760000*r(77,Mat) - 770000*r(78,Mat) - 780000*r(79,Mat)
     
      - 790000*r(80,Mat) - 800000*r(81,Mat) - 810000*r(82,Mat) - 820000*r(83,Mat) - 830000*r(84,Mat) - 840000*r(85,Mat) - 850000*r(86,Mat) - 860000*r(87,Mat) - 870000*r(88,Mat) - 880000*r(89,Mat) - 890000*r(90,Mat) - 900000*r(91,Mat) - 910000*r(92,Mat)
     
      - 920000*r(93,Mat) - 930000*r(94,Mat) - 940000*r(95,Mat) - 950000*r(96,Mat) - 960000*r(97,Mat) - 970000*r(98,Mat) - 980000*r(99,Mat) - 990000*r(100,Mat) - 1000000*r(101,Mat) - 1010000*r(102,Mat) - 1020000*r(103,Mat) - 1030000*r(104,Mat)
     
      - 1040000*r(105,Mat) - 1050000*r(106,Mat) - 1060000*r(107,Mat) + b(Mat) =E= 0 ; (LHS = 0)
     
timber_bought(Kut)..  - 10000*r(2,Kut) - 20000*r(3,Kut) - 30000*r(4,Kut) - 40000*r(5,Kut) - 50000*r(6,Kut) - 60000*r(7,Kut) - 70000*r(8,Kut) - 80000*r(9,Kut) - 90000*r(10,Kut) - 100000*r(11,Kut) - 110000*r(12,Kut) - 120000*r(13,Kut) - 130000*r(14,Kut)
     
      - 140000*r(15,Kut) - 150000*r(16,Kut) - 160000*r(17,Kut) - 170000*r(18,Kut) - 180000*r(19,Kut) - 190000*r(20,Kut) - 200000*r(21,Kut) - 210000*r(22,Kut) - 220000*r(23,Kut) - 230000*r(24,Kut) - 240000*r(25,Kut) - 250000*r(26,Kut) - 260000*r(27,Kut)
     
      - 270000*r(28,Kut) - 280000*r(29,Kut) - 290000*r(30,Kut) - 300000*r(31,Kut) - 310000*r(32,Kut) - 320000*r(33,Kut) - 330000*r(34,Kut) - 340000*r(35,Kut) - 350000*r(36,Kut) - 360000*r(37,Kut) - 370000*r(38,Kut) - 380000*r(39,Kut) - 390000*r(40,Kut)
     
      - 400000*r(41,Kut) - 410000*r(42,Kut) - 420000*r(43,Kut) - 430000*r(44,Kut) - 440000*r(45,Kut) - 450000*r(46,Kut) - 460000*r(47,Kut) - 470000*r(48,Kut) - 480000*r(49,Kut) - 490000*r(50,Kut) - 500000*r(51,Kut) - 510000*r(52,Kut) - 520000*r(53,Kut)
     
      - 530000*r(54,Kut) - 540000*r(55,Kut) - 550000*r(56,Kut) - 560000*r(57,Kut) - 570000*r(58,Kut) - 580000*r(59,Kut) - 590000*r(60,Kut) - 600000*r(61,Kut) - 610000*r(62,Kut) - 620000*r(63,Kut) - 630000*r(64,Kut) - 640000*r(65,Kut) - 650000*r(66,Kut)
     
      - 660000*r(67,Kut) - 670000*r(68,Kut) - 680000*r(69,Kut) - 690000*r(70,Kut) - 700000*r(71,Kut) - 710000*r(72,Kut) - 720000*r(73,Kut) - 730000*r(74,Kut) - 740000*r(75,Kut) - 750000*r(76,Kut) - 760000*r(77,Kut) - 770000*r(78,Kut) - 780000*r(79,Kut)
     
      - 790000*r(80,Kut) - 800000*r(81,Kut) - 810000*r(82,Kut) - 820000*r(83,Kut) - 830000*r(84,Kut) - 840000*r(85,Kut) - 850000*r(86,Kut) - 860000*r(87,Kut) - 870000*r(88,Kut) - 880000*r(89,Kut) - 890000*r(90,Kut) - 900000*r(91,Kut) - 910000*r(92,Kut)
     
      - 920000*r(93,Kut) - 930000*r(94,Kut) - 940000*r(95,Kut) - 950000*r(96,Kut) - 960000*r(97,Kut) - 970000*r(98,Kut) - 980000*r(99,Kut) - 990000*r(100,Kut) - 1000000*r(101,Kut) - 1010000*r(102,Kut) - 1020000*r(103,Kut) - 1030000*r(104,Kut)
     
      - 1040000*r(105,Kut) - 1050000*r(106,Kut) - 1060000*r(107,Kut) + b(Kut) =E= 0 ; (LHS = 0)
     
timber_bought(Kot)..  - 10000*r(2,Kot) - 20000*r(3,Kot) - 30000*r(4,Kot) - 40000*r(5,Kot) - 50000*r(6,Kot) - 60000*r(7,Kot) - 70000*r(8,Kot) - 80000*r(9,Kot) - 90000*r(10,Kot) - 100000*r(11,Kot) - 110000*r(12,Kot) - 120000*r(13,Kot) - 130000*r(14,Kot)
     
      - 140000*r(15,Kot) - 150000*r(16,Kot) - 160000*r(17,Kot) - 170000*r(18,Kot) - 180000*r(19,Kot) - 190000*r(20,Kot) - 200000*r(21,Kot) - 210000*r(22,Kot) - 220000*r(23,Kot) - 230000*r(24,Kot) - 240000*r(25,Kot) - 250000*r(26,Kot) - 260000*r(27,Kot)
     
      - 270000*r(28,Kot) - 280000*r(29,Kot) - 290000*r(30,Kot) - 300000*r(31,Kot) - 310000*r(32,Kot) - 320000*r(33,Kot) - 330000*r(34,Kot) - 340000*r(35,Kot) - 350000*r(36,Kot) - 360000*r(37,Kot) - 370000*r(38,Kot) - 380000*r(39,Kot) - 390000*r(40,Kot)
     
      - 400000*r(41,Kot) - 410000*r(42,Kot) - 420000*r(43,Kot) - 430000*r(44,Kot) - 440000*r(45,Kot) - 450000*r(46,Kot) - 460000*r(47,Kot) - 470000*r(48,Kot) - 480000*r(49,Kot) - 490000*r(50,Kot) - 500000*r(51,Kot) - 510000*r(52,Kot) - 520000*r(53,Kot)
     
      - 530000*r(54,Kot) - 540000*r(55,Kot) - 550000*r(56,Kot) - 560000*r(57,Kot) - 570000*r(58,Kot) - 580000*r(59,Kot) - 590000*r(60,Kot) - 600000*r(61,Kot) - 610000*r(62,Kot) - 620000*r(63,Kot) - 630000*r(64,Kot) - 640000*r(65,Kot) - 650000*r(66,Kot)
     
      - 660000*r(67,Kot) - 670000*r(68,Kot) - 680000*r(69,Kot) - 690000*r(70,Kot) - 700000*r(71,Kot) - 710000*r(72,Kot) - 720000*r(73,Kot) - 730000*r(74,Kot) - 740000*r(75,Kot) - 750000*r(76,Kot) - 760000*r(77,Kot) - 770000*r(78,Kot) - 780000*r(79,Kot)
     
      - 790000*r(80,Kot) - 800000*r(81,Kot) - 810000*r(82,Kot) - 820000*r(83,Kot) - 830000*r(84,Kot) - 840000*r(85,Kot) - 850000*r(86,Kot) - 860000*r(87,Kot) - 870000*r(88,Kot) - 880000*r(89,Kot) - 890000*r(90,Kot) - 900000*r(91,Kot) - 910000*r(92,Kot)
     
      - 920000*r(93,Kot) - 930000*r(94,Kot) - 940000*r(95,Kot) - 950000*r(96,Kot) - 960000*r(97,Kot) - 970000*r(98,Kot) - 980000*r(99,Kot) - 990000*r(100,Kot) - 1000000*r(101,Kot) - 1010000*r(102,Kot) - 1020000*r(103,Kot) - 1030000*r(104,Kot)
     
      - 1040000*r(105,Kot) - 1050000*r(106,Kot) - 1060000*r(107,Kot) + b(Kot) =E= 0 ; (LHS = 0)
     
GAMS 24.8.1  r59919 Released Dec 22, 2016 DEX-DEG x86 64bit/Mac OS X                                                                                                                                                                  01/17/17 22:39:53 Page 18
G e n e r a l   A l g e b r a i c   M o d e l i n g   S y s t e m
Equation Listing    SOLVE final Using MIP From line 358


     timber_bought  =E=  amount of timber i bought

timber_bought(Mak)..  - 10000*r(2,Mak) - 20000*r(3,Mak) - 30000*r(4,Mak) - 40000*r(5,Mak) - 50000*r(6,Mak) - 60000*r(7,Mak) - 70000*r(8,Mak) - 80000*r(9,Mak) - 90000*r(10,Mak) - 100000*r(11,Mak) - 110000*r(12,Mak) - 120000*r(13,Mak) - 130000*r(14,Mak)
     
      - 140000*r(15,Mak) - 150000*r(16,Mak) - 160000*r(17,Mak) - 170000*r(18,Mak) - 180000*r(19,Mak) - 190000*r(20,Mak) - 200000*r(21,Mak) - 210000*r(22,Mak) - 220000*r(23,Mak) - 230000*r(24,Mak) - 240000*r(25,Mak) - 250000*r(26,Mak) - 260000*r(27,Mak)
     
      - 270000*r(28,Mak) - 280000*r(29,Mak) - 290000*r(30,Mak) - 300000*r(31,Mak) - 310000*r(32,Mak) - 320000*r(33,Mak) - 330000*r(34,Mak) - 340000*r(35,Mak) - 350000*r(36,Mak) - 360000*r(37,Mak) - 370000*r(38,Mak) - 380000*r(39,Mak) - 390000*r(40,Mak)
     
      - 400000*r(41,Mak) - 410000*r(42,Mak) - 420000*r(43,Mak) - 430000*r(44,Mak) - 440000*r(45,Mak) - 450000*r(46,Mak) - 460000*r(47,Mak) - 470000*r(48,Mak) - 480000*r(49,Mak) - 490000*r(50,Mak) - 500000*r(51,Mak) - 510000*r(52,Mak) - 520000*r(53,Mak)
     
      - 530000*r(54,Mak) - 540000*r(55,Mak) - 550000*r(56,Mak) - 560000*r(57,Mak) - 570000*r(58,Mak) - 580000*r(59,Mak) - 590000*r(60,Mak) - 600000*r(61,Mak) - 610000*r(62,Mak) - 620000*r(63,Mak) - 630000*r(64,Mak) - 640000*r(65,Mak) - 650000*r(66,Mak)
     
      - 660000*r(67,Mak) - 670000*r(68,Mak) - 680000*r(69,Mak) - 690000*r(70,Mak) - 700000*r(71,Mak) - 710000*r(72,Mak) - 720000*r(73,Mak) - 730000*r(74,Mak) - 740000*r(75,Mak) - 750000*r(76,Mak) - 760000*r(77,Mak) - 770000*r(78,Mak) - 780000*r(79,Mak)
     
      - 790000*r(80,Mak) - 800000*r(81,Mak) - 810000*r(82,Mak) - 820000*r(83,Mak) - 830000*r(84,Mak) - 840000*r(85,Mak) - 850000*r(86,Mak) - 860000*r(87,Mak) - 870000*r(88,Mak) - 880000*r(89,Mak) - 890000*r(90,Mak) - 900000*r(91,Mak) - 910000*r(92,Mak)
     
      - 920000*r(93,Mak) - 930000*r(94,Mak) - 940000*r(95,Mak) - 950000*r(96,Mak) - 960000*r(97,Mak) - 970000*r(98,Mak) - 980000*r(99,Mak) - 990000*r(100,Mak) - 1000000*r(101,Mak) - 1010000*r(102,Mak) - 1020000*r(103,Mak) - 1030000*r(104,Mak)
     
      - 1040000*r(105,Mak) - 1050000*r(106,Mak) - 1060000*r(107,Mak) + b(Mak) =E= 0 ; (LHS = 0)
     
timber_bought(Kuk)..  - 10000*r(2,Kuk) - 20000*r(3,Kuk) - 30000*r(4,Kuk) - 40000*r(5,Kuk) - 50000*r(6,Kuk) - 60000*r(7,Kuk) - 70000*r(8,Kuk) - 80000*r(9,Kuk) - 90000*r(10,Kuk) - 100000*r(11,Kuk) - 110000*r(12,Kuk) - 120000*r(13,Kuk) - 130000*r(14,Kuk)
     
      - 140000*r(15,Kuk) - 150000*r(16,Kuk) - 160000*r(17,Kuk) - 170000*r(18,Kuk) - 180000*r(19,Kuk) - 190000*r(20,Kuk) - 200000*r(21,Kuk) - 210000*r(22,Kuk) - 220000*r(23,Kuk) - 230000*r(24,Kuk) - 240000*r(25,Kuk) - 250000*r(26,Kuk) - 260000*r(27,Kuk)
     
      - 270000*r(28,Kuk) - 280000*r(29,Kuk) - 290000*r(30,Kuk) - 300000*r(31,Kuk) - 310000*r(32,Kuk) - 320000*r(33,Kuk) - 330000*r(34,Kuk) - 340000*r(35,Kuk) - 350000*r(36,Kuk) - 360000*r(37,Kuk) - 370000*r(38,Kuk) - 380000*r(39,Kuk) - 390000*r(40,Kuk)
     
      - 400000*r(41,Kuk) - 410000*r(42,Kuk) - 420000*r(43,Kuk) - 430000*r(44,Kuk) - 440000*r(45,Kuk) - 450000*r(46,Kuk) - 460000*r(47,Kuk) - 470000*r(48,Kuk) - 480000*r(49,Kuk) - 490000*r(50,Kuk) - 500000*r(51,Kuk) - 510000*r(52,Kuk) - 520000*r(53,Kuk)
     
      - 530000*r(54,Kuk) - 540000*r(55,Kuk) - 550000*r(56,Kuk) - 560000*r(57,Kuk) - 570000*r(58,Kuk) - 580000*r(59,Kuk) - 590000*r(60,Kuk) - 600000*r(61,Kuk) - 610000*r(62,Kuk) - 620000*r(63,Kuk) - 630000*r(64,Kuk) - 640000*r(65,Kuk) - 650000*r(66,Kuk)
     
      - 660000*r(67,Kuk) - 670000*r(68,Kuk) - 680000*r(69,Kuk) - 690000*r(70,Kuk) - 700000*r(71,Kuk) - 710000*r(72,Kuk) - 720000*r(73,Kuk) - 730000*r(74,Kuk) - 740000*r(75,Kuk) - 750000*r(76,Kuk) - 760000*r(77,Kuk) - 770000*r(78,Kuk) - 780000*r(79,Kuk)
     
      - 790000*r(80,Kuk) - 800000*r(81,Kuk) - 810000*r(82,Kuk) - 820000*r(83,Kuk) - 830000*r(84,Kuk) - 840000*r(85,Kuk) - 850000*r(86,Kuk) - 860000*r(87,Kuk) - 870000*r(88,Kuk) - 880000*r(89,Kuk) - 890000*r(90,Kuk) - 900000*r(91,Kuk) - 910000*r(92,Kuk)
     
      - 920000*r(93,Kuk) - 930000*r(94,Kuk) - 940000*r(95,Kuk) - 950000*r(96,Kuk) - 960000*r(97,Kuk) - 970000*r(98,Kuk) - 980000*r(99,Kuk) - 990000*r(100,Kuk) - 1000000*r(101,Kuk) - 1010000*r(102,Kuk) - 1020000*r(103,Kuk) - 1030000*r(104,Kuk)
     
      - 1040000*r(105,Kuk) - 1050000*r(106,Kuk) - 1060000*r(107,Kuk) + b(Kuk) =E= 0 ; (LHS = 0)
     
timber_bought(Kok)..  - 10000*r(2,Kok) - 20000*r(3,Kok) - 30000*r(4,Kok) - 40000*r(5,Kok) - 50000*r(6,Kok) - 60000*r(7,Kok) - 70000*r(8,Kok) - 80000*r(9,Kok) - 90000*r(10,Kok) - 100000*r(11,Kok) - 110000*r(12,Kok) - 120000*r(13,Kok) - 130000*r(14,Kok)
     
      - 140000*r(15,Kok) - 150000*r(16,Kok) - 160000*r(17,Kok) - 170000*r(18,Kok) - 180000*r(19,Kok) - 190000*r(20,Kok) - 200000*r(21,Kok) - 210000*r(22,Kok) - 220000*r(23,Kok) - 230000*r(24,Kok) - 240000*r(25,Kok) - 250000*r(26,Kok) - 260000*r(27,Kok)
     
      - 270000*r(28,Kok) - 280000*r(29,Kok) - 290000*r(30,Kok) - 300000*r(31,Kok) - 310000*r(32,Kok) - 320000*r(33,Kok) - 330000*r(34,Kok) - 340000*r(35,Kok) - 350000*r(36,Kok) - 360000*r(37,Kok) - 370000*r(38,Kok) - 380000*r(39,Kok) - 390000*r(40,Kok)
     
      - 400000*r(41,Kok) - 410000*r(42,Kok) - 420000*r(43,Kok) - 430000*r(44,Kok) - 440000*r(45,Kok) - 450000*r(46,Kok) - 460000*r(47,Kok) - 470000*r(48,Kok) - 480000*r(49,Kok) - 490000*r(50,Kok) - 500000*r(51,Kok) - 510000*r(52,Kok) - 520000*r(53,Kok)
     
      - 530000*r(54,Kok) - 540000*r(55,Kok) - 550000*r(56,Kok) - 560000*r(57,Kok) - 570000*r(58,Kok) - 580000*r(59,Kok) - 590000*r(60,Kok) - 600000*r(61,Kok) - 610000*r(62,Kok) - 620000*r(63,Kok) - 630000*r(64,Kok) - 640000*r(65,Kok) - 650000*r(66,Kok)
     
      - 660000*r(67,Kok) - 670000*r(68,Kok) - 680000*r(69,Kok) - 690000*r(70,Kok) - 700000*r(71,Kok) - 710000*r(72,Kok) - 720000*r(73,Kok) - 730000*r(74,Kok) - 740000*r(75,Kok) - 750000*r(76,Kok) - 760000*r(77,Kok) - 770000*r(78,Kok) - 780000*r(79,Kok)
     
      - 790000*r(80,Kok) - 800000*r(81,Kok) - 810000*r(82,Kok) - 820000*r(83,Kok) - 830000*r(84,Kok) - 840000*r(85,Kok) - 850000*r(86,Kok) - 860000*r(87,Kok) - 870000*r(88,Kok) - 880000*r(89,Kok) - 890000*r(90,Kok) - 900000*r(91,Kok) - 910000*r(92,Kok)
     
      - 920000*r(93,Kok) - 930000*r(94,Kok) - 940000*r(95,Kok) - 950000*r(96,Kok) - 960000*r(97,Kok) - 970000*r(98,Kok) - 980000*r(99,Kok) - 990000*r(100,Kok) - 1000000*r(101,Kok) - 1010000*r(102,Kok) - 1020000*r(103,Kok) - 1030000*r(104,Kok)
GAMS 24.8.1  r59919 Released Dec 22, 2016 DEX-DEG x86 64bit/Mac OS X                                                                                                                                                                  01/17/17 22:39:53 Page 19
G e n e r a l   A l g e b r a i c   M o d e l i n g   S y s t e m
Equation Listing    SOLVE final Using MIP From line 358


     timber_bought  =E=  amount of timber i bought     
     
      - 1040000*r(105,Kok) - 1050000*r(106,Kok) - 1060000*r(107,Kok) + b(Kok) =E= 0 ; (LHS = 0)
     

---- Barges_buy  =E=  ensure we only pick one value n for barges for each timber i

Barges_buy(Mat)..  r(1,Mat) + r(2,Mat) + r(3,Mat) + r(4,Mat) + r(5,Mat) + r(6,Mat) + r(7,Mat) + r(8,Mat) + r(9,Mat) + r(10,Mat) + r(11,Mat) + r(12,Mat) + r(13,Mat) + r(14,Mat) + r(15,Mat) + r(16,Mat) + r(17,Mat) + r(18,Mat) + r(19,Mat) + r(20,Mat)
     
      + r(21,Mat) + r(22,Mat) + r(23,Mat) + r(24,Mat) + r(25,Mat) + r(26,Mat) + r(27,Mat) + r(28,Mat) + r(29,Mat) + r(30,Mat) + r(31,Mat) + r(32,Mat) + r(33,Mat) + r(34,Mat) + r(35,Mat) + r(36,Mat) + r(37,Mat) + r(38,Mat) + r(39,Mat) + r(40,Mat)
     
      + r(41,Mat) + r(42,Mat) + r(43,Mat) + r(44,Mat) + r(45,Mat) + r(46,Mat) + r(47,Mat) + r(48,Mat) + r(49,Mat) + r(50,Mat) + r(51,Mat) + r(52,Mat) + r(53,Mat) + r(54,Mat) + r(55,Mat) + r(56,Mat) + r(57,Mat) + r(58,Mat) + r(59,Mat) + r(60,Mat)
     
      + r(61,Mat) + r(62,Mat) + r(63,Mat) + r(64,Mat) + r(65,Mat) + r(66,Mat) + r(67,Mat) + r(68,Mat) + r(69,Mat) + r(70,Mat) + r(71,Mat) + r(72,Mat) + r(73,Mat) + r(74,Mat) + r(75,Mat) + r(76,Mat) + r(77,Mat) + r(78,Mat) + r(79,Mat) + r(80,Mat)
     
      + r(81,Mat) + r(82,Mat) + r(83,Mat) + r(84,Mat) + r(85,Mat) + r(86,Mat) + r(87,Mat) + r(88,Mat) + r(89,Mat) + r(90,Mat) + r(91,Mat) + r(92,Mat) + r(93,Mat) + r(94,Mat) + r(95,Mat) + r(96,Mat) + r(97,Mat) + r(98,Mat) + r(99,Mat) + r(100,Mat)
     
      + r(101,Mat) + r(102,Mat) + r(103,Mat) + r(104,Mat) + r(105,Mat) + r(106,Mat) + r(107,Mat) =E= 1 ; (LHS = 0, INFES = 1 ****)
     
Barges_buy(Kut)..  r(1,Kut) + r(2,Kut) + r(3,Kut) + r(4,Kut) + r(5,Kut) + r(6,Kut) + r(7,Kut) + r(8,Kut) + r(9,Kut) + r(10,Kut) + r(11,Kut) + r(12,Kut) + r(13,Kut) + r(14,Kut) + r(15,Kut) + r(16,Kut) + r(17,Kut) + r(18,Kut) + r(19,Kut) + r(20,Kut)
     
      + r(21,Kut) + r(22,Kut) + r(23,Kut) + r(24,Kut) + r(25,Kut) + r(26,Kut) + r(27,Kut) + r(28,Kut) + r(29,Kut) + r(30,Kut) + r(31,Kut) + r(32,Kut) + r(33,Kut) + r(34,Kut) + r(35,Kut) + r(36,Kut) + r(37,Kut) + r(38,Kut) + r(39,Kut) + r(40,Kut)
     
      + r(41,Kut) + r(42,Kut) + r(43,Kut) + r(44,Kut) + r(45,Kut) + r(46,Kut) + r(47,Kut) + r(48,Kut) + r(49,Kut) + r(50,Kut) + r(51,Kut) + r(52,Kut) + r(53,Kut) + r(54,Kut) + r(55,Kut) + r(56,Kut) + r(57,Kut) + r(58,Kut) + r(59,Kut) + r(60,Kut)
     
      + r(61,Kut) + r(62,Kut) + r(63,Kut) + r(64,Kut) + r(65,Kut) + r(66,Kut) + r(67,Kut) + r(68,Kut) + r(69,Kut) + r(70,Kut) + r(71,Kut) + r(72,Kut) + r(73,Kut) + r(74,Kut) + r(75,Kut) + r(76,Kut) + r(77,Kut) + r(78,Kut) + r(79,Kut) + r(80,Kut)
     
      + r(81,Kut) + r(82,Kut) + r(83,Kut) + r(84,Kut) + r(85,Kut) + r(86,Kut) + r(87,Kut) + r(88,Kut) + r(89,Kut) + r(90,Kut) + r(91,Kut) + r(92,Kut) + r(93,Kut) + r(94,Kut) + r(95,Kut) + r(96,Kut) + r(97,Kut) + r(98,Kut) + r(99,Kut) + r(100,Kut)
     
      + r(101,Kut) + r(102,Kut) + r(103,Kut) + r(104,Kut) + r(105,Kut) + r(106,Kut) + r(107,Kut) =E= 1 ; (LHS = 0, INFES = 1 ****)
     
Barges_buy(Kot)..  r(1,Kot) + r(2,Kot) + r(3,Kot) + r(4,Kot) + r(5,Kot) + r(6,Kot) + r(7,Kot) + r(8,Kot) + r(9,Kot) + r(10,Kot) + r(11,Kot) + r(12,Kot) + r(13,Kot) + r(14,Kot) + r(15,Kot) + r(16,Kot) + r(17,Kot) + r(18,Kot) + r(19,Kot) + r(20,Kot)
     
      + r(21,Kot) + r(22,Kot) + r(23,Kot) + r(24,Kot) + r(25,Kot) + r(26,Kot) + r(27,Kot) + r(28,Kot) + r(29,Kot) + r(30,Kot) + r(31,Kot) + r(32,Kot) + r(33,Kot) + r(34,Kot) + r(35,Kot) + r(36,Kot) + r(37,Kot) + r(38,Kot) + r(39,Kot) + r(40,Kot)
     
      + r(41,Kot) + r(42,Kot) + r(43,Kot) + r(44,Kot) + r(45,Kot) + r(46,Kot) + r(47,Kot) + r(48,Kot) + r(49,Kot) + r(50,Kot) + r(51,Kot) + r(52,Kot) + r(53,Kot) + r(54,Kot) + r(55,Kot) + r(56,Kot) + r(57,Kot) + r(58,Kot) + r(59,Kot) + r(60,Kot)
     
      + r(61,Kot) + r(62,Kot) + r(63,Kot) + r(64,Kot) + r(65,Kot) + r(66,Kot) + r(67,Kot) + r(68,Kot) + r(69,Kot) + r(70,Kot) + r(71,Kot) + r(72,Kot) + r(73,Kot) + r(74,Kot) + r(75,Kot) + r(76,Kot) + r(77,Kot) + r(78,Kot) + r(79,Kot) + r(80,Kot)
     
      + r(81,Kot) + r(82,Kot) + r(83,Kot) + r(84,Kot) + r(85,Kot) + r(86,Kot) + r(87,Kot) + r(88,Kot) + r(89,Kot) + r(90,Kot) + r(91,Kot) + r(92,Kot) + r(93,Kot) + r(94,Kot) + r(95,Kot) + r(96,Kot) + r(97,Kot) + r(98,Kot) + r(99,Kot) + r(100,Kot)
     
      + r(101,Kot) + r(102,Kot) + r(103,Kot) + r(104,Kot) + r(105,Kot) + r(106,Kot) + r(107,Kot) =E= 1 ; (LHS = 0, INFES = 1 ****)
     
Barges_buy(Mak)..  r(1,Mak) + r(2,Mak) + r(3,Mak) + r(4,Mak) + r(5,Mak) + r(6,Mak) + r(7,Mak) + r(8,Mak) + r(9,Mak) + r(10,Mak) + r(11,Mak) + r(12,Mak) + r(13,Mak) + r(14,Mak) + r(15,Mak) + r(16,Mak) + r(17,Mak) + r(18,Mak) + r(19,Mak) + r(20,Mak)
     
      + r(21,Mak) + r(22,Mak) + r(23,Mak) + r(24,Mak) + r(25,Mak) + r(26,Mak) + r(27,Mak) + r(28,Mak) + r(29,Mak) + r(30,Mak) + r(31,Mak) + r(32,Mak) + r(33,Mak) + r(34,Mak) + r(35,Mak) + r(36,Mak) + r(37,Mak) + r(38,Mak) + r(39,Mak) + r(40,Mak)
     
      + r(41,Mak) + r(42,Mak) + r(43,Mak) + r(44,Mak) + r(45,Mak) + r(46,Mak) + r(47,Mak) + r(48,Mak) + r(49,Mak) + r(50,Mak) + r(51,Mak) + r(52,Mak) + r(53,Mak) + r(54,Mak) + r(55,Mak) + r(56,Mak) + r(57,Mak) + r(58,Mak) + r(59,Mak) + r(60,Mak)
     
      + r(61,Mak) + r(62,Mak) + r(63,Mak) + r(64,Mak) + r(65,Mak) + r(66,Mak) + r(67,Mak) + r(68,Mak) + r(69,Mak) + r(70,Mak) + r(71,Mak) + r(72,Mak) + r(73,Mak) + r(74,Mak) + r(75,Mak) + r(76,Mak) + r(77,Mak) + r(78,Mak) + r(79,Mak) + r(80,Mak)
     
      + r(81,Mak) + r(82,Mak) + r(83,Mak) + r(84,Mak) + r(85,Mak) + r(86,Mak) + r(87,Mak) + r(88,Mak) + r(89,Mak) + r(90,Mak) + r(91,Mak) + r(92,Mak) + r(93,Mak) + r(94,Mak) + r(95,Mak) + r(96,Mak) + r(97,Mak) + r(98,Mak) + r(99,Mak) + r(100,Mak)
     
GAMS 24.8.1  r59919 Released Dec 22, 2016 DEX-DEG x86 64bit/Mac OS X                                                                                                                                                                  01/17/17 22:39:53 Page 20
G e n e r a l   A l g e b r a i c   M o d e l i n g   S y s t e m
Equation Listing    SOLVE final Using MIP From line 358


     Barges_buy  =E=  ensure we only pick one value n for barges for each timber i     
     
      + r(101,Mak) + r(102,Mak) + r(103,Mak) + r(104,Mak) + r(105,Mak) + r(106,Mak) + r(107,Mak) =E= 1 ; (LHS = 0, INFES = 1 ****)
     
Barges_buy(Kuk)..  r(1,Kuk) + r(2,Kuk) + r(3,Kuk) + r(4,Kuk) + r(5,Kuk) + r(6,Kuk) + r(7,Kuk) + r(8,Kuk) + r(9,Kuk) + r(10,Kuk) + r(11,Kuk) + r(12,Kuk) + r(13,Kuk) + r(14,Kuk) + r(15,Kuk) + r(16,Kuk) + r(17,Kuk) + r(18,Kuk) + r(19,Kuk) + r(20,Kuk)
     
      + r(21,Kuk) + r(22,Kuk) + r(23,Kuk) + r(24,Kuk) + r(25,Kuk) + r(26,Kuk) + r(27,Kuk) + r(28,Kuk) + r(29,Kuk) + r(30,Kuk) + r(31,Kuk) + r(32,Kuk) + r(33,Kuk) + r(34,Kuk) + r(35,Kuk) + r(36,Kuk) + r(37,Kuk) + r(38,Kuk) + r(39,Kuk) + r(40,Kuk)
     
      + r(41,Kuk) + r(42,Kuk) + r(43,Kuk) + r(44,Kuk) + r(45,Kuk) + r(46,Kuk) + r(47,Kuk) + r(48,Kuk) + r(49,Kuk) + r(50,Kuk) + r(51,Kuk) + r(52,Kuk) + r(53,Kuk) + r(54,Kuk) + r(55,Kuk) + r(56,Kuk) + r(57,Kuk) + r(58,Kuk) + r(59,Kuk) + r(60,Kuk)
     
      + r(61,Kuk) + r(62,Kuk) + r(63,Kuk) + r(64,Kuk) + r(65,Kuk) + r(66,Kuk) + r(67,Kuk) + r(68,Kuk) + r(69,Kuk) + r(70,Kuk) + r(71,Kuk) + r(72,Kuk) + r(73,Kuk) + r(74,Kuk) + r(75,Kuk) + r(76,Kuk) + r(77,Kuk) + r(78,Kuk) + r(79,Kuk) + r(80,Kuk)
     
      + r(81,Kuk) + r(82,Kuk) + r(83,Kuk) + r(84,Kuk) + r(85,Kuk) + r(86,Kuk) + r(87,Kuk) + r(88,Kuk) + r(89,Kuk) + r(90,Kuk) + r(91,Kuk) + r(92,Kuk) + r(93,Kuk) + r(94,Kuk) + r(95,Kuk) + r(96,Kuk) + r(97,Kuk) + r(98,Kuk) + r(99,Kuk) + r(100,Kuk)
     
      + r(101,Kuk) + r(102,Kuk) + r(103,Kuk) + r(104,Kuk) + r(105,Kuk) + r(106,Kuk) + r(107,Kuk) =E= 1 ; (LHS = 0, INFES = 1 ****)
     
Barges_buy(Kok)..  r(1,Kok) + r(2,Kok) + r(3,Kok) + r(4,Kok) + r(5,Kok) + r(6,Kok) + r(7,Kok) + r(8,Kok) + r(9,Kok) + r(10,Kok) + r(11,Kok) + r(12,Kok) + r(13,Kok) + r(14,Kok) + r(15,Kok) + r(16,Kok) + r(17,Kok) + r(18,Kok) + r(19,Kok) + r(20,Kok)
     
      + r(21,Kok) + r(22,Kok) + r(23,Kok) + r(24,Kok) + r(25,Kok) + r(26,Kok) + r(27,Kok) + r(28,Kok) + r(29,Kok) + r(30,Kok) + r(31,Kok) + r(32,Kok) + r(33,Kok) + r(34,Kok) + r(35,Kok) + r(36,Kok) + r(37,Kok) + r(38,Kok) + r(39,Kok) + r(40,Kok)
     
      + r(41,Kok) + r(42,Kok) + r(43,Kok) + r(44,Kok) + r(45,Kok) + r(46,Kok) + r(47,Kok) + r(48,Kok) + r(49,Kok) + r(50,Kok) + r(51,Kok) + r(52,Kok) + r(53,Kok) + r(54,Kok) + r(55,Kok) + r(56,Kok) + r(57,Kok) + r(58,Kok) + r(59,Kok) + r(60,Kok)
     
      + r(61,Kok) + r(62,Kok) + r(63,Kok) + r(64,Kok) + r(65,Kok) + r(66,Kok) + r(67,Kok) + r(68,Kok) + r(69,Kok) + r(70,Kok) + r(71,Kok) + r(72,Kok) + r(73,Kok) + r(74,Kok) + r(75,Kok) + r(76,Kok) + r(77,Kok) + r(78,Kok) + r(79,Kok) + r(80,Kok)
     
      + r(81,Kok) + r(82,Kok) + r(83,Kok) + r(84,Kok) + r(85,Kok) + r(86,Kok) + r(87,Kok) + r(88,Kok) + r(89,Kok) + r(90,Kok) + r(91,Kok) + r(92,Kok) + r(93,Kok) + r(94,Kok) + r(95,Kok) + r(96,Kok) + r(97,Kok) + r(98,Kok) + r(99,Kok) + r(100,Kok)
     
      + r(101,Kok) + r(102,Kok) + r(103,Kok) + r(104,Kok) + r(105,Kok) + r(106,Kok) + r(107,Kok) =E= 1 ; (LHS = 0, INFES = 1 ****)
     

---- Barges_sell  =E=  ensure we only pick one value  n for barges for each product to each city

Barges_sell(Mas,EU)..  u(1,Mas,EU) + u(2,Mas,EU) + u(3,Mas,EU) + u(4,Mas,EU) + u(5,Mas,EU) + u(6,Mas,EU) + u(7,Mas,EU) + u(8,Mas,EU) + u(9,Mas,EU) + u(10,Mas,EU) + u(11,Mas,EU) + u(12,Mas,EU) + u(13,Mas,EU) + u(14,Mas,EU) + u(15,Mas,EU) + u(16,Mas,EU)
     
      + u(17,Mas,EU) + u(18,Mas,EU) + u(19,Mas,EU) + u(20,Mas,EU) + u(21,Mas,EU) + u(22,Mas,EU) + u(23,Mas,EU) =E= 1 ; (LHS = 0, INFES = 1 ****)
     
Barges_sell(Mas,IE)..  u(1,Mas,IE) + u(2,Mas,IE) + u(3,Mas,IE) + u(4,Mas,IE) + u(5,Mas,IE) + u(6,Mas,IE) + u(7,Mas,IE) + u(8,Mas,IE) + u(9,Mas,IE) + u(10,Mas,IE) + u(11,Mas,IE) + u(12,Mas,IE) + u(13,Mas,IE) + u(14,Mas,IE) + u(15,Mas,IE) + u(16,Mas,IE)
     
      + u(17,Mas,IE) + u(18,Mas,IE) + u(19,Mas,IE) + u(20,Mas,IE) + u(21,Mas,IE) + u(22,Mas,IE) + u(23,Mas,IE) =E= 1 ; (LHS = 0, INFES = 1 ****)
     
Barges_sell(Mas,PA)..  u(1,Mas,PA) + u(2,Mas,PA) + u(3,Mas,PA) + u(4,Mas,PA) + u(5,Mas,PA) + u(6,Mas,PA) + u(7,Mas,PA) + u(8,Mas,PA) + u(9,Mas,PA) + u(10,Mas,PA) + u(11,Mas,PA) + u(12,Mas,PA) + u(13,Mas,PA) + u(14,Mas,PA) + u(15,Mas,PA) + u(16,Mas,PA)
     
      + u(17,Mas,PA) + u(18,Mas,PA) + u(19,Mas,PA) + u(20,Mas,PA) + u(21,Mas,PA) + u(22,Mas,PA) + u(23,Mas,PA) =E= 1 ; (LHS = 0, INFES = 1 ****)
     
Barges_sell(Mas,KI)..  u(1,Mas,KI) + u(2,Mas,KI) + u(3,Mas,KI) + u(4,Mas,KI) + u(5,Mas,KI) + u(6,Mas,KI) + u(7,Mas,KI) + u(8,Mas,KI) + u(9,Mas,KI) + u(10,Mas,KI) + u(11,Mas,KI) + u(12,Mas,KI) + u(13,Mas,KI) + u(14,Mas,KI) + u(15,Mas,KI) + u(16,Mas,KI)
     
      + u(17,Mas,KI) + u(18,Mas,KI) + u(19,Mas,KI) + u(20,Mas,KI) + u(21,Mas,KI) + u(22,Mas,KI) + u(23,Mas,KI) =E= 1 ; (LHS = 0, INFES = 1 ****)
     
Barges_sell(Kus,EU)..  u(1,Kus,EU) + u(2,Kus,EU) + u(3,Kus,EU) + u(4,Kus,EU) + u(5,Kus,EU) + u(6,Kus,EU) + u(7,Kus,EU) + u(8,Kus,EU) + u(9,Kus,EU) + u(10,Kus,EU) + u(11,Kus,EU) + u(12,Kus,EU) + u(13,Kus,EU) + u(14,Kus,EU) + u(15,Kus,EU) + u(16,Kus,EU)
     
      + u(17,Kus,EU) + u(18,Kus,EU) + u(19,Kus,EU) + u(20,Kus,EU) + u(21,Kus,EU) + u(22,Kus,EU) + u(23,Kus,EU) =E= 1 ; (LHS = 0, INFES = 1 ****)
     
GAMS 24.8.1  r59919 Released Dec 22, 2016 DEX-DEG x86 64bit/Mac OS X                                                                                                                                                                  01/17/17 22:39:53 Page 21
G e n e r a l   A l g e b r a i c   M o d e l i n g   S y s t e m
Equation Listing    SOLVE final Using MIP From line 358


     Barges_sell  =E=  ensure we only pick one value  n for barges for each product to each city

Barges_sell(Kus,IE)..  u(1,Kus,IE) + u(2,Kus,IE) + u(3,Kus,IE) + u(4,Kus,IE) + u(5,Kus,IE) + u(6,Kus,IE) + u(7,Kus,IE) + u(8,Kus,IE) + u(9,Kus,IE) + u(10,Kus,IE) + u(11,Kus,IE) + u(12,Kus,IE) + u(13,Kus,IE) + u(14,Kus,IE) + u(15,Kus,IE) + u(16,Kus,IE)
     
      + u(17,Kus,IE) + u(18,Kus,IE) + u(19,Kus,IE) + u(20,Kus,IE) + u(21,Kus,IE) + u(22,Kus,IE) + u(23,Kus,IE) =E= 1 ; (LHS = 0, INFES = 1 ****)
     
Barges_sell(Kus,PA)..  u(1,Kus,PA) + u(2,Kus,PA) + u(3,Kus,PA) + u(4,Kus,PA) + u(5,Kus,PA) + u(6,Kus,PA) + u(7,Kus,PA) + u(8,Kus,PA) + u(9,Kus,PA) + u(10,Kus,PA) + u(11,Kus,PA) + u(12,Kus,PA) + u(13,Kus,PA) + u(14,Kus,PA) + u(15,Kus,PA) + u(16,Kus,PA)
     
      + u(17,Kus,PA) + u(18,Kus,PA) + u(19,Kus,PA) + u(20,Kus,PA) + u(21,Kus,PA) + u(22,Kus,PA) + u(23,Kus,PA) =E= 1 ; (LHS = 0, INFES = 1 ****)
     
Barges_sell(Kus,KI)..  u(1,Kus,KI) + u(2,Kus,KI) + u(3,Kus,KI) + u(4,Kus,KI) + u(5,Kus,KI) + u(6,Kus,KI) + u(7,Kus,KI) + u(8,Kus,KI) + u(9,Kus,KI) + u(10,Kus,KI) + u(11,Kus,KI) + u(12,Kus,KI) + u(13,Kus,KI) + u(14,Kus,KI) + u(15,Kus,KI) + u(16,Kus,KI)
     
      + u(17,Kus,KI) + u(18,Kus,KI) + u(19,Kus,KI) + u(20,Kus,KI) + u(21,Kus,KI) + u(22,Kus,KI) + u(23,Kus,KI) =E= 1 ; (LHS = 0, INFES = 1 ****)
     
Barges_sell(Kos,EU)..  u(1,Kos,EU) + u(2,Kos,EU) + u(3,Kos,EU) + u(4,Kos,EU) + u(5,Kos,EU) + u(6,Kos,EU) + u(7,Kos,EU) + u(8,Kos,EU) + u(9,Kos,EU) + u(10,Kos,EU) + u(11,Kos,EU) + u(12,Kos,EU) + u(13,Kos,EU) + u(14,Kos,EU) + u(15,Kos,EU) + u(16,Kos,EU)
     
      + u(17,Kos,EU) + u(18,Kos,EU) + u(19,Kos,EU) + u(20,Kos,EU) + u(21,Kos,EU) + u(22,Kos,EU) + u(23,Kos,EU) =E= 1 ; (LHS = 0, INFES = 1 ****)
     
Barges_sell(Kos,IE)..  u(1,Kos,IE) + u(2,Kos,IE) + u(3,Kos,IE) + u(4,Kos,IE) + u(5,Kos,IE) + u(6,Kos,IE) + u(7,Kos,IE) + u(8,Kos,IE) + u(9,Kos,IE) + u(10,Kos,IE) + u(11,Kos,IE) + u(12,Kos,IE) + u(13,Kos,IE) + u(14,Kos,IE) + u(15,Kos,IE) + u(16,Kos,IE)
     
      + u(17,Kos,IE) + u(18,Kos,IE) + u(19,Kos,IE) + u(20,Kos,IE) + u(21,Kos,IE) + u(22,Kos,IE) + u(23,Kos,IE) =E= 1 ; (LHS = 0, INFES = 1 ****)
     
Barges_sell(Kos,PA)..  u(1,Kos,PA) + u(2,Kos,PA) + u(3,Kos,PA) + u(4,Kos,PA) + u(5,Kos,PA) + u(6,Kos,PA) + u(7,Kos,PA) + u(8,Kos,PA) + u(9,Kos,PA) + u(10,Kos,PA) + u(11,Kos,PA) + u(12,Kos,PA) + u(13,Kos,PA) + u(14,Kos,PA) + u(15,Kos,PA) + u(16,Kos,PA)
     
      + u(17,Kos,PA) + u(18,Kos,PA) + u(19,Kos,PA) + u(20,Kos,PA) + u(21,Kos,PA) + u(22,Kos,PA) + u(23,Kos,PA) =E= 1 ; (LHS = 0, INFES = 1 ****)
     
Barges_sell(Kos,KI)..  u(1,Kos,KI) + u(2,Kos,KI) + u(3,Kos,KI) + u(4,Kos,KI) + u(5,Kos,KI) + u(6,Kos,KI) + u(7,Kos,KI) + u(8,Kos,KI) + u(9,Kos,KI) + u(10,Kos,KI) + u(11,Kos,KI) + u(12,Kos,KI) + u(13,Kos,KI) + u(14,Kos,KI) + u(15,Kos,KI) + u(16,Kos,KI)
     
      + u(17,Kos,KI) + u(18,Kos,KI) + u(19,Kos,KI) + u(20,Kos,KI) + u(21,Kos,KI) + u(22,Kos,KI) + u(23,Kos,KI) =E= 1 ; (LHS = 0, INFES = 1 ****)
     
Barges_sell(Kuv,EU)..  u(1,Kuv,EU) + u(2,Kuv,EU) + u(3,Kuv,EU) + u(4,Kuv,EU) + u(5,Kuv,EU) + u(6,Kuv,EU) + u(7,Kuv,EU) + u(8,Kuv,EU) + u(9,Kuv,EU) + u(10,Kuv,EU) + u(11,Kuv,EU) + u(12,Kuv,EU) + u(13,Kuv,EU) + u(14,Kuv,EU) + u(15,Kuv,EU) + u(16,Kuv,EU)
     
      + u(17,Kuv,EU) + u(18,Kuv,EU) + u(19,Kuv,EU) + u(20,Kuv,EU) + u(21,Kuv,EU) + u(22,Kuv,EU) + u(23,Kuv,EU) =E= 1 ; (LHS = 0, INFES = 1 ****)
     
Barges_sell(Kuv,IE)..  u(1,Kuv,IE) + u(2,Kuv,IE) + u(3,Kuv,IE) + u(4,Kuv,IE) + u(5,Kuv,IE) + u(6,Kuv,IE) + u(7,Kuv,IE) + u(8,Kuv,IE) + u(9,Kuv,IE) + u(10,Kuv,IE) + u(11,Kuv,IE) + u(12,Kuv,IE) + u(13,Kuv,IE) + u(14,Kuv,IE) + u(15,Kuv,IE) + u(16,Kuv,IE)
     
      + u(17,Kuv,IE) + u(18,Kuv,IE) + u(19,Kuv,IE) + u(20,Kuv,IE) + u(21,Kuv,IE) + u(22,Kuv,IE) + u(23,Kuv,IE) =E= 1 ; (LHS = 0, INFES = 1 ****)
     
Barges_sell(Kuv,PA)..  u(1,Kuv,PA) + u(2,Kuv,PA) + u(3,Kuv,PA) + u(4,Kuv,PA) + u(5,Kuv,PA) + u(6,Kuv,PA) + u(7,Kuv,PA) + u(8,Kuv,PA) + u(9,Kuv,PA) + u(10,Kuv,PA) + u(11,Kuv,PA) + u(12,Kuv,PA) + u(13,Kuv,PA) + u(14,Kuv,PA) + u(15,Kuv,PA) + u(16,Kuv,PA)
     
      + u(17,Kuv,PA) + u(18,Kuv,PA) + u(19,Kuv,PA) + u(20,Kuv,PA) + u(21,Kuv,PA) + u(22,Kuv,PA) + u(23,Kuv,PA) =E= 1 ; (LHS = 0, INFES = 1 ****)
     
Barges_sell(Kuv,KI)..  u(1,Kuv,KI) + u(2,Kuv,KI) + u(3,Kuv,KI) + u(4,Kuv,KI) + u(5,Kuv,KI) + u(6,Kuv,KI) + u(7,Kuv,KI) + u(8,Kuv,KI) + u(9,Kuv,KI) + u(10,Kuv,KI) + u(11,Kuv,KI) + u(12,Kuv,KI) + u(13,Kuv,KI) + u(14,Kuv,KI) + u(15,Kuv,KI) + u(16,Kuv,KI)
     
      + u(17,Kuv,KI) + u(18,Kuv,KI) + u(19,Kuv,KI) + u(20,Kuv,KI) + u(21,Kuv,KI) + u(22,Kuv,KI) + u(23,Kuv,KI) =E= 1 ; (LHS = 0, INFES = 1 ****)
     
Barges_sell(Kov,EU)..  u(1,Kov,EU) + u(2,Kov,EU) + u(3,Kov,EU) + u(4,Kov,EU) + u(5,Kov,EU) + u(6,Kov,EU) + u(7,Kov,EU) + u(8,Kov,EU) + u(9,Kov,EU) + u(10,Kov,EU) + u(11,Kov,EU) + u(12,Kov,EU) + u(13,Kov,EU) + u(14,Kov,EU) + u(15,Kov,EU) + u(16,Kov,EU)
     
      + u(17,Kov,EU) + u(18,Kov,EU) + u(19,Kov,EU) + u(20,Kov,EU) + u(21,Kov,EU) + u(22,Kov,EU) + u(23,Kov,EU) =E= 1 ; (LHS = 0, INFES = 1 ****)
     
GAMS 24.8.1  r59919 Released Dec 22, 2016 DEX-DEG x86 64bit/Mac OS X                                                                                                                                                                  01/17/17 22:39:53 Page 22
G e n e r a l   A l g e b r a i c   M o d e l i n g   S y s t e m
Equation Listing    SOLVE final Using MIP From line 358


     Barges_sell  =E=  ensure we only pick one value  n for barges for each product to each city

Barges_sell(Kov,IE)..  u(1,Kov,IE) + u(2,Kov,IE) + u(3,Kov,IE) + u(4,Kov,IE) + u(5,Kov,IE) + u(6,Kov,IE) + u(7,Kov,IE) + u(8,Kov,IE) + u(9,Kov,IE) + u(10,Kov,IE) + u(11,Kov,IE) + u(12,Kov,IE) + u(13,Kov,IE) + u(14,Kov,IE) + u(15,Kov,IE) + u(16,Kov,IE)
     
      + u(17,Kov,IE) + u(18,Kov,IE) + u(19,Kov,IE) + u(20,Kov,IE) + u(21,Kov,IE) + u(22,Kov,IE) + u(23,Kov,IE) =E= 1 ; (LHS = 0, INFES = 1 ****)
     
Barges_sell(Kov,PA)..  u(1,Kov,PA) + u(2,Kov,PA) + u(3,Kov,PA) + u(4,Kov,PA) + u(5,Kov,PA) + u(6,Kov,PA) + u(7,Kov,PA) + u(8,Kov,PA) + u(9,Kov,PA) + u(10,Kov,PA) + u(11,Kov,PA) + u(12,Kov,PA) + u(13,Kov,PA) + u(14,Kov,PA) + u(15,Kov,PA) + u(16,Kov,PA)
     
      + u(17,Kov,PA) + u(18,Kov,PA) + u(19,Kov,PA) + u(20,Kov,PA) + u(21,Kov,PA) + u(22,Kov,PA) + u(23,Kov,PA) =E= 1 ; (LHS = 0, INFES = 1 ****)
     
Barges_sell(Kov,KI)..  u(1,Kov,KI) + u(2,Kov,KI) + u(3,Kov,KI) + u(4,Kov,KI) + u(5,Kov,KI) + u(6,Kov,KI) + u(7,Kov,KI) + u(8,Kov,KI) + u(9,Kov,KI) + u(10,Kov,KI) + u(11,Kov,KI) + u(12,Kov,KI) + u(13,Kov,KI) + u(14,Kov,KI) + u(15,Kov,KI) + u(16,Kov,KI)
     
      + u(17,Kov,KI) + u(18,Kov,KI) + u(19,Kov,KI) + u(20,Kov,KI) + u(21,Kov,KI) + u(22,Kov,KI) + u(23,Kov,KI) =E= 1 ; (LHS = 0, INFES = 1 ****)
     
Barges_sell(Hsel,EU)..  u(1,Hsel,EU) + u(2,Hsel,EU) + u(3,Hsel,EU) + u(4,Hsel,EU) + u(5,Hsel,EU) + u(6,Hsel,EU) + u(7,Hsel,EU) + u(8,Hsel,EU) + u(9,Hsel,EU) + u(10,Hsel,EU) + u(11,Hsel,EU) + u(12,Hsel,EU) + u(13,Hsel,EU) + u(14,Hsel,EU) + u(15,Hsel,EU)
     
      + u(16,Hsel,EU) + u(17,Hsel,EU) + u(18,Hsel,EU) + u(19,Hsel,EU) + u(20,Hsel,EU) + u(21,Hsel,EU) + u(22,Hsel,EU) + u(23,Hsel,EU) =E= 1 ; (LHS = 0, INFES = 1 ****)
     
Barges_sell(Hsel,IE)..  u(1,Hsel,IE) + u(2,Hsel,IE) + u(3,Hsel,IE) + u(4,Hsel,IE) + u(5,Hsel,IE) + u(6,Hsel,IE) + u(7,Hsel,IE) + u(8,Hsel,IE) + u(9,Hsel,IE) + u(10,Hsel,IE) + u(11,Hsel,IE) + u(12,Hsel,IE) + u(13,Hsel,IE) + u(14,Hsel,IE) + u(15,Hsel,IE)
     
      + u(16,Hsel,IE) + u(17,Hsel,IE) + u(18,Hsel,IE) + u(19,Hsel,IE) + u(20,Hsel,IE) + u(21,Hsel,IE) + u(22,Hsel,IE) + u(23,Hsel,IE) =E= 1 ; (LHS = 0, INFES = 1 ****)
     
Barges_sell(Hsel,PA)..  u(1,Hsel,PA) + u(2,Hsel,PA) + u(3,Hsel,PA) + u(4,Hsel,PA) + u(5,Hsel,PA) + u(6,Hsel,PA) + u(7,Hsel,PA) + u(8,Hsel,PA) + u(9,Hsel,PA) + u(10,Hsel,PA) + u(11,Hsel,PA) + u(12,Hsel,PA) + u(13,Hsel,PA) + u(14,Hsel,PA) + u(15,Hsel,PA)
     
      + u(16,Hsel,PA) + u(17,Hsel,PA) + u(18,Hsel,PA) + u(19,Hsel,PA) + u(20,Hsel,PA) + u(21,Hsel,PA) + u(22,Hsel,PA) + u(23,Hsel,PA) =E= 1 ; (LHS = 0, INFES = 1 ****)
     
Barges_sell(Hsel,KI)..  u(1,Hsel,KI) + u(2,Hsel,KI) + u(3,Hsel,KI) + u(4,Hsel,KI) + u(5,Hsel,KI) + u(6,Hsel,KI) + u(7,Hsel,KI) + u(8,Hsel,KI) + u(9,Hsel,KI) + u(10,Hsel,KI) + u(11,Hsel,KI) + u(12,Hsel,KI) + u(13,Hsel,KI) + u(14,Hsel,KI) + u(15,Hsel,KI)
     
      + u(16,Hsel,KI) + u(17,Hsel,KI) + u(18,Hsel,KI) + u(19,Hsel,KI) + u(20,Hsel,KI) + u(21,Hsel,KI) + u(22,Hsel,KI) + u(23,Hsel,KI) =E= 1 ; (LHS = 0, INFES = 1 ****)
     
Barges_sell(Lsel,EU)..  u(1,Lsel,EU) + u(2,Lsel,EU) + u(3,Lsel,EU) + u(4,Lsel,EU) + u(5,Lsel,EU) + u(6,Lsel,EU) + u(7,Lsel,EU) + u(8,Lsel,EU) + u(9,Lsel,EU) + u(10,Lsel,EU) + u(11,Lsel,EU) + u(12,Lsel,EU) + u(13,Lsel,EU) + u(14,Lsel,EU) + u(15,Lsel,EU)
     
      + u(16,Lsel,EU) + u(17,Lsel,EU) + u(18,Lsel,EU) + u(19,Lsel,EU) + u(20,Lsel,EU) + u(21,Lsel,EU) + u(22,Lsel,EU) + u(23,Lsel,EU) =E= 1 ; (LHS = 0, INFES = 1 ****)
     
Barges_sell(Lsel,IE)..  u(1,Lsel,IE) + u(2,Lsel,IE) + u(3,Lsel,IE) + u(4,Lsel,IE) + u(5,Lsel,IE) + u(6,Lsel,IE) + u(7,Lsel,IE) + u(8,Lsel,IE) + u(9,Lsel,IE) + u(10,Lsel,IE) + u(11,Lsel,IE) + u(12,Lsel,IE) + u(13,Lsel,IE) + u(14,Lsel,IE) + u(15,Lsel,IE)
     
      + u(16,Lsel,IE) + u(17,Lsel,IE) + u(18,Lsel,IE) + u(19,Lsel,IE) + u(20,Lsel,IE) + u(21,Lsel,IE) + u(22,Lsel,IE) + u(23,Lsel,IE) =E= 1 ; (LHS = 0, INFES = 1 ****)
     
Barges_sell(Lsel,PA)..  u(1,Lsel,PA) + u(2,Lsel,PA) + u(3,Lsel,PA) + u(4,Lsel,PA) + u(5,Lsel,PA) + u(6,Lsel,PA) + u(7,Lsel,PA) + u(8,Lsel,PA) + u(9,Lsel,PA) + u(10,Lsel,PA) + u(11,Lsel,PA) + u(12,Lsel,PA) + u(13,Lsel,PA) + u(14,Lsel,PA) + u(15,Lsel,PA)
     
      + u(16,Lsel,PA) + u(17,Lsel,PA) + u(18,Lsel,PA) + u(19,Lsel,PA) + u(20,Lsel,PA) + u(21,Lsel,PA) + u(22,Lsel,PA) + u(23,Lsel,PA) =E= 1 ; (LHS = 0, INFES = 1 ****)
     
Barges_sell(Lsel,KI)..  u(1,Lsel,KI) + u(2,Lsel,KI) + u(3,Lsel,KI) + u(4,Lsel,KI) + u(5,Lsel,KI) + u(6,Lsel,KI) + u(7,Lsel,KI) + u(8,Lsel,KI) + u(9,Lsel,KI) + u(10,Lsel,KI) + u(11,Lsel,KI) + u(12,Lsel,KI) + u(13,Lsel,KI) + u(14,Lsel,KI) + u(15,Lsel,KI)
     
      + u(16,Lsel,KI) + u(17,Lsel,KI) + u(18,Lsel,KI) + u(19,Lsel,KI) + u(20,Lsel,KI) + u(21,Lsel,KI) + u(22,Lsel,KI) + u(23,Lsel,KI) =E= 1 ; (LHS = 0, INFES = 1 ****)
     
Barges_sell(Pap,EU)..  u(1,Pap,EU) + u(2,Pap,EU) + u(3,Pap,EU) + u(4,Pap,EU) + u(5,Pap,EU) + u(6,Pap,EU) + u(7,Pap,EU) + u(8,Pap,EU) + u(9,Pap,EU) + u(10,Pap,EU) + u(11,Pap,EU) + u(12,Pap,EU) + u(13,Pap,EU) + u(14,Pap,EU) + u(15,Pap,EU) + u(16,Pap,EU)
     
      + u(17,Pap,EU) + u(18,Pap,EU) + u(19,Pap,EU) + u(20,Pap,EU) + u(21,Pap,EU) + u(22,Pap,EU) + u(23,Pap,EU) =E= 1 ; (LHS = 0, INFES = 1 ****)
     
GAMS 24.8.1  r59919 Released Dec 22, 2016 DEX-DEG x86 64bit/Mac OS X                                                                                                                                                                  01/17/17 22:39:53 Page 23
G e n e r a l   A l g e b r a i c   M o d e l i n g   S y s t e m
Equation Listing    SOLVE final Using MIP From line 358


     Barges_sell  =E=  ensure we only pick one value  n for barges for each product to each city

Barges_sell(Pap,IE)..  u(1,Pap,IE) + u(2,Pap,IE) + u(3,Pap,IE) + u(4,Pap,IE) + u(5,Pap,IE) + u(6,Pap,IE) + u(7,Pap,IE) + u(8,Pap,IE) + u(9,Pap,IE) + u(10,Pap,IE) + u(11,Pap,IE) + u(12,Pap,IE) + u(13,Pap,IE) + u(14,Pap,IE) + u(15,Pap,IE) + u(16,Pap,IE)
     
      + u(17,Pap,IE) + u(18,Pap,IE) + u(19,Pap,IE) + u(20,Pap,IE) + u(21,Pap,IE) + u(22,Pap,IE) + u(23,Pap,IE) =E= 1 ; (LHS = 0, INFES = 1 ****)
     
Barges_sell(Pap,PA)..  u(1,Pap,PA) + u(2,Pap,PA) + u(3,Pap,PA) + u(4,Pap,PA) + u(5,Pap,PA) + u(6,Pap,PA) + u(7,Pap,PA) + u(8,Pap,PA) + u(9,Pap,PA) + u(10,Pap,PA) + u(11,Pap,PA) + u(12,Pap,PA) + u(13,Pap,PA) + u(14,Pap,PA) + u(15,Pap,PA) + u(16,Pap,PA)
     
      + u(17,Pap,PA) + u(18,Pap,PA) + u(19,Pap,PA) + u(20,Pap,PA) + u(21,Pap,PA) + u(22,Pap,PA) + u(23,Pap,PA) =E= 1 ; (LHS = 0, INFES = 1 ****)
     
Barges_sell(Pap,KI)..  u(1,Pap,KI) + u(2,Pap,KI) + u(3,Pap,KI) + u(4,Pap,KI) + u(5,Pap,KI) + u(6,Pap,KI) + u(7,Pap,KI) + u(8,Pap,KI) + u(9,Pap,KI) + u(10,Pap,KI) + u(11,Pap,KI) + u(12,Pap,KI) + u(13,Pap,KI) + u(14,Pap,KI) + u(15,Pap,KI) + u(16,Pap,KI)
     
      + u(17,Pap,KI) + u(18,Pap,KI) + u(19,Pap,KI) + u(20,Pap,KI) + u(21,Pap,KI) + u(22,Pap,KI) + u(23,Pap,KI) =E= 1 ; (LHS = 0, INFES = 1 ****)
     

---- SawmillCap  =L=  Maximum capacity of the saw mill

SawmillCap..  y(Mas) + y(Kus) + y(Kos) =L= 200000 ; (LHS = 0)
     

---- PlywoodCap  =L=  Maximum capacity of plywood mill

PlywoodCap..  y(Kuv) + y(Kov) =L= 90000 ; (LHS = 0)
     

---- HSELCap  =L=  Maximum capacity of HSEL production

HSELCap..  y(Hsel) =L= 220000 ; (LHS = 0)
     

---- LSELCap  =L=  Maximum capacity of LSEL production

LSELCap..  y(Lsel) =L= 180000 ; (LHS = 0)
     

---- PAPCap  =L=  Maximum capacity of PAP production

PAPCap..  y(Pap) =L= 80000 ; (LHS = 0)
     

---- PAP_HSEL  =L=  Proportion needed of HSEL for PAP

PAP_HSEL..  - y(Hsel) + 0.2*y(Pap) =L= 0 ; (LHS = 0)
     

---- PAP_LSEL  =L=  Proportion needed of LSEL for PAP

PAP_LSEL..  - y(Lsel) + 0.2*y(Pap) =L= 0 ; (LHS = 0)
     
GAMS 24.8.1  r59919 Released Dec 22, 2016 DEX-DEG x86 64bit/Mac OS X                                                                                                                                                                  01/17/17 22:39:53 Page 24
G e n e r a l   A l g e b r a i c   M o d e l i n g   S y s t e m
Equation Listing    SOLVE final Using MIP From line 358


---- PULP_Bal  =L=  Cant produce paper without pulp

PULP_Bal(Hsel)..  - y(Hsel) + 0.2*y(Pap) + 10000*u(2,Hsel,EU) + 10000*u(2,Hsel,IE) + 10000*u(2,Hsel,PA) + 10000*u(2,Hsel,KI) + 20000*u(3,Hsel,EU) + 20000*u(3,Hsel,IE) + 20000*u(3,Hsel,PA) + 20000*u(3,Hsel,KI) + 30000*u(4,Hsel,EU) + 30000*u(4,Hsel,IE)
     
      + 30000*u(4,Hsel,PA) + 30000*u(4,Hsel,KI) + 40000*u(5,Hsel,EU) + 40000*u(5,Hsel,IE) + 40000*u(5,Hsel,PA) + 40000*u(5,Hsel,KI) + 50000*u(6,Hsel,EU) + 50000*u(6,Hsel,IE) + 50000*u(6,Hsel,PA) + 50000*u(6,Hsel,KI) + 60000*u(7,Hsel,EU)
     
      + 60000*u(7,Hsel,IE) + 60000*u(7,Hsel,PA) + 60000*u(7,Hsel,KI) + 70000*u(8,Hsel,EU) + 70000*u(8,Hsel,IE) + 70000*u(8,Hsel,PA) + 70000*u(8,Hsel,KI) + 80000*u(9,Hsel,EU) + 80000*u(9,Hsel,IE) + 80000*u(9,Hsel,PA) + 80000*u(9,Hsel,KI)
     
      + 90000*u(10,Hsel,EU) + 90000*u(10,Hsel,IE) + 90000*u(10,Hsel,PA) + 90000*u(10,Hsel,KI) + 100000*u(11,Hsel,EU) + 100000*u(11,Hsel,IE) + 100000*u(11,Hsel,PA) + 100000*u(11,Hsel,KI) + 110000*u(12,Hsel,EU) + 110000*u(12,Hsel,IE) + 110000*u(12,Hsel,PA)
     
      + 110000*u(12,Hsel,KI) + 120000*u(13,Hsel,EU) + 120000*u(13,Hsel,IE) + 120000*u(13,Hsel,PA) + 120000*u(13,Hsel,KI) + 130000*u(14,Hsel,EU) + 130000*u(14,Hsel,IE) + 130000*u(14,Hsel,PA) + 130000*u(14,Hsel,KI) + 140000*u(15,Hsel,EU)
     
      + 140000*u(15,Hsel,IE) + 140000*u(15,Hsel,PA) + 140000*u(15,Hsel,KI) + 150000*u(16,Hsel,EU) + 150000*u(16,Hsel,IE) + 150000*u(16,Hsel,PA) + 150000*u(16,Hsel,KI) + 160000*u(17,Hsel,EU) + 160000*u(17,Hsel,IE) + 160000*u(17,Hsel,PA)
     
      + 160000*u(17,Hsel,KI) + 170000*u(18,Hsel,EU) + 170000*u(18,Hsel,IE) + 170000*u(18,Hsel,PA) + 170000*u(18,Hsel,KI) + 180000*u(19,Hsel,EU) + 180000*u(19,Hsel,IE) + 180000*u(19,Hsel,PA) + 180000*u(19,Hsel,KI) + 190000*u(20,Hsel,EU)
     
      + 190000*u(20,Hsel,IE) + 190000*u(20,Hsel,PA) + 190000*u(20,Hsel,KI) + 200000*u(21,Hsel,EU) + 200000*u(21,Hsel,IE) + 200000*u(21,Hsel,PA) + 200000*u(21,Hsel,KI) + 210000*u(22,Hsel,EU) + 210000*u(22,Hsel,IE) + 210000*u(22,Hsel,PA)
     
      + 210000*u(22,Hsel,KI) + 220000*u(23,Hsel,EU) + 220000*u(23,Hsel,IE) + 220000*u(23,Hsel,PA) + 220000*u(23,Hsel,KI) =L= 0 ; (LHS = 0)
     
PULP_Bal(Lsel)..  - y(Lsel) + 0.2*y(Pap) + 10000*u(2,Lsel,EU) + 10000*u(2,Lsel,IE) + 10000*u(2,Lsel,PA) + 10000*u(2,Lsel,KI) + 20000*u(3,Lsel,EU) + 20000*u(3,Lsel,IE) + 20000*u(3,Lsel,PA) + 20000*u(3,Lsel,KI) + 30000*u(4,Lsel,EU) + 30000*u(4,Lsel,IE)
     
      + 30000*u(4,Lsel,PA) + 30000*u(4,Lsel,KI) + 40000*u(5,Lsel,EU) + 40000*u(5,Lsel,IE) + 40000*u(5,Lsel,PA) + 40000*u(5,Lsel,KI) + 50000*u(6,Lsel,EU) + 50000*u(6,Lsel,IE) + 50000*u(6,Lsel,PA) + 50000*u(6,Lsel,KI) + 60000*u(7,Lsel,EU)
     
      + 60000*u(7,Lsel,IE) + 60000*u(7,Lsel,PA) + 60000*u(7,Lsel,KI) + 70000*u(8,Lsel,EU) + 70000*u(8,Lsel,IE) + 70000*u(8,Lsel,PA) + 70000*u(8,Lsel,KI) + 80000*u(9,Lsel,EU) + 80000*u(9,Lsel,IE) + 80000*u(9,Lsel,PA) + 80000*u(9,Lsel,KI)
     
      + 90000*u(10,Lsel,EU) + 90000*u(10,Lsel,IE) + 90000*u(10,Lsel,PA) + 90000*u(10,Lsel,KI) + 100000*u(11,Lsel,EU) + 100000*u(11,Lsel,IE) + 100000*u(11,Lsel,PA) + 100000*u(11,Lsel,KI) + 110000*u(12,Lsel,EU) + 110000*u(12,Lsel,IE) + 110000*u(12,Lsel,PA)
     
      + 110000*u(12,Lsel,KI) + 120000*u(13,Lsel,EU) + 120000*u(13,Lsel,IE) + 120000*u(13,Lsel,PA) + 120000*u(13,Lsel,KI) + 130000*u(14,Lsel,EU) + 130000*u(14,Lsel,IE) + 130000*u(14,Lsel,PA) + 130000*u(14,Lsel,KI) + 140000*u(15,Lsel,EU)
     
      + 140000*u(15,Lsel,IE) + 140000*u(15,Lsel,PA) + 140000*u(15,Lsel,KI) + 150000*u(16,Lsel,EU) + 150000*u(16,Lsel,IE) + 150000*u(16,Lsel,PA) + 150000*u(16,Lsel,KI) + 160000*u(17,Lsel,EU) + 160000*u(17,Lsel,IE) + 160000*u(17,Lsel,PA)
     
      + 160000*u(17,Lsel,KI) + 170000*u(18,Lsel,EU) + 170000*u(18,Lsel,IE) + 170000*u(18,Lsel,PA) + 170000*u(18,Lsel,KI) + 180000*u(19,Lsel,EU) + 180000*u(19,Lsel,IE) + 180000*u(19,Lsel,PA) + 180000*u(19,Lsel,KI) + 190000*u(20,Lsel,EU)
     
      + 190000*u(20,Lsel,IE) + 190000*u(20,Lsel,PA) + 190000*u(20,Lsel,KI) + 200000*u(21,Lsel,EU) + 200000*u(21,Lsel,IE) + 200000*u(21,Lsel,PA) + 200000*u(21,Lsel,KI) + 210000*u(22,Lsel,EU) + 210000*u(22,Lsel,IE) + 210000*u(22,Lsel,PA)
     
      + 210000*u(22,Lsel,KI) + 220000*u(23,Lsel,EU) + 220000*u(23,Lsel,IE) + 220000*u(23,Lsel,PA) + 220000*u(23,Lsel,KI) =L= 0 ; (LHS = 0)
     
GAMS 24.8.1  r59919 Released Dec 22, 2016 DEX-DEG x86 64bit/Mac OS X                                                                                                                                                                  01/17/17 22:39:53 Page 25
G e n e r a l   A l g e b r a i c   M o d e l i n g   S y s t e m
Column Listing      SOLVE final Using MIP From line 358


---- z  the objective

z
                (.LO, .L, .UP, .M = -INF, 0, +INF, 0)
        1       obj


---- y  Cubic meters produced of product j

y(Mas)
                (.LO, .L, .UP, .M = 0, 0, 1060000, 0)
        0.542   obj
        2       timber_used(Mat)
       -0.8     timber_used(Mak)
       -1       Sold_Prod(Mas)
        1       SawmillCap

y(Kus)
                (.LO, .L, .UP, .M = 0, 0, 1060000, 0)
        0.492   obj
        2       timber_used(Kut)
       -0.8     timber_used(Kuk)
       -1       Sold_Prod(Kus)
        1       SawmillCap

y(Kos)
                (.LO, .L, .UP, .M = 0, 0, 1060000, 0)
        0.442   obj
        2       timber_used(Kot)
       -0.8     timber_used(Kok)
       -1       Sold_Prod(Kos)
        1       SawmillCap

y(Kuv)
                (.LO, .L, .UP, .M = 0, 0, 1060000, 0)
        0.242   obj
        2.8     timber_used(Kut)
       -1.6     timber_used(Kuk)
       -1       Sold_Prod(Kuv)
        1       PlywoodCap

y(Kov)
                (.LO, .L, .UP, .M = 0, 0, 1060000, 0)
        0.252   obj
        2.8     timber_used(Kot)
       -1.6     timber_used(Kok)
       -1       Sold_Prod(Kov)
        1       PlywoodCap

y(Hsel)
                (.LO, .L, .UP, .M = 0, 0, 1060000, 0)
        0.82    obj
        4.8     timber_used(Mak)
GAMS 24.8.1  r59919 Released Dec 22, 2016 DEX-DEG x86 64bit/Mac OS X                                                                                                                                                                  01/17/17 22:39:53 Page 26
G e n e r a l   A l g e b r a i c   M o d e l i n g   S y s t e m
Column Listing      SOLVE final Using MIP From line 358


     y  Cubic meters produced of product j

       -1       Sold_Prod(Hsel)
        1       HSELCap
       -1       PAP_HSEL
       -1       PULP_Bal(Hsel)

y(Lsel)
                (.LO, .L, .UP, .M = 0, 0, 1060000, 0)
        0.8     obj
        4.2     timber_used(Kok)
       -1       Sold_Prod(Lsel)
        1       LSELCap
       -1       PAP_LSEL
       -1       PULP_Bal(Lsel)

y(Pap)
                (.LO, .L, .UP, .M = 0, 0, 1060000, 0)
        1.7     obj
        1       timber_used(Kuk)
       -1       Sold_Prod(Pap)
        1       PAPCap
        0.2     PAP_HSEL
        0.2     PAP_LSEL
        0.2     PULP_Bal(Hsel)
        0.2     PULP_Bal(Lsel)


---- s  amount of timber i used to make products

s(Mat)
                (.LO, .L, .UP, .M = 0, 0, +INF, 0)
        0.19    obj
       -1       timber_used(Mat)
       -1       prod_starved(Mat)

s(Kut)
                (.LO, .L, .UP, .M = 0, 0, +INF, 0)
        0.15    obj
       -1       timber_used(Kut)
       -1       prod_starved(Kut)

s(Kot)
                (.LO, .L, .UP, .M = 0, 0, +INF, 0)
        0.12    obj
       -1       timber_used(Kot)
       -1       prod_starved(Kot)

s(Mak)
                (.LO, .L, .UP, .M = 0, 0, +INF, 0)
        0.18    obj
       -1       timber_used(Mak)
       -1       prod_starved(Mak)
GAMS 24.8.1  r59919 Released Dec 22, 2016 DEX-DEG x86 64bit/Mac OS X                                                                                                                                                                  01/17/17 22:39:53 Page 27
G e n e r a l   A l g e b r a i c   M o d e l i n g   S y s t e m
Column Listing      SOLVE final Using MIP From line 358


     s  amount of timber i used to make products


s(Kuk)
                (.LO, .L, .UP, .M = 0, 0, +INF, 0)
        0.15    obj
       -1       timber_used(Kuk)
       -1       prod_starved(Kuk)

s(Kok)
                (.LO, .L, .UP, .M = 0, 0, +INF, 0)
        0.15    obj
       -1       timber_used(Kok)
       -1       prod_starved(Kok)


---- r  1 if we buy n boats of timber i, 0 otherwise

r(1,Mat)
                (.LO, .L, .UP, .M = 0, 0, 1, 0)
        1       Barges_buy(Mat)

r(1,Kut)
                (.LO, .L, .UP, .M = 0, 0, 1, 0)
        1       Barges_buy(Kut)

r(1,Kot)
                (.LO, .L, .UP, .M = 0, 0, 1, 0)
        1       Barges_buy(Kot)

r(1,Mak)
                (.LO, .L, .UP, .M = 0, 0, 1, 0)
        1       Barges_buy(Mak)

r(1,Kuk)
                (.LO, .L, .UP, .M = 0, 0, 1, 0)
        1       Barges_buy(Kuk)

r(1,Kok)
                (.LO, .L, .UP, .M = 0, 0, 1, 0)
        1       Barges_buy(Kok)

r(2,Mat)
                (.LO, .L, .UP, .M = 0, 0, 1, 0)
     2000       obj
    10000       prod_starved(Mat)
   -10000       timber_bought(Mat)
        1       Barges_buy(Mat)

r(2,Kut)
                (.LO, .L, .UP, .M = 0, 0, 1, 0)
     1550       obj
    10000       prod_starved(Kut)
GAMS 24.8.1  r59919 Released Dec 22, 2016 DEX-DEG x86 64bit/Mac OS X                                                                                                                                                                  01/17/17 22:39:53 Page 28
G e n e r a l   A l g e b r a i c   M o d e l i n g   S y s t e m
Column Listing      SOLVE final Using MIP From line 358


     r  1 if we buy n boats of timber i, 0 otherwise

   -10000       timber_bought(Kut)
        1       Barges_buy(Kut)

r(2,Kot)
                (.LO, .L, .UP, .M = 0, 0, 1, 0)
     1500       obj
    10000       prod_starved(Kot)
   -10000       timber_bought(Kot)
        1       Barges_buy(Kot)

r(2,Mak)
                (.LO, .L, .UP, .M = 0, 0, 1, 0)
     1820       obj
    10000       prod_starved(Mak)
   -10000       timber_bought(Mak)
        1       Barges_buy(Mak)

r(2,Kuk)
                (.LO, .L, .UP, .M = 0, 0, 1, 0)
     1530       obj
    10000       prod_starved(Kuk)
   -10000       timber_bought(Kuk)
        1       Barges_buy(Kuk)

r(2,Kok)
                (.LO, .L, .UP, .M = 0, 0, 1, 0)
     1520       obj
    10000       prod_starved(Kok)
   -10000       timber_bought(Kok)
        1       Barges_buy(Kok)

r(3,Mat)
                (.LO, .L, .UP, .M = 0, 0, 1, 0)
     4200       obj
    20000       prod_starved(Mat)
   -20000       timber_bought(Mat)
        1       Barges_buy(Mat)

r(3,Kut)
                (.LO, .L, .UP, .M = 0, 0, 1, 0)
     3200       obj
    20000       prod_starved(Kut)
   -20000       timber_bought(Kut)
        1       Barges_buy(Kut)

r(3,Kot)
                (.LO, .L, .UP, .M = 0, 0, 1, 0)
     3600       obj
    20000       prod_starved(Kot)
   -20000       timber_bought(Kot)
        1       Barges_buy(Kot)
GAMS 24.8.1  r59919 Released Dec 22, 2016 DEX-DEG x86 64bit/Mac OS X                                                                                                                                                                  01/17/17 22:39:53 Page 29
G e n e r a l   A l g e b r a i c   M o d e l i n g   S y s t e m
Column Listing      SOLVE final Using MIP From line 358


     r  1 if we buy n boats of timber i, 0 otherwise


r(3,Mak)
                (.LO, .L, .UP, .M = 0, 0, 1, 0)
     3680       obj
    20000       prod_starved(Mak)
   -20000       timber_bought(Mak)
        1       Barges_buy(Mak)

r(3,Kuk)
                (.LO, .L, .UP, .M = 0, 0, 1, 0)
     3120       obj
    20000       prod_starved(Kuk)
   -20000       timber_bought(Kuk)
        1       Barges_buy(Kuk)

r(3,Kok)
                (.LO, .L, .UP, .M = 0, 0, 1, 0)
     3080       obj
    20000       prod_starved(Kok)
   -20000       timber_bought(Kok)
        1       Barges_buy(Kok)

r(4,Mat)
                (.LO, .L, .UP, .M = 0, 0, 1, 0)
     6600       obj
    30000       prod_starved(Mat)
   -30000       timber_bought(Mat)
        1       Barges_buy(Mat)

r(4,Kut)
                (.LO, .L, .UP, .M = 0, 0, 1, 0)
     4950       obj
    30000       prod_starved(Kut)
   -30000       timber_bought(Kut)
        1       Barges_buy(Kut)

r(4,Kot)
                (.LO, .L, .UP, .M = 0, 0, 1, 0)
     6300       obj
    30000       prod_starved(Kot)
   -30000       timber_bought(Kot)
        1       Barges_buy(Kot)

r(4,Mak)
                (.LO, .L, .UP, .M = 0, 0, 1, 0)
     5580       obj
    30000       prod_starved(Mak)
   -30000       timber_bought(Mak)
        1       Barges_buy(Mak)

r(4,Kuk)
GAMS 24.8.1  r59919 Released Dec 22, 2016 DEX-DEG x86 64bit/Mac OS X                                                                                                                                                                  01/17/17 22:39:53 Page 30
G e n e r a l   A l g e b r a i c   M o d e l i n g   S y s t e m
Column Listing      SOLVE final Using MIP From line 358


     r  1 if we buy n boats of timber i, 0 otherwise

                (.LO, .L, .UP, .M = 0, 0, 1, 0)
     4770       obj
    30000       prod_starved(Kuk)
   -30000       timber_bought(Kuk)
        1       Barges_buy(Kuk)

r(4,Kok)
                (.LO, .L, .UP, .M = 0, 0, 1, 0)
     4680       obj
    30000       prod_starved(Kok)
   -30000       timber_bought(Kok)
        1       Barges_buy(Kok)

r(5,Mat)
                (.LO, .L, .UP, .M = 0, 0, 1, 0)
     9200       obj
    40000       prod_starved(Mat)
   -40000       timber_bought(Mat)
        1       Barges_buy(Mat)

r(5,Kut)
                (.LO, .L, .UP, .M = 0, 0, 1, 0)
     6800       obj
    40000       prod_starved(Kut)
   -40000       timber_bought(Kut)
        1       Barges_buy(Kut)

r(5,Kot)
                (.LO, .L, .UP, .M = 0, 0, 1, 0)
     9600       obj
    40000       prod_starved(Kot)
   -40000       timber_bought(Kot)
        1       Barges_buy(Kot)

r(5,Mak)
                (.LO, .L, .UP, .M = 0, 0, 1, 0)
     7520       obj
    40000       prod_starved(Mak)
   -40000       timber_bought(Mak)
        1       Barges_buy(Mak)

r(5,Kuk)
                (.LO, .L, .UP, .M = 0, 0, 1, 0)
     6480       obj
    40000       prod_starved(Kuk)
   -40000       timber_bought(Kuk)
        1       Barges_buy(Kuk)

r(5,Kok)
                (.LO, .L, .UP, .M = 0, 0, 1, 0)
     6320       obj
GAMS 24.8.1  r59919 Released Dec 22, 2016 DEX-DEG x86 64bit/Mac OS X                                                                                                                                                                  01/17/17 22:39:53 Page 31
G e n e r a l   A l g e b r a i c   M o d e l i n g   S y s t e m
Column Listing      SOLVE final Using MIP From line 358


     r  1 if we buy n boats of timber i, 0 otherwise

    40000       prod_starved(Kok)
   -40000       timber_bought(Kok)
        1       Barges_buy(Kok)

r(6,Mat)
                (.LO, .L, .UP, .M = 0, 0, 1, 0)
    12000       obj
    50000       prod_starved(Mat)
   -50000       timber_bought(Mat)
        1       Barges_buy(Mat)

r(6,Kut)
                (.LO, .L, .UP, .M = 0, 0, 1, 0)
     8750       obj
    50000       prod_starved(Kut)
   -50000       timber_bought(Kut)
        1       Barges_buy(Kut)

r(6,Kot)
                (.LO, .L, .UP, .M = 0, 0, 1, 0)
    13500       obj
    50000       prod_starved(Kot)
   -50000       timber_bought(Kot)
        1       Barges_buy(Kot)

r(6,Mak)
                (.LO, .L, .UP, .M = 0, 0, 1, 0)
     9500       obj
    50000       prod_starved(Mak)
   -50000       timber_bought(Mak)
        1       Barges_buy(Mak)

r(6,Kuk)
                (.LO, .L, .UP, .M = 0, 0, 1, 0)
     8250       obj
    50000       prod_starved(Kuk)
   -50000       timber_bought(Kuk)
        1       Barges_buy(Kuk)

r(6,Kok)
                (.LO, .L, .UP, .M = 0, 0, 1, 0)
     8000       obj
    50000       prod_starved(Kok)
   -50000       timber_bought(Kok)
        1       Barges_buy(Kok)

r(7,Mat)
                (.LO, .L, .UP, .M = 0, 0, 1, 0)
    15000       obj
    60000       prod_starved(Mat)
   -60000       timber_bought(Mat)
GAMS 24.8.1  r59919 Released Dec 22, 2016 DEX-DEG x86 64bit/Mac OS X                                                                                                                                                                  01/17/17 22:39:53 Page 32
G e n e r a l   A l g e b r a i c   M o d e l i n g   S y s t e m
Column Listing      SOLVE final Using MIP From line 358


     r  1 if we buy n boats of timber i, 0 otherwise

        1       Barges_buy(Mat)

r(7,Kut)
                (.LO, .L, .UP, .M = 0, 0, 1, 0)
    10800       obj
    60000       prod_starved(Kut)
   -60000       timber_bought(Kut)
        1       Barges_buy(Kut)

r(7,Kot)
                (.LO, .L, .UP, .M = 0, 0, 1, 0)
    18000       obj
    60000       prod_starved(Kot)
   -60000       timber_bought(Kot)
        1       Barges_buy(Kot)

r(7,Mak)
                (.LO, .L, .UP, .M = 0, 0, 1, 0)
    11520       obj
    60000       prod_starved(Mak)
   -60000       timber_bought(Mak)
        1       Barges_buy(Mak)

r(7,Kuk)
                (.LO, .L, .UP, .M = 0, 0, 1, 0)
    10080       obj
    60000       prod_starved(Kuk)
   -60000       timber_bought(Kuk)
        1       Barges_buy(Kuk)

r(7,Kok)
                (.LO, .L, .UP, .M = 0, 0, 1, 0)
     9720       obj
    60000       prod_starved(Kok)
   -60000       timber_bought(Kok)
        1       Barges_buy(Kok)

r(8,Mat)
                (.LO, .L, .UP, .M = 0, 0, 1, 0)
    18200       obj
    70000       prod_starved(Mat)
   -70000       timber_bought(Mat)
        1       Barges_buy(Mat)

r(8,Kut)
                (.LO, .L, .UP, .M = 0, 0, 1, 0)
    12950       obj
    70000       prod_starved(Kut)
   -70000       timber_bought(Kut)
        1       Barges_buy(Kut)

GAMS 24.8.1  r59919 Released Dec 22, 2016 DEX-DEG x86 64bit/Mac OS X                                                                                                                                                                  01/17/17 22:39:53 Page 33
G e n e r a l   A l g e b r a i c   M o d e l i n g   S y s t e m
Column Listing      SOLVE final Using MIP From line 358


     r  1 if we buy n boats of timber i, 0 otherwise

r(8,Kot)
                (.LO, .L, .UP, .M = 0, 0, 1, 0)
    23100       obj
    70000       prod_starved(Kot)
   -70000       timber_bought(Kot)
        1       Barges_buy(Kot)

r(8,Mak)
                (.LO, .L, .UP, .M = 0, 0, 1, 0)
    13580       obj
    70000       prod_starved(Mak)
   -70000       timber_bought(Mak)
        1       Barges_buy(Mak)

r(8,Kuk)
                (.LO, .L, .UP, .M = 0, 0, 1, 0)
    11970       obj
    70000       prod_starved(Kuk)
   -70000       timber_bought(Kuk)
        1       Barges_buy(Kuk)

r(8,Kok)
                (.LO, .L, .UP, .M = 0, 0, 1, 0)
    11480       obj
    70000       prod_starved(Kok)
   -70000       timber_bought(Kok)
        1       Barges_buy(Kok)

r(9,Mat)
                (.LO, .L, .UP, .M = 0, 0, 1, 0)
    21600       obj
    80000       prod_starved(Mat)
   -80000       timber_bought(Mat)
        1       Barges_buy(Mat)

r(9,Kut)
                (.LO, .L, .UP, .M = 0, 0, 1, 0)
    15200       obj
    80000       prod_starved(Kut)
   -80000       timber_bought(Kut)
        1       Barges_buy(Kut)

r(9,Kot)
                (.LO, .L, .UP, .M = 0, 0, 1, 0)
    28800       obj
    80000       prod_starved(Kot)
   -80000       timber_bought(Kot)
        1       Barges_buy(Kot)

r(9,Mak)
                (.LO, .L, .UP, .M = 0, 0, 1, 0)
GAMS 24.8.1  r59919 Released Dec 22, 2016 DEX-DEG x86 64bit/Mac OS X                                                                                                                                                                  01/17/17 22:39:53 Page 34
G e n e r a l   A l g e b r a i c   M o d e l i n g   S y s t e m
Column Listing      SOLVE final Using MIP From line 358


     r  1 if we buy n boats of timber i, 0 otherwise

    15680       obj
    80000       prod_starved(Mak)
   -80000       timber_bought(Mak)
        1       Barges_buy(Mak)

r(9,Kuk)
                (.LO, .L, .UP, .M = 0, 0, 1, 0)
    13920       obj
    80000       prod_starved(Kuk)
   -80000       timber_bought(Kuk)
        1       Barges_buy(Kuk)

r(9,Kok)
                (.LO, .L, .UP, .M = 0, 0, 1, 0)
    13280       obj
    80000       prod_starved(Kok)
   -80000       timber_bought(Kok)
        1       Barges_buy(Kok)

r(10,Mat)
                (.LO, .L, .UP, .M = 0, 0, 1, 0)
    25200       obj
    90000       prod_starved(Mat)
   -90000       timber_bought(Mat)
        1       Barges_buy(Mat)

r(10,Kut)
                (.LO, .L, .UP, .M = 0, 0, 1, 0)
    17550       obj
    90000       prod_starved(Kut)
   -90000       timber_bought(Kut)
        1       Barges_buy(Kut)

r(10,Kot)
                (.LO, .L, .UP, .M = 0, 0, 1, 0)
    35100       obj
    90000       prod_starved(Kot)
   -90000       timber_bought(Kot)
        1       Barges_buy(Kot)

r(10,Mak)
                (.LO, .L, .UP, .M = 0, 0, 1, 0)
    17820       obj
    90000       prod_starved(Mak)
   -90000       timber_bought(Mak)
        1       Barges_buy(Mak)

r(10,Kuk)
                (.LO, .L, .UP, .M = 0, 0, 1, 0)
    15930       obj
    90000       prod_starved(Kuk)
GAMS 24.8.1  r59919 Released Dec 22, 2016 DEX-DEG x86 64bit/Mac OS X                                                                                                                                                                  01/17/17 22:39:53 Page 35
G e n e r a l   A l g e b r a i c   M o d e l i n g   S y s t e m
Column Listing      SOLVE final Using MIP From line 358


     r  1 if we buy n boats of timber i, 0 otherwise

   -90000       timber_bought(Kuk)
        1       Barges_buy(Kuk)

r(10,Kok)
                (.LO, .L, .UP, .M = 0, 0, 1, 0)
    15120       obj
    90000       prod_starved(Kok)
   -90000       timber_bought(Kok)
        1       Barges_buy(Kok)

r(11,Mat)
                (.LO, .L, .UP, .M = 0, 0, 1, 0)
    29000       obj
   100000       prod_starved(Mat)
  -100000       timber_bought(Mat)
        1       Barges_buy(Mat)

r(11,Kut)
                (.LO, .L, .UP, .M = 0, 0, 1, 0)
    20000       obj
   100000       prod_starved(Kut)
  -100000       timber_bought(Kut)
        1       Barges_buy(Kut)

r(11,Kot)
                (.LO, .L, .UP, .M = 0, 0, 1, 0)
    42000       obj
   100000       prod_starved(Kot)
  -100000       timber_bought(Kot)
        1       Barges_buy(Kot)

r(11,Mak)
                (.LO, .L, .UP, .M = 0, 0, 1, 0)
    20000       obj
   100000       prod_starved(Mak)
  -100000       timber_bought(Mak)
        1       Barges_buy(Mak)

r(11,Kuk)
                (.LO, .L, .UP, .M = 0, 0, 1, 0)
    18000       obj
   100000       prod_starved(Kuk)
  -100000       timber_bought(Kuk)
        1       Barges_buy(Kuk)

r(11,Kok)
                (.LO, .L, .UP, .M = 0, 0, 1, 0)
    17000       obj
   100000       prod_starved(Kok)
  -100000       timber_bought(Kok)
        1       Barges_buy(Kok)
GAMS 24.8.1  r59919 Released Dec 22, 2016 DEX-DEG x86 64bit/Mac OS X                                                                                                                                                                  01/17/17 22:39:53 Page 36
G e n e r a l   A l g e b r a i c   M o d e l i n g   S y s t e m
Column Listing      SOLVE final Using MIP From line 358


     r  1 if we buy n boats of timber i, 0 otherwise


r(12,Mat)
                (.LO, .L, .UP, .M = 0, 0, 1, 0)
    33000       obj
   110000       prod_starved(Mat)
  -110000       timber_bought(Mat)
        1       Barges_buy(Mat)

r(12,Kut)
                (.LO, .L, .UP, .M = 0, 0, 1, 0)
    22550       obj
   110000       prod_starved(Kut)
  -110000       timber_bought(Kut)
        1       Barges_buy(Kut)

r(12,Kot)
                (.LO, .L, .UP, .M = 0, 0, 1, 0)
    49500       obj
   110000       prod_starved(Kot)
  -110000       timber_bought(Kot)
        1       Barges_buy(Kot)

r(12,Mak)
                (.LO, .L, .UP, .M = 0, 0, 1, 0)
    22220       obj
   110000       prod_starved(Mak)
  -110000       timber_bought(Mak)
        1       Barges_buy(Mak)

r(12,Kuk)
                (.LO, .L, .UP, .M = 0, 0, 1, 0)
    20130       obj
   110000       prod_starved(Kuk)
  -110000       timber_bought(Kuk)
        1       Barges_buy(Kuk)

r(12,Kok)
                (.LO, .L, .UP, .M = 0, 0, 1, 0)
    18920       obj
   110000       prod_starved(Kok)
  -110000       timber_bought(Kok)
        1       Barges_buy(Kok)

r(13,Mat)
                (.LO, .L, .UP, .M = 0, 0, 1, 0)
    37200       obj
   120000       prod_starved(Mat)
  -120000       timber_bought(Mat)
        1       Barges_buy(Mat)

r(13,Kut)
GAMS 24.8.1  r59919 Released Dec 22, 2016 DEX-DEG x86 64bit/Mac OS X                                                                                                                                                                  01/17/17 22:39:53 Page 37
G e n e r a l   A l g e b r a i c   M o d e l i n g   S y s t e m
Column Listing      SOLVE final Using MIP From line 358


     r  1 if we buy n boats of timber i, 0 otherwise

                (.LO, .L, .UP, .M = 0, 0, 1, 0)
    25200       obj
   120000       prod_starved(Kut)
  -120000       timber_bought(Kut)
        1       Barges_buy(Kut)

r(13,Kot)
                (.LO, .L, .UP, .M = 0, 0, 1, 0)
    57600       obj
   120000       prod_starved(Kot)
  -120000       timber_bought(Kot)
        1       Barges_buy(Kot)

r(13,Mak)
                (.LO, .L, .UP, .M = 0, 0, 1, 0)
    24480       obj
   120000       prod_starved(Mak)
  -120000       timber_bought(Mak)
        1       Barges_buy(Mak)

r(13,Kuk)
                (.LO, .L, .UP, .M = 0, 0, 1, 0)
    22320       obj
   120000       prod_starved(Kuk)
  -120000       timber_bought(Kuk)
        1       Barges_buy(Kuk)

r(13,Kok)
                (.LO, .L, .UP, .M = 0, 0, 1, 0)
    20880       obj
   120000       prod_starved(Kok)
  -120000       timber_bought(Kok)
        1       Barges_buy(Kok)

r(14,Mat)
                (.LO, .L, .UP, .M = 0, 0, 1, 0)
    41600       obj
   130000       prod_starved(Mat)
  -130000       timber_bought(Mat)
        1       Barges_buy(Mat)

r(14,Kut)
                (.LO, .L, .UP, .M = 0, 0, 1, 0)
    27950       obj
   130000       prod_starved(Kut)
  -130000       timber_bought(Kut)
        1       Barges_buy(Kut)

r(14,Kot)
                (.LO, .L, .UP, .M = 0, 0, 1, 0)
    66300       obj
GAMS 24.8.1  r59919 Released Dec 22, 2016 DEX-DEG x86 64bit/Mac OS X                                                                                                                                                                  01/17/17 22:39:53 Page 38
G e n e r a l   A l g e b r a i c   M o d e l i n g   S y s t e m
Column Listing      SOLVE final Using MIP From line 358


     r  1 if we buy n boats of timber i, 0 otherwise

   130000       prod_starved(Kot)
  -130000       timber_bought(Kot)
        1       Barges_buy(Kot)

r(14,Mak)
                (.LO, .L, .UP, .M = 0, 0, 1, 0)
    26780       obj
   130000       prod_starved(Mak)
  -130000       timber_bought(Mak)
        1       Barges_buy(Mak)

r(14,Kuk)
                (.LO, .L, .UP, .M = 0, 0, 1, 0)
    24570       obj
   130000       prod_starved(Kuk)
  -130000       timber_bought(Kuk)
        1       Barges_buy(Kuk)

r(14,Kok)
                (.LO, .L, .UP, .M = 0, 0, 1, 0)
    22880       obj
   130000       prod_starved(Kok)
  -130000       timber_bought(Kok)
        1       Barges_buy(Kok)

r(15,Mat)
                (.LO, .L, .UP, .M = 0, 0, 1, 0)
    46200       obj
   140000       prod_starved(Mat)
  -140000       timber_bought(Mat)
        1       Barges_buy(Mat)

r(15,Kut)
                (.LO, .L, .UP, .M = 0, 0, 1, 0)
    30800       obj
   140000       prod_starved(Kut)
  -140000       timber_bought(Kut)
        1       Barges_buy(Kut)

r(15,Kot)
                (.LO, .L, .UP, .M = 0, 0, 1, 0)
    75600       obj
   140000       prod_starved(Kot)
  -140000       timber_bought(Kot)
        1       Barges_buy(Kot)

r(15,Mak)
                (.LO, .L, .UP, .M = 0, 0, 1, 0)
    29120       obj
   140000       prod_starved(Mak)
  -140000       timber_bought(Mak)
GAMS 24.8.1  r59919 Released Dec 22, 2016 DEX-DEG x86 64bit/Mac OS X                                                                                                                                                                  01/17/17 22:39:53 Page 39
G e n e r a l   A l g e b r a i c   M o d e l i n g   S y s t e m
Column Listing      SOLVE final Using MIP From line 358


     r  1 if we buy n boats of timber i, 0 otherwise

        1       Barges_buy(Mak)

r(15,Kuk)
                (.LO, .L, .UP, .M = 0, 0, 1, 0)
    26880       obj
   140000       prod_starved(Kuk)
  -140000       timber_bought(Kuk)
        1       Barges_buy(Kuk)

r(15,Kok)
                (.LO, .L, .UP, .M = 0, 0, 1, 0)
    24920       obj
   140000       prod_starved(Kok)
  -140000       timber_bought(Kok)
        1       Barges_buy(Kok)

r(16,Mat)
                (.LO, .L, .UP, .M = 0, 0, 1, 0)
    51000       obj
   150000       prod_starved(Mat)
  -150000       timber_bought(Mat)
        1       Barges_buy(Mat)

r(16,Kut)
                (.LO, .L, .UP, .M = 0, 0, 1, 0)
    33750       obj
   150000       prod_starved(Kut)
  -150000       timber_bought(Kut)
        1       Barges_buy(Kut)

r(16,Kot)
                (.LO, .L, .UP, .M = 0, 0, 1, 0)
    85500       obj
   150000       prod_starved(Kot)
  -150000       timber_bought(Kot)
        1       Barges_buy(Kot)

r(16,Mak)
                (.LO, .L, .UP, .M = 0, 0, 1, 0)
    31500       obj
   150000       prod_starved(Mak)
  -150000       timber_bought(Mak)
        1       Barges_buy(Mak)

r(16,Kuk)
                (.LO, .L, .UP, .M = 0, 0, 1, 0)
    29250       obj
   150000       prod_starved(Kuk)
  -150000       timber_bought(Kuk)
        1       Barges_buy(Kuk)

GAMS 24.8.1  r59919 Released Dec 22, 2016 DEX-DEG x86 64bit/Mac OS X                                                                                                                                                                  01/17/17 22:39:53 Page 40
G e n e r a l   A l g e b r a i c   M o d e l i n g   S y s t e m
Column Listing      SOLVE final Using MIP From line 358


     r  1 if we buy n boats of timber i, 0 otherwise

r(16,Kok)
                (.LO, .L, .UP, .M = 0, 0, 1, 0)
    27000       obj
   150000       prod_starved(Kok)
  -150000       timber_bought(Kok)
        1       Barges_buy(Kok)

r(17,Mat)
                (.LO, .L, .UP, .M = 0, 0, 1, 0)
    56000       obj
   160000       prod_starved(Mat)
  -160000       timber_bought(Mat)
        1       Barges_buy(Mat)

r(17,Kut)
                (.LO, .L, .UP, .M = 0, 0, 1, 0)
    36800       obj
   160000       prod_starved(Kut)
  -160000       timber_bought(Kut)
        1       Barges_buy(Kut)

r(17,Kot)
                (.LO, .L, .UP, .M = 0, 0, 1, 0)
    96000       obj
   160000       prod_starved(Kot)
  -160000       timber_bought(Kot)
        1       Barges_buy(Kot)

r(17,Mak)
                (.LO, .L, .UP, .M = 0, 0, 1, 0)
    33920       obj
   160000       prod_starved(Mak)
  -160000       timber_bought(Mak)
        1       Barges_buy(Mak)

REMAINING 542 ENTRIES SKIPPED

---- u  1 if we use n boats for product j shiping to region k, 0 otherwise

u(1,Mas,EU)
                (.LO, .L, .UP, .M = 0, 0, 1, 0)
        1       Barges_sell(Mas,EU)

u(1,Mas,IE)
                (.LO, .L, .UP, .M = 0, 0, 1, 0)
        1       Barges_sell(Mas,IE)

u(1,Mas,PA)
                (.LO, .L, .UP, .M = 0, 0, 1, 0)
        1       Barges_sell(Mas,PA)

GAMS 24.8.1  r59919 Released Dec 22, 2016 DEX-DEG x86 64bit/Mac OS X                                                                                                                                                                  01/17/17 22:39:53 Page 41
G e n e r a l   A l g e b r a i c   M o d e l i n g   S y s t e m
Column Listing      SOLVE final Using MIP From line 358


     u  1 if we use n boats for product j shiping to region k, 0 otherwise

u(1,Mas,KI)
                (.LO, .L, .UP, .M = 0, 0, 1, 0)
        1       Barges_sell(Mas,KI)

u(1,Kus,EU)
                (.LO, .L, .UP, .M = 0, 0, 1, 0)
        1       Barges_sell(Kus,EU)

u(1,Kus,IE)
                (.LO, .L, .UP, .M = 0, 0, 1, 0)
        1       Barges_sell(Kus,IE)

u(1,Kus,PA)
                (.LO, .L, .UP, .M = 0, 0, 1, 0)
        1       Barges_sell(Kus,PA)

u(1,Kus,KI)
                (.LO, .L, .UP, .M = 0, 0, 1, 0)
        1       Barges_sell(Kus,KI)

u(1,Kos,EU)
                (.LO, .L, .UP, .M = 0, 0, 1, 0)
        1       Barges_sell(Kos,EU)

u(1,Kos,IE)
                (.LO, .L, .UP, .M = 0, 0, 1, 0)
        1       Barges_sell(Kos,IE)

u(1,Kos,PA)
                (.LO, .L, .UP, .M = 0, 0, 1, 0)
        1       Barges_sell(Kos,PA)

u(1,Kos,KI)
                (.LO, .L, .UP, .M = 0, 0, 1, 0)
        1       Barges_sell(Kos,KI)

u(1,Kuv,EU)
                (.LO, .L, .UP, .M = 0, 0, 1, 0)
        1       Barges_sell(Kuv,EU)

u(1,Kuv,IE)
                (.LO, .L, .UP, .M = 0, 0, 1, 0)
        1       Barges_sell(Kuv,IE)

u(1,Kuv,PA)
                (.LO, .L, .UP, .M = 0, 0, 1, 0)
        1       Barges_sell(Kuv,PA)

u(1,Kuv,KI)
                (.LO, .L, .UP, .M = 0, 0, 1, 0)
        1       Barges_sell(Kuv,KI)
GAMS 24.8.1  r59919 Released Dec 22, 2016 DEX-DEG x86 64bit/Mac OS X                                                                                                                                                                  01/17/17 22:39:53 Page 42
G e n e r a l   A l g e b r a i c   M o d e l i n g   S y s t e m
Column Listing      SOLVE final Using MIP From line 358


     u  1 if we use n boats for product j shiping to region k, 0 otherwise


u(1,Kov,EU)
                (.LO, .L, .UP, .M = 0, 0, 1, 0)
        1       Barges_sell(Kov,EU)

u(1,Kov,IE)
                (.LO, .L, .UP, .M = 0, 0, 1, 0)
        1       Barges_sell(Kov,IE)

u(1,Kov,PA)
                (.LO, .L, .UP, .M = 0, 0, 1, 0)
        1       Barges_sell(Kov,PA)

u(1,Kov,KI)
                (.LO, .L, .UP, .M = 0, 0, 1, 0)
        1       Barges_sell(Kov,KI)

u(1,Hsel,EU)
                (.LO, .L, .UP, .M = 0, 0, 1, 0)
        1       Barges_sell(Hsel,EU)

u(1,Hsel,IE)
                (.LO, .L, .UP, .M = 0, 0, 1, 0)
        1       Barges_sell(Hsel,IE)

u(1,Hsel,PA)
                (.LO, .L, .UP, .M = 0, 0, 1, 0)
        1       Barges_sell(Hsel,PA)

u(1,Hsel,KI)
                (.LO, .L, .UP, .M = 0, 0, 1, 0)
        1       Barges_sell(Hsel,KI)

u(1,Lsel,EU)
                (.LO, .L, .UP, .M = 0, 0, 1, 0)
        1       Barges_sell(Lsel,EU)

u(1,Lsel,IE)
                (.LO, .L, .UP, .M = 0, 0, 1, 0)
        1       Barges_sell(Lsel,IE)

u(1,Lsel,PA)
                (.LO, .L, .UP, .M = 0, 0, 1, 0)
        1       Barges_sell(Lsel,PA)

u(1,Lsel,KI)
                (.LO, .L, .UP, .M = 0, 0, 1, 0)
        1       Barges_sell(Lsel,KI)

u(1,Pap,EU)
                (.LO, .L, .UP, .M = 0, 0, 1, 0)
GAMS 24.8.1  r59919 Released Dec 22, 2016 DEX-DEG x86 64bit/Mac OS X                                                                                                                                                                  01/17/17 22:39:53 Page 43
G e n e r a l   A l g e b r a i c   M o d e l i n g   S y s t e m
Column Listing      SOLVE final Using MIP From line 358


     u  1 if we use n boats for product j shiping to region k, 0 otherwise

        1       Barges_sell(Pap,EU)

u(1,Pap,IE)
                (.LO, .L, .UP, .M = 0, 0, 1, 0)
        1       Barges_sell(Pap,IE)

u(1,Pap,PA)
                (.LO, .L, .UP, .M = 0, 0, 1, 0)
        1       Barges_sell(Pap,PA)

u(1,Pap,KI)
                (.LO, .L, .UP, .M = 0, 0, 1, 0)
        1       Barges_sell(Pap,KI)

u(2,Mas,EU)
                (.LO, .L, .UP, .M = 0, 0, 1, 0)
   -15600       obj
    10000       Sold_Prod(Mas)
        1       Barges_sell(Mas,EU)

u(2,Mas,IE)
                (.LO, .L, .UP, .M = 0, 0, 1, 0)
   -12000       obj
    10000       Sold_Prod(Mas)
        1       Barges_sell(Mas,IE)

u(2,Mas,PA)
                (.LO, .L, .UP, .M = 0, 0, 1, 0)
   -12800       obj
    10000       Sold_Prod(Mas)
        1       Barges_sell(Mas,PA)

u(2,Mas,KI)
                (.LO, .L, .UP, .M = 0, 0, 1, 0)
   -13500       obj
    10000       Sold_Prod(Mas)
        1       Barges_sell(Mas,KI)

u(2,Kus,EU)
                (.LO, .L, .UP, .M = 0, 0, 1, 0)
        1       Barges_sell(Kus,EU)

u(2,Kus,IE)
                (.LO, .L, .UP, .M = 0, 0, 1, 0)
        1       Barges_sell(Kus,IE)

u(2,Kus,PA)
                (.LO, .L, .UP, .M = 0, 0, 1, 0)
        1       Barges_sell(Kus,PA)

u(2,Kus,KI)
GAMS 24.8.1  r59919 Released Dec 22, 2016 DEX-DEG x86 64bit/Mac OS X                                                                                                                                                                  01/17/17 22:39:53 Page 44
G e n e r a l   A l g e b r a i c   M o d e l i n g   S y s t e m
Column Listing      SOLVE final Using MIP From line 358


     u  1 if we use n boats for product j shiping to region k, 0 otherwise

                (.LO, .L, .UP, .M = 0, 0, 1, 0)
        1       Barges_sell(Kus,KI)

u(2,Kos,EU)
                (.LO, .L, .UP, .M = 0, 0, 1, 0)
   -11600       obj
    10000       Sold_Prod(Kos)
        1       Barges_sell(Kos,EU)

u(2,Kos,IE)
                (.LO, .L, .UP, .M = 0, 0, 1, 0)
   -12000       obj
    10000       Sold_Prod(Kos)
        1       Barges_sell(Kos,IE)

u(2,Kos,PA)
                (.LO, .L, .UP, .M = 0, 0, 1, 0)
   -12800       obj
    10000       Sold_Prod(Kos)
        1       Barges_sell(Kos,PA)

u(2,Kos,KI)
                (.LO, .L, .UP, .M = 0, 0, 1, 0)
   -13500       obj
    10000       Sold_Prod(Kos)
        1       Barges_sell(Kos,KI)

u(2,Kuv,EU)
                (.LO, .L, .UP, .M = 0, 0, 1, 0)
   -43600       obj
    10000       Sold_Prod(Kuv)
        1       Barges_sell(Kuv,EU)

u(2,Kuv,IE)
                (.LO, .L, .UP, .M = 0, 0, 1, 0)
   -37000       obj
    10000       Sold_Prod(Kuv)
        1       Barges_sell(Kuv,IE)

u(2,Kuv,PA)
                (.LO, .L, .UP, .M = 0, 0, 1, 0)
   -34800       obj
    10000       Sold_Prod(Kuv)
        1       Barges_sell(Kuv,PA)

u(2,Kuv,KI)
                (.LO, .L, .UP, .M = 0, 0, 1, 0)
   -33500       obj
    10000       Sold_Prod(Kuv)
        1       Barges_sell(Kuv,KI)

GAMS 24.8.1  r59919 Released Dec 22, 2016 DEX-DEG x86 64bit/Mac OS X                                                                                                                                                                  01/17/17 22:39:53 Page 45
G e n e r a l   A l g e b r a i c   M o d e l i n g   S y s t e m
Column Listing      SOLVE final Using MIP From line 358


     u  1 if we use n boats for product j shiping to region k, 0 otherwise

u(2,Kov,EU)
                (.LO, .L, .UP, .M = 0, 0, 1, 0)
   -42600       obj
    10000       Sold_Prod(Kov)
        1       Barges_sell(Kov,EU)

u(2,Kov,IE)
                (.LO, .L, .UP, .M = 0, 0, 1, 0)
   -40000       obj
    10000       Sold_Prod(Kov)
        1       Barges_sell(Kov,IE)

u(2,Kov,PA)
                (.LO, .L, .UP, .M = 0, 0, 1, 0)
   -37800       obj
    10000       Sold_Prod(Kov)
        1       Barges_sell(Kov,PA)

u(2,Kov,KI)
                (.LO, .L, .UP, .M = 0, 0, 1, 0)
   -36500       obj
    10000       Sold_Prod(Kov)
        1       Barges_sell(Kov,KI)

u(2,Hsel,EU)
                (.LO, .L, .UP, .M = 0, 0, 1, 0)
   -22800       obj
    10000       Sold_Prod(Hsel)
        1       Barges_sell(Hsel,EU)
    10000       PULP_Bal(Hsel)

u(2,Hsel,IE)
                (.LO, .L, .UP, .M = 0, 0, 1, 0)
   -24600       obj
    10000       Sold_Prod(Hsel)
        1       Barges_sell(Hsel,IE)
    10000       PULP_Bal(Hsel)

u(2,Hsel,PA)
                (.LO, .L, .UP, .M = 0, 0, 1, 0)
   -22500       obj
    10000       Sold_Prod(Hsel)
        1       Barges_sell(Hsel,PA)
    10000       PULP_Bal(Hsel)

u(2,Hsel,KI)
                (.LO, .L, .UP, .M = 0, 0, 1, 0)
   -25400       obj
    10000       Sold_Prod(Hsel)
        1       Barges_sell(Hsel,KI)
    10000       PULP_Bal(Hsel)
GAMS 24.8.1  r59919 Released Dec 22, 2016 DEX-DEG x86 64bit/Mac OS X                                                                                                                                                                  01/17/17 22:39:53 Page 46
G e n e r a l   A l g e b r a i c   M o d e l i n g   S y s t e m
Column Listing      SOLVE final Using MIP From line 358


     u  1 if we use n boats for product j shiping to region k, 0 otherwise


u(2,Lsel,EU)
                (.LO, .L, .UP, .M = 0, 0, 1, 0)
   -24700       obj
    10000       Sold_Prod(Lsel)
        1       Barges_sell(Lsel,EU)
    10000       PULP_Bal(Lsel)

u(2,Lsel,IE)
                (.LO, .L, .UP, .M = 0, 0, 1, 0)
   -27800       obj
    10000       Sold_Prod(Lsel)
        1       Barges_sell(Lsel,IE)
    10000       PULP_Bal(Lsel)

u(2,Lsel,PA)
                (.LO, .L, .UP, .M = 0, 0, 1, 0)
   -22500       obj
    10000       Sold_Prod(Lsel)
        1       Barges_sell(Lsel,PA)
    10000       PULP_Bal(Lsel)

u(2,Lsel,KI)
                (.LO, .L, .UP, .M = 0, 0, 1, 0)
   -24300       obj
    10000       Sold_Prod(Lsel)
        1       Barges_sell(Lsel,KI)
    10000       PULP_Bal(Lsel)

u(2,Pap,EU)
                (.LO, .L, .UP, .M = 0, 0, 1, 0)
   -44600       obj
    10000       Sold_Prod(Pap)
        1       Barges_sell(Pap,EU)

u(2,Pap,IE)
                (.LO, .L, .UP, .M = 0, 0, 1, 0)
   -46000       obj
    10000       Sold_Prod(Pap)
        1       Barges_sell(Pap,IE)

u(2,Pap,PA)
                (.LO, .L, .UP, .M = 0, 0, 1, 0)
   -41800       obj
    10000       Sold_Prod(Pap)
        1       Barges_sell(Pap,PA)

u(2,Pap,KI)
                (.LO, .L, .UP, .M = 0, 0, 1, 0)
   -46500       obj
    10000       Sold_Prod(Pap)
GAMS 24.8.1  r59919 Released Dec 22, 2016 DEX-DEG x86 64bit/Mac OS X                                                                                                                                                                  01/17/17 22:39:53 Page 47
G e n e r a l   A l g e b r a i c   M o d e l i n g   S y s t e m
Column Listing      SOLVE final Using MIP From line 358


     u  1 if we use n boats for product j shiping to region k, 0 otherwise

        1       Barges_sell(Pap,KI)

u(3,Mas,EU)
                (.LO, .L, .UP, .M = 0, 0, 1, 0)
   -30400       obj
    20000       Sold_Prod(Mas)
        1       Barges_sell(Mas,EU)

u(3,Mas,IE)
                (.LO, .L, .UP, .M = 0, 0, 1, 0)
   -22000       obj
    20000       Sold_Prod(Mas)
        1       Barges_sell(Mas,IE)

u(3,Mas,PA)
                (.LO, .L, .UP, .M = 0, 0, 1, 0)
   -23200       obj
    20000       Sold_Prod(Mas)
        1       Barges_sell(Mas,PA)

u(3,Mas,KI)
                (.LO, .L, .UP, .M = 0, 0, 1, 0)
   -24000       obj
    20000       Sold_Prod(Mas)
        1       Barges_sell(Mas,KI)

u(3,Kus,EU)
                (.LO, .L, .UP, .M = 0, 0, 1, 0)
        1       Barges_sell(Kus,EU)

u(3,Kus,IE)
                (.LO, .L, .UP, .M = 0, 0, 1, 0)
        1       Barges_sell(Kus,IE)

u(3,Kus,PA)
                (.LO, .L, .UP, .M = 0, 0, 1, 0)
        1       Barges_sell(Kus,PA)

u(3,Kus,KI)
                (.LO, .L, .UP, .M = 0, 0, 1, 0)
        1       Barges_sell(Kus,KI)

u(3,Kos,EU)
                (.LO, .L, .UP, .M = 0, 0, 1, 0)
   -20400       obj
    20000       Sold_Prod(Kos)
        1       Barges_sell(Kos,EU)

u(3,Kos,IE)
                (.LO, .L, .UP, .M = 0, 0, 1, 0)
   -20000       obj
GAMS 24.8.1  r59919 Released Dec 22, 2016 DEX-DEG x86 64bit/Mac OS X                                                                                                                                                                  01/17/17 22:39:53 Page 48
G e n e r a l   A l g e b r a i c   M o d e l i n g   S y s t e m
Column Listing      SOLVE final Using MIP From line 358


     u  1 if we use n boats for product j shiping to region k, 0 otherwise

    20000       Sold_Prod(Kos)
        1       Barges_sell(Kos,IE)

u(3,Kos,PA)
                (.LO, .L, .UP, .M = 0, 0, 1, 0)
   -21200       obj
    20000       Sold_Prod(Kos)
        1       Barges_sell(Kos,PA)

u(3,Kos,KI)
                (.LO, .L, .UP, .M = 0, 0, 1, 0)
   -22000       obj
    20000       Sold_Prod(Kos)
        1       Barges_sell(Kos,KI)

u(3,Kuv,EU)
                (.LO, .L, .UP, .M = 0, 0, 1, 0)
   -86400       obj
    20000       Sold_Prod(Kuv)
        1       Barges_sell(Kuv,EU)

u(3,Kuv,IE)
                (.LO, .L, .UP, .M = 0, 0, 1, 0)
   -72000       obj
    20000       Sold_Prod(Kuv)
        1       Barges_sell(Kuv,IE)

u(3,Kuv,PA)
                (.LO, .L, .UP, .M = 0, 0, 1, 0)
   -67200       obj
    20000       Sold_Prod(Kuv)
        1       Barges_sell(Kuv,PA)

u(3,Kuv,KI)
                (.LO, .L, .UP, .M = 0, 0, 1, 0)
   -64000       obj
    20000       Sold_Prod(Kuv)
        1       Barges_sell(Kuv,KI)

u(3,Kov,EU)
                (.LO, .L, .UP, .M = 0, 0, 1, 0)
   -84400       obj
    20000       Sold_Prod(Kov)
        1       Barges_sell(Kov,EU)

u(3,Kov,IE)
                (.LO, .L, .UP, .M = 0, 0, 1, 0)
   -78000       obj
    20000       Sold_Prod(Kov)
        1       Barges_sell(Kov,IE)

GAMS 24.8.1  r59919 Released Dec 22, 2016 DEX-DEG x86 64bit/Mac OS X                                                                                                                                                                  01/17/17 22:39:53 Page 49
G e n e r a l   A l g e b r a i c   M o d e l i n g   S y s t e m
Column Listing      SOLVE final Using MIP From line 358


     u  1 if we use n boats for product j shiping to region k, 0 otherwise

u(3,Kov,PA)
                (.LO, .L, .UP, .M = 0, 0, 1, 0)
   -73200       obj
    20000       Sold_Prod(Kov)
        1       Barges_sell(Kov,PA)

u(3,Kov,KI)
                (.LO, .L, .UP, .M = 0, 0, 1, 0)
   -70000       obj
    20000       Sold_Prod(Kov)
        1       Barges_sell(Kov,KI)

u(3,Hsel,EU)
                (.LO, .L, .UP, .M = 0, 0, 1, 0)
   -45200       obj
    20000       Sold_Prod(Hsel)
        1       Barges_sell(Hsel,EU)
    20000       PULP_Bal(Hsel)

u(3,Hsel,IE)
                (.LO, .L, .UP, .M = 0, 0, 1, 0)
   -48400       obj
    20000       Sold_Prod(Hsel)
        1       Barges_sell(Hsel,IE)
    20000       PULP_Bal(Hsel)

u(3,Hsel,PA)
                (.LO, .L, .UP, .M = 0, 0, 1, 0)
   -44000       obj
    20000       Sold_Prod(Hsel)
        1       Barges_sell(Hsel,PA)
    20000       PULP_Bal(Hsel)

u(3,Hsel,KI)
                (.LO, .L, .UP, .M = 0, 0, 1, 0)
   -49600       obj
    20000       Sold_Prod(Hsel)
        1       Barges_sell(Hsel,KI)
    20000       PULP_Bal(Hsel)

u(3,Lsel,EU)
                (.LO, .L, .UP, .M = 0, 0, 1, 0)
   -48800       obj
    20000       Sold_Prod(Lsel)
        1       Barges_sell(Lsel,EU)
    20000       PULP_Bal(Lsel)

u(3,Lsel,IE)
                (.LO, .L, .UP, .M = 0, 0, 1, 0)
   -55200       obj
    20000       Sold_Prod(Lsel)
GAMS 24.8.1  r59919 Released Dec 22, 2016 DEX-DEG x86 64bit/Mac OS X                                                                                                                                                                  01/17/17 22:39:53 Page 50
G e n e r a l   A l g e b r a i c   M o d e l i n g   S y s t e m
Column Listing      SOLVE final Using MIP From line 358


     u  1 if we use n boats for product j shiping to region k, 0 otherwise

        1       Barges_sell(Lsel,IE)
    20000       PULP_Bal(Lsel)

u(3,Lsel,PA)
                (.LO, .L, .UP, .M = 0, 0, 1, 0)
   -44000       obj
    20000       Sold_Prod(Lsel)
        1       Barges_sell(Lsel,PA)
    20000       PULP_Bal(Lsel)

u(3,Lsel,KI)
                (.LO, .L, .UP, .M = 0, 0, 1, 0)
   -47200       obj
    20000       Sold_Prod(Lsel)
        1       Barges_sell(Lsel,KI)
    20000       PULP_Bal(Lsel)

u(3,Pap,EU)
                (.LO, .L, .UP, .M = 0, 0, 1, 0)
   -88400       obj
    20000       Sold_Prod(Pap)
        1       Barges_sell(Pap,EU)

u(3,Pap,IE)
                (.LO, .L, .UP, .M = 0, 0, 1, 0)
   -90000       obj
    20000       Sold_Prod(Pap)
        1       Barges_sell(Pap,IE)

u(3,Pap,PA)
                (.LO, .L, .UP, .M = 0, 0, 1, 0)
   -81200       obj
    20000       Sold_Prod(Pap)
        1       Barges_sell(Pap,PA)

u(3,Pap,KI)
                (.LO, .L, .UP, .M = 0, 0, 1, 0)
   -90000       obj
    20000       Sold_Prod(Pap)
        1       Barges_sell(Pap,KI)

u(4,Mas,EU)
                (.LO, .L, .UP, .M = 0, 0, 1, 0)
   -44400       obj
    30000       Sold_Prod(Mas)
        1       Barges_sell(Mas,EU)

u(4,Mas,IE)
                (.LO, .L, .UP, .M = 0, 0, 1, 0)
   -30000       obj
    30000       Sold_Prod(Mas)
GAMS 24.8.1  r59919 Released Dec 22, 2016 DEX-DEG x86 64bit/Mac OS X                                                                                                                                                                  01/17/17 22:39:53 Page 51
G e n e r a l   A l g e b r a i c   M o d e l i n g   S y s t e m
Column Listing      SOLVE final Using MIP From line 358


     u  1 if we use n boats for product j shiping to region k, 0 otherwise

        1       Barges_sell(Mas,IE)

u(4,Mas,PA)
                (.LO, .L, .UP, .M = 0, 0, 1, 0)
   -31200       obj
    30000       Sold_Prod(Mas)
        1       Barges_sell(Mas,PA)

u(4,Mas,KI)
                (.LO, .L, .UP, .M = 0, 0, 1, 0)
   -31500       obj
    30000       Sold_Prod(Mas)
        1       Barges_sell(Mas,KI)

REMAINING 636 ENTRIES SKIPPED

---- b  amount of timber i bought

b(Mat)
                (.LO, .L, .UP, .M = 0, 0, +INF, 0)
       -0.19    obj
        1       timber_bought(Mat)

b(Kut)
                (.LO, .L, .UP, .M = 0, 0, +INF, 0)
       -0.15    obj
        1       timber_bought(Kut)

b(Kot)
                (.LO, .L, .UP, .M = 0, 0, +INF, 0)
       -0.12    obj
        1       timber_bought(Kot)

b(Mak)
                (.LO, .L, .UP, .M = 0, 0, +INF, 0)
       -0.18    obj
        1       timber_bought(Mak)

b(Kuk)
                (.LO, .L, .UP, .M = 0, 0, +INF, 0)
       -0.15    obj
        1       timber_bought(Kuk)

b(Kok)
                (.LO, .L, .UP, .M = 0, 0, +INF, 0)
       -0.15    obj
        1       timber_bought(Kok)

GAMS 24.8.1  r59919 Released Dec 22, 2016 DEX-DEG x86 64bit/Mac OS X                                                                                                                                                                  01/17/17 22:39:53 Page 52
G e n e r a l   A l g e b r a i c   M o d e l i n g   S y s t e m
Model Statistics    SOLVE final Using MIP From line 358


MODEL STATISTICS

BLOCKS OF EQUATIONS          15     SINGLE EQUATIONS           74
BLOCKS OF VARIABLES           6     SINGLE VARIABLES        1,399
NON ZERO ELEMENTS         4,767     DISCRETE VARIABLES      1,386


GENERATION TIME      =        0.056 SECONDS      4 MB  24.8.1 r59919 DEX-DEG


EXECUTION TIME       =        0.059 SECONDS      4 MB  24.8.1 r59919 DEX-DEG
GAMS 24.8.1  r59919 Released Dec 22, 2016 DEX-DEG x86 64bit/Mac OS X                                                                                                                                                                  01/17/17 22:39:53 Page 53
G e n e r a l   A l g e b r a i c   M o d e l i n g   S y s t e m
Solution Report     SOLVE final Using MIP From line 358


               S O L V E      S U M M A R Y

     MODEL   final               OBJECTIVE  z
     TYPE    MIP                 DIRECTION  MAXIMIZE
     SOLVER  CPLEX               FROM LINE  358

**** SOLVER STATUS     1 Normal Completion         
**** MODEL STATUS      1 Optimal                   
**** OBJECTIVE VALUE           576036.0000

 RESOURCE USAGE, LIMIT          0.454       300.000
 ITERATION COUNT, LIMIT      1476     999999999

IBM ILOG CPLEX   24.8.1 r59919 Released Dec 22, 2016 DEG x86 64bit/Mac OS X   
--- GAMS/Cplex licensed for continuous and discrete problems.
Cplex 12.7.0.0

Space for names approximately 0.03 Mb
Use option 'names no' to turn use of names off
MIP status(101): integer optimal solution
Cplex Time: 0.37sec (det. 73.75 ticks)
Fixing integer variables, and solving final LP...
Fixed MIP status(1): optimal
Cplex Time: 0.00sec (det. 0.49 ticks)
Proven optimal solution.

MIP Solution:       576036.000000    (1476 iterations, 693 nodes)
Final Solve:        576036.000000    (0 iterations)

Best possible:      576036.000000
Absolute gap:            0.000000
Relative gap:            0.000000


                           LOWER          LEVEL          UPPER         MARGINAL

---- EQU obj                 .              .              .             1.0000      

  obj  Maximum gross profit

---- EQU timber_used   amount of  timber i used to make  product j

           LOWER          LEVEL          UPPER         MARGINAL

Mat          .              .              .             0.1900      
Kut          .              .              .             0.1500      
Kot          .              .              .             0.1200      
Mak          .              .              .             0.1800      
Kuk          .              .              .              .          
Kok          .              .              .             0.1500      
GAMS 24.8.1  r59919 Released Dec 22, 2016 DEX-DEG x86 64bit/Mac OS X                                                                                                                                                                  01/17/17 22:39:53 Page 54
G e n e r a l   A l g e b r a i c   M o d e l i n g   S y s t e m
Solution Report     SOLVE final Using MIP From line 358


---- EQU prod_starved  ensure that production can not be starved

           LOWER          LEVEL          UPPER         MARGINAL

Mat          .              .            +INF             .          
Kut          .              .            +INF             .          
Kot          .          8000.0000        +INF             .          
Mak          .          1200.0000        +INF             .          
Kuk          .              .            +INF             .          
Kok          .           800.0000        +INF             .          

---- EQU Sold_Prod  we cant sell more than we produce

            LOWER          LEVEL          UPPER         MARGINAL

Mas         -INF             .              .              .          
Kus         -INF             .              .              .          
Kos         -INF             .              .              .          
Kuv         -INF             .              .              .          
Kov         -INF             .              .              .          
Hsel        -INF       -16000.0000          .              .          
Lsel        -INF       -16000.0000          .              .          
Pap         -INF             .              .              .          

---- EQU timber_bought  amount of timber i bought

           LOWER          LEVEL          UPPER         MARGINAL

Mat          .              .              .             0.1900      
Kut          .              .              .             0.1500      
Kot          .              .              .             0.1200      
Mak          .              .              .             0.1800      
Kuk          .              .              .             0.1500      
Kok          .              .              .             0.1500      

---- EQU Barges_buy  ensure we only pick one value n for barges for each timber i

           LOWER          LEVEL          UPPER         MARGINAL

Mat         1.0000         1.0000         1.0000          .          
Kut         1.0000         1.0000         1.0000          .          
Kot         1.0000         1.0000         1.0000          .          
Mak         1.0000         1.0000         1.0000          .          
Kuk         1.0000         1.0000         1.0000          .          
Kok         1.0000         1.0000         1.0000          .          

---- EQU Barges_sell  ensure we only pick one value  n for barges for each product to each city

               LOWER          LEVEL          UPPER         MARGINAL

Mas .EU         1.0000         1.0000         1.0000          .          
Mas .IE         1.0000         1.0000         1.0000          .          
Mas .PA         1.0000         1.0000         1.0000          .          
GAMS 24.8.1  r59919 Released Dec 22, 2016 DEX-DEG x86 64bit/Mac OS X                                                                                                                                                                  01/17/17 22:39:53 Page 55
G e n e r a l   A l g e b r a i c   M o d e l i n g   S y s t e m
Solution Report     SOLVE final Using MIP From line 358


     EQU Barges_sell  ensure we only pick one value  n for barges for each product to each city

               LOWER          LEVEL          UPPER         MARGINAL

Mas .KI         1.0000         1.0000         1.0000          .          
Kus .EU         1.0000         1.0000         1.0000          .          
Kus .IE         1.0000         1.0000         1.0000          .          
Kus .PA         1.0000         1.0000         1.0000          .          
Kus .KI         1.0000         1.0000         1.0000          .          
Kos .EU         1.0000         1.0000         1.0000          .          
Kos .IE         1.0000         1.0000         1.0000          .          
Kos .PA         1.0000         1.0000         1.0000          .          
Kos .KI         1.0000         1.0000         1.0000          .          
Kuv .EU         1.0000         1.0000         1.0000          .          
Kuv .IE         1.0000         1.0000         1.0000          .          
Kuv .PA         1.0000         1.0000         1.0000          .          
Kuv .KI         1.0000         1.0000         1.0000          .          
Kov .EU         1.0000         1.0000         1.0000          .          
Kov .IE         1.0000         1.0000         1.0000          .          
Kov .PA         1.0000         1.0000         1.0000          .          
Kov .KI         1.0000         1.0000         1.0000          .          
Hsel.EU         1.0000         1.0000         1.0000          .          
Hsel.IE         1.0000         1.0000         1.0000          .          
Hsel.PA         1.0000         1.0000         1.0000          .          
Hsel.KI         1.0000         1.0000         1.0000          .          
Lsel.EU         1.0000         1.0000         1.0000          .          
Lsel.IE         1.0000         1.0000         1.0000          .          
Lsel.PA         1.0000         1.0000         1.0000          .          
Lsel.KI         1.0000         1.0000         1.0000          .          
Pap .EU         1.0000         1.0000         1.0000          .          
Pap .IE         1.0000         1.0000         1.0000          .          
Pap .PA         1.0000         1.0000         1.0000          .          
Pap .KI         1.0000         1.0000         1.0000          .          

                           LOWER          LEVEL          UPPER         MARGINAL

---- EQU SawmillCap        -INF        70000.0000    200000.0000          .          
---- EQU PlywoodCap        -INF        90000.0000     90000.0000          .          
---- EQU HSELCap           -INF        76000.0000    220000.0000          .          
---- EQU LSELCap           -INF       146000.0000    180000.0000          .          
---- EQU PAPCap            -INF        80000.0000     80000.0000          .          
---- EQU PAP_HSEL          -INF       -60000.0000          .              .          
---- EQU PAP_LSEL          -INF      -130000.0000          .              .          

  SawmillCap  Maximum capacity of the saw mill
  PlywoodCap  Maximum capacity of plywood mill
  HSELCap  Maximum capacity of HSEL production
  LSELCap  Maximum capacity of LSEL production
  PAPCap  Maximum capacity of PAP production
  PAP_HSEL  Proportion needed of HSEL for PAP
  PAP_LSEL  Proportion needed of LSEL for PAP
GAMS 24.8.1  r59919 Released Dec 22, 2016 DEX-DEG x86 64bit/Mac OS X                                                                                                                                                                  01/17/17 22:39:53 Page 56
G e n e r a l   A l g e b r a i c   M o d e l i n g   S y s t e m
Solution Report     SOLVE final Using MIP From line 358


---- EQU PULP_Bal  Cant produce paper without pulp

            LOWER          LEVEL          UPPER         MARGINAL

Hsel        -INF             .              .              .          
Lsel        -INF             .              .              .          

                           LOWER          LEVEL          UPPER         MARGINAL

---- VAR z                 -INF       576036.0000        +INF             .          

  z  the objective

---- VAR y  Cubic meters produced of product j

            LOWER          LEVEL          UPPER         MARGINAL

Mas           .         70000.0000   1060000.0000        -0.7780      
Kus           .              .       1060000.0000        -0.7920      
Kos           .              .       1060000.0000        -0.5620      
Kuv           .         50000.0000   1060000.0000        -0.6620      
Kov           .         40000.0000   1060000.0000        -0.3480      
Hsel          .         76000.0000   1060000.0000        -1.6840      
Lsel          .        146000.0000   1060000.0000        -1.4300      
Pap           .         80000.0000   1060000.0000        -1.7000      

---- VAR s  amount of timber i used to make products

           LOWER          LEVEL          UPPER         MARGINAL

Mat          .        140000.0000        +INF             .          
Kut          .        140000.0000        +INF             .          
Kot          .        112000.0000        +INF             .          
Mak          .        308800.0000        +INF             .          
Kuk          .              .            +INF           -0.1500      
Kok          .        549200.0000        +INF             .          

---- VAR r  1 if we buy n boats of timber i, 0 otherwise

               LOWER          LEVEL          UPPER         MARGINAL

1  .Mat          .              .             1.0000         EPS         
1  .Kut          .              .             1.0000         EPS         
1  .Kot          .              .             1.0000         EPS         
1  .Mak          .              .             1.0000         EPS         
1  .Kuk          .             1.0000         1.0000         EPS         
1  .Kok          .              .             1.0000         EPS         
2  .Mat          .              .             1.0000      -100.0000      
2  .Kut          .              .             1.0000       -50.0000      
2  .Kot          .              .             1.0000      -300.0000      
2  .Mak          .              .             1.0000       -20.0000      
2  .Kuk          .              .             1.0000       -30.0000      
2  .Kok          .              .             1.0000       -20.0000      
GAMS 24.8.1  r59919 Released Dec 22, 2016 DEX-DEG x86 64bit/Mac OS X                                                                                                                                                                  01/17/17 22:39:53 Page 57
G e n e r a l   A l g e b r a i c   M o d e l i n g   S y s t e m
Solution Report     SOLVE final Using MIP From line 358


     VAR r  1 if we buy n boats of timber i, 0 otherwise

               LOWER          LEVEL          UPPER         MARGINAL

3  .Mat          .              .             1.0000      -400.0000      
3  .Kut          .              .             1.0000      -200.0000      
3  .Kot          .              .             1.0000     -1200.0000      
3  .Mak          .              .             1.0000       -80.0000      
3  .Kuk          .              .             1.0000      -120.0000      
3  .Kok          .              .             1.0000       -80.0000      
4  .Mat          .              .             1.0000      -900.0000      
4  .Kut          .              .             1.0000      -450.0000      
4  .Kot          .              .             1.0000     -2700.0000      
4  .Mak          .              .             1.0000      -180.0000      
4  .Kuk          .              .             1.0000      -270.0000      
4  .Kok          .              .             1.0000      -180.0000      
5  .Mat          .              .             1.0000     -1600.0000      
5  .Kut          .              .             1.0000      -800.0000      
5  .Kot          .              .             1.0000     -4800.0000      
5  .Mak          .              .             1.0000      -320.0000      
5  .Kuk          .              .             1.0000      -480.0000      
5  .Kok          .              .             1.0000      -320.0000      
6  .Mat          .              .             1.0000     -2500.0000      
6  .Kut          .              .             1.0000     -1250.0000      
6  .Kot          .              .             1.0000     -7500.0000      
6  .Mak          .              .             1.0000      -500.0000      
6  .Kuk          .              .             1.0000      -750.0000      
6  .Kok          .              .             1.0000      -500.0000      
7  .Mat          .              .             1.0000     -3600.0000      
7  .Kut          .              .             1.0000     -1800.0000      
7  .Kot          .              .             1.0000    -10800.0000      
7  .Mak          .              .             1.0000      -720.0000      
7  .Kuk          .              .             1.0000     -1080.0000      
7  .Kok          .              .             1.0000      -720.0000      
8  .Mat          .              .             1.0000     -4900.0000      
8  .Kut          .              .             1.0000     -2450.0000      
8  .Kot          .              .             1.0000    -14700.0000      
8  .Mak          .              .             1.0000      -980.0000      
8  .Kuk          .              .             1.0000     -1470.0000      
8  .Kok          .              .             1.0000      -980.0000      
9  .Mat          .              .             1.0000     -6400.0000      
9  .Kut          .              .             1.0000     -3200.0000      
9  .Kot          .              .             1.0000    -19200.0000      
9  .Mak          .              .             1.0000     -1280.0000      
9  .Kuk          .              .             1.0000     -1920.0000      
9  .Kok          .              .             1.0000     -1280.0000      
10 .Mat          .              .             1.0000     -8100.0000      
10 .Kut          .              .             1.0000     -4050.0000      
10 .Kot          .              .             1.0000    -24300.0000      
10 .Mak          .              .             1.0000     -1620.0000      
10 .Kuk          .              .             1.0000     -2430.0000      
10 .Kok          .              .             1.0000     -1620.0000      
11 .Mat          .              .             1.0000    -10000.0000      
GAMS 24.8.1  r59919 Released Dec 22, 2016 DEX-DEG x86 64bit/Mac OS X                                                                                                                                                                  01/17/17 22:39:53 Page 58
G e n e r a l   A l g e b r a i c   M o d e l i n g   S y s t e m
Solution Report     SOLVE final Using MIP From line 358


     VAR r  1 if we buy n boats of timber i, 0 otherwise

               LOWER          LEVEL          UPPER         MARGINAL

11 .Kut          .              .             1.0000     -5000.0000      
11 .Kot          .              .             1.0000    -30000.0000      
11 .Mak          .              .             1.0000     -2000.0000      
11 .Kuk          .              .             1.0000     -3000.0000      
11 .Kok          .              .             1.0000     -2000.0000      
12 .Mat          .              .             1.0000    -12100.0000      
12 .Kut          .              .             1.0000     -6050.0000      
12 .Kot          .              .             1.0000    -36300.0000      
12 .Mak          .              .             1.0000     -2420.0000      
12 .Kuk          .              .             1.0000     -3630.0000      
12 .Kok          .              .             1.0000     -2420.0000      
13 .Mat          .              .             1.0000    -14400.0000      
13 .Kut          .              .             1.0000     -7200.0000      
13 .Kot          .             1.0000         1.0000    -43200.0000      
13 .Mak          .              .             1.0000     -2880.0000      
13 .Kuk          .              .             1.0000     -4320.0000      
13 .Kok          .              .             1.0000     -2880.0000      
14 .Mat          .              .             1.0000    -16900.0000      
14 .Kut          .              .             1.0000     -8450.0000      
14 .Kot          .              .             1.0000    -50700.0000      
14 .Mak          .              .             1.0000     -3380.0000      
14 .Kuk          .              .             1.0000     -5070.0000      
14 .Kok          .              .             1.0000     -3380.0000      
15 .Mat          .             1.0000         1.0000    -19600.0000      
15 .Kut          .             1.0000         1.0000     -9800.0000      
15 .Kot          .              .             1.0000    -58800.0000      
15 .Mak          .              .             1.0000     -3920.0000      
15 .Kuk          .              .             1.0000     -5880.0000      
15 .Kok          .              .             1.0000     -3920.0000      
16 .Mat          .              .             1.0000    -22500.0000      
16 .Kut          .              .             1.0000    -11250.0000      
16 .Kot          .              .             1.0000    -67500.0000      
16 .Mak          .              .             1.0000     -4500.0000      
16 .Kuk          .              .             1.0000     -6750.0000      
16 .Kok          .              .             1.0000     -4500.0000      
17 .Mat          .              .             1.0000    -25600.0000      
17 .Kut          .              .             1.0000    -12800.0000      
17 .Kot          .              .             1.0000    -76800.0000      
17 .Mak          .              .             1.0000     -5120.0000      
17 .Kuk          .              .             1.0000     -7680.0000      
17 .Kok          .              .             1.0000     -5120.0000      
18 .Mat          .              .             1.0000    -28900.0000      
18 .Kut          .              .             1.0000    -14450.0000      
18 .Kot          .              .             1.0000    -86700.0000      
18 .Mak          .              .             1.0000     -5780.0000      
18 .Kuk          .              .             1.0000     -8670.0000      
18 .Kok          .              .             1.0000     -5780.0000      
19 .Mat          .              .             1.0000    -32400.0000      
19 .Kut          .              .             1.0000    -16200.0000      
GAMS 24.8.1  r59919 Released Dec 22, 2016 DEX-DEG x86 64bit/Mac OS X                                                                                                                                                                  01/17/17 22:39:53 Page 59
G e n e r a l   A l g e b r a i c   M o d e l i n g   S y s t e m
Solution Report     SOLVE final Using MIP From line 358


     VAR r  1 if we buy n boats of timber i, 0 otherwise

               LOWER          LEVEL          UPPER         MARGINAL

19 .Kot          .              .             1.0000    -97200.0000      
19 .Mak          .              .             1.0000     -6480.0000      
19 .Kuk          .              .             1.0000     -9720.0000      
19 .Kok          .              .             1.0000     -6480.0000      
20 .Mat          .              .             1.0000    -36100.0000      
20 .Kut          .              .             1.0000    -18050.0000      
20 .Kot          .              .             1.0000   -108300.0000      
20 .Mak          .              .             1.0000     -7220.0000      
20 .Kuk          .              .             1.0000    -10830.0000      
20 .Kok          .              .             1.0000     -7220.0000      
21 .Mat          .              .             1.0000    -40000.0000      
21 .Kut          .              .             1.0000    -20000.0000      
21 .Kot          .              .             1.0000   -120000.0000      
21 .Mak          .              .             1.0000     -8000.0000      
21 .Kuk          .              .             1.0000    -12000.0000      
21 .Kok          .              .             1.0000     -8000.0000      
22 .Mat          .              .             1.0000    -44100.0000      
22 .Kut          .              .             1.0000    -22050.0000      
22 .Kot          .              .             1.0000   -132300.0000      
22 .Mak          .              .             1.0000     -8820.0000      
22 .Kuk          .              .             1.0000    -13230.0000      
22 .Kok          .              .             1.0000     -8820.0000      
23 .Mat          .              .             1.0000    -48400.0000      
23 .Kut          .              .             1.0000    -24200.0000      
23 .Kot          .              .             1.0000   -145200.0000      
23 .Mak          .              .             1.0000     -9680.0000      
23 .Kuk          .              .             1.0000    -14520.0000      
23 .Kok          .              .             1.0000     -9680.0000      
24 .Mat          .              .             1.0000    -52900.0000      
24 .Kut          .              .             1.0000    -26450.0000      
24 .Kot          .              .             1.0000   -158700.0000      
24 .Mak          .              .             1.0000    -10580.0000      
24 .Kuk          .              .             1.0000    -15870.0000      
24 .Kok          .              .             1.0000    -10580.0000      
25 .Mat          .              .             1.0000    -57600.0000      
25 .Kut          .              .             1.0000    -28800.0000      
25 .Kot          .              .             1.0000   -172800.0000      
25 .Mak          .              .             1.0000    -11520.0000      
25 .Kuk          .              .             1.0000    -17280.0000      
25 .Kok          .              .             1.0000    -11520.0000      
26 .Mat          .              .             1.0000    -62500.0000      
26 .Kut          .              .             1.0000    -31250.0000      
26 .Kot          .              .             1.0000   -187500.0000      
26 .Mak          .              .             1.0000    -12500.0000      
26 .Kuk          .              .             1.0000    -18750.0000      
26 .Kok          .              .             1.0000    -12500.0000      
27 .Mat          .              .             1.0000    -67600.0000      
27 .Kut          .              .             1.0000    -33800.0000      
27 .Kot          .              .             1.0000   -202800.0000      
GAMS 24.8.1  r59919 Released Dec 22, 2016 DEX-DEG x86 64bit/Mac OS X                                                                                                                                                                  01/17/17 22:39:53 Page 60
G e n e r a l   A l g e b r a i c   M o d e l i n g   S y s t e m
Solution Report     SOLVE final Using MIP From line 358


     VAR r  1 if we buy n boats of timber i, 0 otherwise

               LOWER          LEVEL          UPPER         MARGINAL

27 .Mak          .              .             1.0000    -13520.0000      
27 .Kuk          .              .             1.0000    -20280.0000      
27 .Kok          .              .             1.0000    -13520.0000      
28 .Mat          .              .             1.0000    -72900.0000      
28 .Kut          .              .             1.0000    -36450.0000      
28 .Kot          .              .             1.0000   -218700.0000      
28 .Mak          .              .             1.0000    -14580.0000      
28 .Kuk          .              .             1.0000    -21870.0000      
28 .Kok          .              .             1.0000    -14580.0000      
29 .Mat          .              .             1.0000    -78400.0000      
29 .Kut          .              .             1.0000    -39200.0000      
29 .Kot          .              .             1.0000   -235200.0000      
29 .Mak          .              .             1.0000    -15680.0000      
29 .Kuk          .              .             1.0000    -23520.0000      
29 .Kok          .              .             1.0000    -15680.0000      
30 .Mat          .              .             1.0000    -84100.0000      
30 .Kut          .              .             1.0000    -42050.0000      
30 .Kot          .              .             1.0000   -252300.0000      
30 .Mak          .              .             1.0000    -16820.0000      
30 .Kuk          .              .             1.0000    -25230.0000      
30 .Kok          .              .             1.0000    -16820.0000      
31 .Mat          .              .             1.0000    -90000.0000      
31 .Kut          .              .             1.0000    -45000.0000      
31 .Kot          .              .             1.0000   -270000.0000      
31 .Mak          .              .             1.0000    -18000.0000      
31 .Kuk          .              .             1.0000    -27000.0000      
31 .Kok          .              .             1.0000    -18000.0000      
32 .Mat          .              .             1.0000    -96100.0000      
32 .Kut          .              .             1.0000    -48050.0000      
32 .Kot          .              .             1.0000   -288300.0000      
32 .Mak          .             1.0000         1.0000    -19220.0000      
32 .Kuk          .              .             1.0000    -28830.0000      
32 .Kok          .              .             1.0000    -19220.0000      
33 .Mat          .              .             1.0000   -102400.0000      
33 .Kut          .              .             1.0000    -51200.0000      
33 .Kot          .              .             1.0000   -307200.0000      
33 .Mak          .              .             1.0000    -20480.0000      
33 .Kuk          .              .             1.0000    -30720.0000      
33 .Kok          .              .             1.0000    -20480.0000      
34 .Mat          .              .             1.0000   -108900.0000      
34 .Kut          .              .             1.0000    -54450.0000      
34 .Kot          .              .             1.0000   -326700.0000      
34 .Mak          .              .             1.0000    -21780.0000      
34 .Kuk          .              .             1.0000    -32670.0000      
34 .Kok          .              .             1.0000    -21780.0000      
35 .Mat          .              .             1.0000   -115600.0000      
35 .Kut          .              .             1.0000    -57800.0000      
35 .Kot          .              .             1.0000   -346800.0000      
35 .Mak          .              .             1.0000    -23120.0000      
GAMS 24.8.1  r59919 Released Dec 22, 2016 DEX-DEG x86 64bit/Mac OS X                                                                                                                                                                  01/17/17 22:39:53 Page 61
G e n e r a l   A l g e b r a i c   M o d e l i n g   S y s t e m
Solution Report     SOLVE final Using MIP From line 358


     VAR r  1 if we buy n boats of timber i, 0 otherwise

               LOWER          LEVEL          UPPER         MARGINAL

35 .Kuk          .              .             1.0000    -34680.0000      
35 .Kok          .              .             1.0000    -23120.0000      
36 .Mat          .              .             1.0000   -122500.0000      
36 .Kut          .              .             1.0000    -61250.0000      
36 .Kot          .              .             1.0000   -367500.0000      
36 .Mak          .              .             1.0000    -24500.0000      
36 .Kuk          .              .             1.0000    -36750.0000      
36 .Kok          .              .             1.0000    -24500.0000      
37 .Mat          .              .             1.0000   -129600.0000      
37 .Kut          .              .             1.0000    -64800.0000      
37 .Kot          .              .             1.0000   -388800.0000      
37 .Mak          .              .             1.0000    -25920.0000      
37 .Kuk          .              .             1.0000    -38880.0000      
37 .Kok          .              .             1.0000    -25920.0000      
38 .Mat          .              .             1.0000   -136900.0000      
38 .Kut          .              .             1.0000    -68450.0000      
38 .Kot          .              .             1.0000   -410700.0000      
38 .Mak          .              .             1.0000    -27380.0000      
38 .Kuk          .              .             1.0000    -41070.0000      
38 .Kok          .              .             1.0000    -27380.0000      
39 .Mat          .              .             1.0000   -144400.0000      
39 .Kut          .              .             1.0000    -72200.0000      
39 .Kot          .              .             1.0000   -433200.0000      
39 .Mak          .              .             1.0000    -28880.0000      
39 .Kuk          .              .             1.0000    -43320.0000      
39 .Kok          .              .             1.0000    -28880.0000      
40 .Mat          .              .             1.0000   -152100.0000      
40 .Kut          .              .             1.0000    -76050.0000      
40 .Kot          .              .             1.0000   -456300.0000      
40 .Mak          .              .             1.0000    -30420.0000      
40 .Kuk          .              .             1.0000    -45630.0000      
40 .Kok          .              .             1.0000    -30420.0000      
41 .Mat          .              .             1.0000   -160000.0000      
41 .Kut          .              .             1.0000    -80000.0000      
41 .Kot          .              .             1.0000   -480000.0000      
41 .Mak          .              .             1.0000    -32000.0000      
41 .Kuk          .              .             1.0000    -48000.0000      
41 .Kok          .              .             1.0000    -32000.0000      
42 .Mat          .              .             1.0000   -168100.0000      
42 .Kut          .              .             1.0000    -84050.0000      
42 .Kot          .              .             1.0000   -504300.0000      
42 .Mak          .              .             1.0000    -33620.0000      
42 .Kuk          .              .             1.0000    -50430.0000      
42 .Kok          .              .             1.0000    -33620.0000      
43 .Mat          .              .             1.0000   -176400.0000      
43 .Kut          .              .             1.0000    -88200.0000      
43 .Kot          .              .             1.0000   -529200.0000      
43 .Mak          .              .             1.0000    -35280.0000      
43 .Kuk          .              .             1.0000    -52920.0000      
GAMS 24.8.1  r59919 Released Dec 22, 2016 DEX-DEG x86 64bit/Mac OS X                                                                                                                                                                  01/17/17 22:39:53 Page 62
G e n e r a l   A l g e b r a i c   M o d e l i n g   S y s t e m
Solution Report     SOLVE final Using MIP From line 358


     VAR r  1 if we buy n boats of timber i, 0 otherwise

               LOWER          LEVEL          UPPER         MARGINAL

43 .Kok          .              .             1.0000    -35280.0000      
44 .Mat          .              .             1.0000   -184900.0000      
44 .Kut          .              .             1.0000    -92450.0000      
44 .Kot          .              .             1.0000   -554700.0000      
44 .Mak          .              .             1.0000    -36980.0000      
44 .Kuk          .              .             1.0000    -55470.0000      
44 .Kok          .              .             1.0000    -36980.0000      
45 .Mat          .              .             1.0000   -193600.0000      
45 .Kut          .              .             1.0000    -96800.0000      
45 .Kot          .              .             1.0000   -580800.0000      
45 .Mak          .              .             1.0000    -38720.0000      
45 .Kuk          .              .             1.0000    -58080.0000      
45 .Kok          .              .             1.0000    -38720.0000      
46 .Mat          .              .             1.0000   -202500.0000      
46 .Kut          .              .             1.0000   -101250.0000      
46 .Kot          .              .             1.0000   -607500.0000      
46 .Mak          .              .             1.0000    -40500.0000      
46 .Kuk          .              .             1.0000    -60750.0000      
46 .Kok          .              .             1.0000    -40500.0000      
47 .Mat          .              .             1.0000   -211600.0000      
47 .Kut          .              .             1.0000   -105800.0000      
47 .Kot          .              .             1.0000   -634800.0000      
47 .Mak          .              .             1.0000    -42320.0000      
47 .Kuk          .              .             1.0000    -63480.0000      
47 .Kok          .              .             1.0000    -42320.0000      
48 .Mat          .              .             1.0000   -220900.0000      
48 .Kut          .              .             1.0000   -110450.0000      
48 .Kot          .              .             1.0000   -662700.0000      
48 .Mak          .              .             1.0000    -44180.0000      
48 .Kuk          .              .             1.0000    -66270.0000      
48 .Kok          .              .             1.0000    -44180.0000      
49 .Mat          .              .             1.0000   -230400.0000      
49 .Kut          .              .             1.0000   -115200.0000      
49 .Kot          .              .             1.0000   -691200.0000      
49 .Mak          .              .             1.0000    -46080.0000      
49 .Kuk          .              .             1.0000    -69120.0000      
49 .Kok          .              .             1.0000    -46080.0000      
50 .Mat          .              .             1.0000   -240100.0000      
50 .Kut          .              .             1.0000   -120050.0000      
50 .Kot          .              .             1.0000   -720300.0000      
50 .Mak          .              .             1.0000    -48020.0000      
50 .Kuk          .              .             1.0000    -72030.0000      
50 .Kok          .              .             1.0000    -48020.0000      
51 .Mat          .              .             1.0000   -250000.0000      
51 .Kut          .              .             1.0000   -125000.0000      
51 .Kot          .              .             1.0000   -750000.0000      
51 .Mak          .              .             1.0000    -50000.0000      
51 .Kuk          .              .             1.0000    -75000.0000      
51 .Kok          .              .             1.0000    -50000.0000      
GAMS 24.8.1  r59919 Released Dec 22, 2016 DEX-DEG x86 64bit/Mac OS X                                                                                                                                                                  01/17/17 22:39:53 Page 63
G e n e r a l   A l g e b r a i c   M o d e l i n g   S y s t e m
Solution Report     SOLVE final Using MIP From line 358


     VAR r  1 if we buy n boats of timber i, 0 otherwise

               LOWER          LEVEL          UPPER         MARGINAL

52 .Mat          .              .             1.0000   -260100.0000      
52 .Kut          .              .             1.0000   -130050.0000      
52 .Kot          .              .             1.0000   -780300.0000      
52 .Mak          .              .             1.0000    -52020.0000      
52 .Kuk          .              .             1.0000    -78030.0000      
52 .Kok          .              .             1.0000    -52020.0000      
53 .Mat          .              .             1.0000   -270400.0000      
53 .Kut          .              .             1.0000   -135200.0000      
53 .Kot          .              .             1.0000   -811200.0000      
53 .Mak          .              .             1.0000    -54080.0000      
53 .Kuk          .              .             1.0000    -81120.0000      
53 .Kok          .              .             1.0000    -54080.0000      
54 .Mat          .              .             1.0000   -280900.0000      
54 .Kut          .              .             1.0000   -140450.0000      
54 .Kot          .              .             1.0000   -842700.0000      
54 .Mak          .              .             1.0000    -56180.0000      
54 .Kuk          .              .             1.0000    -84270.0000      
54 .Kok          .              .             1.0000    -56180.0000      
55 .Mat          .              .             1.0000   -291600.0000      
55 .Kut          .              .             1.0000   -145800.0000      
55 .Kot          .              .             1.0000   -874800.0000      
55 .Mak          .              .             1.0000    -58320.0000      
55 .Kuk          .              .             1.0000    -87480.0000      
55 .Kok          .              .             1.0000    -58320.0000      
56 .Mat          .              .             1.0000   -302500.0000      
56 .Kut          .              .             1.0000   -151250.0000      
56 .Kot          .              .             1.0000   -907500.0000      
56 .Mak          .              .             1.0000    -60500.0000      
56 .Kuk          .              .             1.0000    -90750.0000      
56 .Kok          .             1.0000         1.0000    -60500.0000      
57 .Mat          .              .             1.0000   -313600.0000      
57 .Kut          .              .             1.0000   -156800.0000      
57 .Kot          .              .             1.0000   -940800.0000      
57 .Mak          .              .             1.0000    -62720.0000      
57 .Kuk          .              .             1.0000    -94080.0000      
57 .Kok          .              .             1.0000    -62720.0000      
58 .Mat          .              .             1.0000   -324900.0000      
58 .Kut          .              .             1.0000   -162450.0000      
58 .Kot          .              .             1.0000   -974700.0000      
58 .Mak          .              .             1.0000    -64980.0000      
58 .Kuk          .              .             1.0000    -97470.0000      
58 .Kok          .              .             1.0000    -64980.0000      
59 .Mat          .              .             1.0000   -336400.0000      
59 .Kut          .              .             1.0000   -168200.0000      
59 .Kot          .              .             1.0000   -1.009200E+6      
59 .Mak          .              .             1.0000    -67280.0000      
59 .Kuk          .              .             1.0000   -100920.0000      
59 .Kok          .              .             1.0000    -67280.0000      
60 .Mat          .              .             1.0000   -348100.0000      
GAMS 24.8.1  r59919 Released Dec 22, 2016 DEX-DEG x86 64bit/Mac OS X                                                                                                                                                                  01/17/17 22:39:53 Page 64
G e n e r a l   A l g e b r a i c   M o d e l i n g   S y s t e m
Solution Report     SOLVE final Using MIP From line 358


     VAR r  1 if we buy n boats of timber i, 0 otherwise

               LOWER          LEVEL          UPPER         MARGINAL

60 .Kut          .              .             1.0000   -174050.0000      
60 .Kot          .              .             1.0000   -1.044300E+6      
60 .Mak          .              .             1.0000    -69620.0000      
60 .Kuk          .              .             1.0000   -104430.0000      
60 .Kok          .              .             1.0000    -69620.0000      
61 .Mat          .              .             1.0000   -360000.0000      
61 .Kut          .              .             1.0000   -180000.0000      
61 .Kot          .              .             1.0000   -1.080000E+6      
61 .Mak          .              .             1.0000    -72000.0000      
61 .Kuk          .              .             1.0000   -108000.0000      
61 .Kok          .              .             1.0000    -72000.0000      
62 .Mat          .              .             1.0000   -372100.0000      
62 .Kut          .              .             1.0000   -186050.0000      
62 .Kot          .              .             1.0000   -1.116300E+6      
62 .Mak          .              .             1.0000    -74420.0000      
62 .Kuk          .              .             1.0000   -111630.0000      
62 .Kok          .              .             1.0000    -74420.0000      
63 .Mat          .              .             1.0000   -384400.0000      
63 .Kut          .              .             1.0000   -192200.0000      
63 .Kot          .              .             1.0000   -1.153200E+6      
63 .Mak          .              .             1.0000    -76880.0000      
63 .Kuk          .              .             1.0000   -115320.0000      
63 .Kok          .              .             1.0000    -76880.0000      
64 .Mat          .              .             1.0000   -396900.0000      
64 .Kut          .              .             1.0000   -198450.0000      
64 .Kot          .              .             1.0000   -1.190700E+6      
64 .Mak          .              .             1.0000    -79380.0000      
64 .Kuk          .              .             1.0000   -119070.0000      
64 .Kok          .              .             1.0000    -79380.0000      
65 .Mat          .              .             1.0000   -409600.0000      
65 .Kut          .              .             1.0000   -204800.0000      
65 .Kot          .              .             1.0000   -1.228800E+6      
65 .Mak          .              .             1.0000    -81920.0000      
65 .Kuk          .              .             1.0000   -122880.0000      
65 .Kok          .              .             1.0000    -81920.0000      
66 .Mat          .              .             1.0000   -422500.0000      
66 .Kut          .              .             1.0000   -211250.0000      
66 .Kot          .              .             1.0000   -1.267500E+6      
66 .Mak          .              .             1.0000    -84500.0000      
66 .Kuk          .              .             1.0000   -126750.0000      
66 .Kok          .              .             1.0000    -84500.0000      
67 .Mat          .              .             1.0000   -435600.0000      
67 .Kut          .              .             1.0000   -217800.0000      
67 .Kot          .              .             1.0000   -1.306800E+6      
67 .Mak          .              .             1.0000    -87120.0000      
67 .Kuk          .              .             1.0000   -130680.0000      
67 .Kok          .              .             1.0000    -87120.0000      
68 .Mat          .              .             1.0000   -448900.0000      
68 .Kut          .              .             1.0000   -224450.0000      
GAMS 24.8.1  r59919 Released Dec 22, 2016 DEX-DEG x86 64bit/Mac OS X                                                                                                                                                                  01/17/17 22:39:53 Page 65
G e n e r a l   A l g e b r a i c   M o d e l i n g   S y s t e m
Solution Report     SOLVE final Using MIP From line 358


     VAR r  1 if we buy n boats of timber i, 0 otherwise

               LOWER          LEVEL          UPPER         MARGINAL

68 .Kot          .              .             1.0000   -1.346700E+6      
68 .Mak          .              .             1.0000    -89780.0000      
68 .Kuk          .              .             1.0000   -134670.0000      
68 .Kok          .              .             1.0000    -89780.0000      
69 .Mat          .              .             1.0000   -462400.0000      
69 .Kut          .              .             1.0000   -231200.0000      
69 .Kot          .              .             1.0000   -1.387200E+6      
69 .Mak          .              .             1.0000    -92480.0000      
69 .Kuk          .              .             1.0000   -138720.0000      
69 .Kok          .              .             1.0000    -92480.0000      
70 .Mat          .              .             1.0000   -476100.0000      
70 .Kut          .              .             1.0000   -238050.0000      
70 .Kot          .              .             1.0000   -1.428300E+6      
70 .Mak          .              .             1.0000    -95220.0000      
70 .Kuk          .              .             1.0000   -142830.0000      
70 .Kok          .              .             1.0000    -95220.0000      
71 .Mat          .              .             1.0000   -490000.0000      
71 .Kut          .              .             1.0000   -245000.0000      
71 .Kot          .              .             1.0000   -1.470000E+6      
71 .Mak          .              .             1.0000    -98000.0000      
71 .Kuk          .              .             1.0000   -147000.0000      
71 .Kok          .              .             1.0000    -98000.0000      
72 .Mat          .              .             1.0000   -504100.0000      
72 .Kut          .              .             1.0000   -252050.0000      
72 .Kot          .              .             1.0000   -1.512300E+6      
72 .Mak          .              .             1.0000   -100820.0000      
72 .Kuk          .              .             1.0000   -151230.0000      
72 .Kok          .              .             1.0000   -100820.0000      
73 .Mat          .              .             1.0000   -518400.0000      
73 .Kut          .              .             1.0000   -259200.0000      
73 .Kot          .              .             1.0000   -1.555200E+6      
73 .Mak          .              .             1.0000   -103680.0000      
73 .Kuk          .              .             1.0000   -155520.0000      
73 .Kok          .              .             1.0000   -103680.0000      
74 .Mat          .              .             1.0000   -532900.0000      
74 .Kut          .              .             1.0000   -266450.0000      
74 .Kot          .              .             1.0000   -1.598700E+6      
74 .Mak          .              .             1.0000   -106580.0000      
74 .Kuk          .              .             1.0000   -159870.0000      
74 .Kok          .              .             1.0000   -106580.0000      
75 .Mat          .              .             1.0000   -547600.0000      
75 .Kut          .              .             1.0000   -273800.0000      
75 .Kot          .              .             1.0000   -1.642800E+6      
75 .Mak          .              .             1.0000   -109520.0000      
75 .Kuk          .              .             1.0000   -164280.0000      
75 .Kok          .              .             1.0000   -109520.0000      
76 .Mat          .              .             1.0000   -562500.0000      
76 .Kut          .              .             1.0000   -281250.0000      
76 .Kot          .              .             1.0000   -1.687500E+6      
GAMS 24.8.1  r59919 Released Dec 22, 2016 DEX-DEG x86 64bit/Mac OS X                                                                                                                                                                  01/17/17 22:39:53 Page 66
G e n e r a l   A l g e b r a i c   M o d e l i n g   S y s t e m
Solution Report     SOLVE final Using MIP From line 358


     VAR r  1 if we buy n boats of timber i, 0 otherwise

               LOWER          LEVEL          UPPER         MARGINAL

76 .Mak          .              .             1.0000   -112500.0000      
76 .Kuk          .              .             1.0000   -168750.0000      
76 .Kok          .              .             1.0000   -112500.0000      
77 .Mat          .              .             1.0000   -577600.0000      
77 .Kut          .              .             1.0000   -288800.0000      
77 .Kot          .              .             1.0000   -1.732800E+6      
77 .Mak          .              .             1.0000   -115520.0000      
77 .Kuk          .              .             1.0000   -173280.0000      
77 .Kok          .              .             1.0000   -115520.0000      
78 .Mat          .              .             1.0000   -592900.0000      
78 .Kut          .              .             1.0000   -296450.0000      
78 .Kot          .              .             1.0000   -1.778700E+6      
78 .Mak          .              .             1.0000   -118580.0000      
78 .Kuk          .              .             1.0000   -177870.0000      
78 .Kok          .              .             1.0000   -118580.0000      
79 .Mat          .              .             1.0000   -608400.0000      
79 .Kut          .              .             1.0000   -304200.0000      
79 .Kot          .              .             1.0000   -1.825200E+6      
79 .Mak          .              .             1.0000   -121680.0000      
79 .Kuk          .              .             1.0000   -182520.0000      
79 .Kok          .              .             1.0000   -121680.0000      
80 .Mat          .              .             1.0000   -624100.0000      
80 .Kut          .              .             1.0000   -312050.0000      
80 .Kot          .              .             1.0000   -1.872300E+6      
80 .Mak          .              .             1.0000   -124820.0000      
80 .Kuk          .              .             1.0000   -187230.0000      
80 .Kok          .              .             1.0000   -124820.0000      
81 .Mat          .              .             1.0000   -640000.0000      
81 .Kut          .              .             1.0000   -320000.0000      
81 .Kot          .              .             1.0000   -1.920000E+6      
81 .Mak          .              .             1.0000   -128000.0000      
81 .Kuk          .              .             1.0000   -192000.0000      
81 .Kok          .              .             1.0000   -128000.0000      
82 .Mat          .              .             1.0000   -656100.0000      
82 .Kut          .              .             1.0000   -328050.0000      
82 .Kot          .              .             1.0000   -1.968300E+6      
82 .Mak          .              .             1.0000   -131220.0000      
82 .Kuk          .              .             1.0000   -196830.0000      
82 .Kok          .              .             1.0000   -131220.0000      
83 .Mat          .              .             1.0000   -672400.0000      
83 .Kut          .              .             1.0000   -336200.0000      
83 .Kot          .              .             1.0000   -2.017200E+6      
83 .Mak          .              .             1.0000   -134480.0000      
83 .Kuk          .              .             1.0000   -201720.0000      
83 .Kok          .              .             1.0000   -134480.0000      
84 .Mat          .              .             1.0000   -688900.0000      
84 .Kut          .              .             1.0000   -344450.0000      
84 .Kot          .              .             1.0000   -2.066700E+6      
84 .Mak          .              .             1.0000   -137780.0000      
GAMS 24.8.1  r59919 Released Dec 22, 2016 DEX-DEG x86 64bit/Mac OS X                                                                                                                                                                  01/17/17 22:39:53 Page 67
G e n e r a l   A l g e b r a i c   M o d e l i n g   S y s t e m
Solution Report     SOLVE final Using MIP From line 358


     VAR r  1 if we buy n boats of timber i, 0 otherwise

               LOWER          LEVEL          UPPER         MARGINAL

84 .Kuk          .              .             1.0000   -206670.0000      
84 .Kok          .              .             1.0000   -137780.0000      
85 .Mat          .              .             1.0000   -705600.0000      
85 .Kut          .              .             1.0000   -352800.0000      
85 .Kot          .              .             1.0000   -2.116800E+6      
85 .Mak          .              .             1.0000   -141120.0000      
85 .Kuk          .              .             1.0000   -211680.0000      
85 .Kok          .              .             1.0000   -141120.0000      
86 .Mat          .              .             1.0000   -722500.0000      
86 .Kut          .              .             1.0000   -361250.0000      
86 .Kot          .              .             1.0000   -2.167500E+6      
86 .Mak          .              .             1.0000   -144500.0000      
86 .Kuk          .              .             1.0000   -216750.0000      
86 .Kok          .              .             1.0000   -144500.0000      
87 .Mat          .              .             1.0000   -739600.0000      
87 .Kut          .              .             1.0000   -369800.0000      
87 .Kot          .              .             1.0000   -2.218800E+6      
87 .Mak          .              .             1.0000   -147920.0000      
87 .Kuk          .              .             1.0000   -221880.0000      
87 .Kok          .              .             1.0000   -147920.0000      
88 .Mat          .              .             1.0000   -756900.0000      
88 .Kut          .              .             1.0000   -378450.0000      
88 .Kot          .              .             1.0000   -2.270700E+6      
88 .Mak          .              .             1.0000   -151380.0000      
88 .Kuk          .              .             1.0000   -227070.0000      
88 .Kok          .              .             1.0000   -151380.0000      
89 .Mat          .              .             1.0000   -774400.0000      
89 .Kut          .              .             1.0000   -387200.0000      
89 .Kot          .              .             1.0000   -2.323200E+6      
89 .Mak          .              .             1.0000   -154880.0000      
89 .Kuk          .              .             1.0000   -232320.0000      
89 .Kok          .              .             1.0000   -154880.0000      
90 .Mat          .              .             1.0000   -792100.0000      
90 .Kut          .              .             1.0000   -396050.0000      
90 .Kot          .              .             1.0000   -2.376300E+6      
90 .Mak          .              .             1.0000   -158420.0000      
90 .Kuk          .              .             1.0000   -237630.0000      
90 .Kok          .              .             1.0000   -158420.0000      
91 .Mat          .              .             1.0000   -810000.0000      
91 .Kut          .              .             1.0000   -405000.0000      
91 .Kot          .              .             1.0000   -2.430000E+6      
91 .Mak          .              .             1.0000   -162000.0000      
91 .Kuk          .              .             1.0000   -243000.0000      
91 .Kok          .              .             1.0000   -162000.0000      
92 .Mat          .              .             1.0000   -828100.0000      
92 .Kut          .              .             1.0000   -414050.0000      
92 .Kot          .              .             1.0000   -2.484300E+6      
92 .Mak          .              .             1.0000   -165620.0000      
92 .Kuk          .              .             1.0000   -248430.0000      
GAMS 24.8.1  r59919 Released Dec 22, 2016 DEX-DEG x86 64bit/Mac OS X                                                                                                                                                                  01/17/17 22:39:53 Page 68
G e n e r a l   A l g e b r a i c   M o d e l i n g   S y s t e m
Solution Report     SOLVE final Using MIP From line 358


     VAR r  1 if we buy n boats of timber i, 0 otherwise

               LOWER          LEVEL          UPPER         MARGINAL

92 .Kok          .              .             1.0000   -165620.0000      
93 .Mat          .              .             1.0000   -846400.0000      
93 .Kut          .              .             1.0000   -423200.0000      
93 .Kot          .              .             1.0000   -2.539200E+6      
93 .Mak          .              .             1.0000   -169280.0000      
93 .Kuk          .              .             1.0000   -253920.0000      
93 .Kok          .              .             1.0000   -169280.0000      
94 .Mat          .              .             1.0000   -864900.0000      
94 .Kut          .              .             1.0000   -432450.0000      
94 .Kot          .              .             1.0000   -2.594700E+6      
94 .Mak          .              .             1.0000   -172980.0000      
94 .Kuk          .              .             1.0000   -259470.0000      
94 .Kok          .              .             1.0000   -172980.0000      
95 .Mat          .              .             1.0000   -883600.0000      
95 .Kut          .              .             1.0000   -441800.0000      
95 .Kot          .              .             1.0000   -2.650800E+6      
95 .Mak          .              .             1.0000   -176720.0000      
95 .Kuk          .              .             1.0000   -265080.0000      
95 .Kok          .              .             1.0000   -176720.0000      
96 .Mat          .              .             1.0000   -902500.0000      
96 .Kut          .              .             1.0000   -451250.0000      
96 .Kot          .              .             1.0000   -2.707500E+6      
96 .Mak          .              .             1.0000   -180500.0000      
96 .Kuk          .              .             1.0000   -270750.0000      
96 .Kok          .              .             1.0000   -180500.0000      
97 .Mat          .              .             1.0000   -921600.0000      
97 .Kut          .              .             1.0000   -460800.0000      
97 .Kot          .              .             1.0000   -2.764800E+6      
97 .Mak          .              .             1.0000   -184320.0000      
97 .Kuk          .              .             1.0000   -276480.0000      
97 .Kok          .              .             1.0000   -184320.0000      
98 .Mat          .              .             1.0000   -940900.0000      
98 .Kut          .              .             1.0000   -470450.0000      
98 .Kot          .              .             1.0000   -2.822700E+6      
98 .Mak          .              .             1.0000   -188180.0000      
98 .Kuk          .              .             1.0000   -282270.0000      
98 .Kok          .              .             1.0000   -188180.0000      
99 .Mat          .              .             1.0000   -960400.0000      
99 .Kut          .              .             1.0000   -480200.0000      
99 .Kot          .              .             1.0000   -2.881200E+6      
99 .Mak          .              .             1.0000   -192080.0000      
99 .Kuk          .              .             1.0000   -288120.0000      
99 .Kok          .              .             1.0000   -192080.0000      
100.Mat          .              .             1.0000   -980100.0000      
100.Kut          .              .             1.0000   -490050.0000      
100.Kot          .              .             1.0000   -2.940300E+6      
100.Mak          .              .             1.0000   -196020.0000      
100.Kuk          .              .             1.0000   -294030.0000      
100.Kok          .              .             1.0000   -196020.0000      
GAMS 24.8.1  r59919 Released Dec 22, 2016 DEX-DEG x86 64bit/Mac OS X                                                                                                                                                                  01/17/17 22:39:53 Page 69
G e n e r a l   A l g e b r a i c   M o d e l i n g   S y s t e m
Solution Report     SOLVE final Using MIP From line 358


     VAR r  1 if we buy n boats of timber i, 0 otherwise

               LOWER          LEVEL          UPPER         MARGINAL

101.Mat          .              .             1.0000   -1.000000E+6      
101.Kut          .              .             1.0000   -500000.0000      
101.Kot          .              .             1.0000   -3.000000E+6      
101.Mak          .              .             1.0000   -200000.0000      
101.Kuk          .              .             1.0000   -300000.0000      
101.Kok          .              .             1.0000   -200000.0000      
102.Mat          .              .             1.0000   -1.020100E+6      
102.Kut          .              .             1.0000   -510050.0000      
102.Kot          .              .             1.0000   -3.060300E+6      
102.Mak          .              .             1.0000   -204020.0000      
102.Kuk          .              .             1.0000   -306030.0000      
102.Kok          .              .             1.0000   -204020.0000      
103.Mat          .              .             1.0000   -1.040400E+6      
103.Kut          .              .             1.0000   -520200.0000      
103.Kot          .              .             1.0000   -3.121200E+6      
103.Mak          .              .             1.0000   -208080.0000      
103.Kuk          .              .             1.0000   -312120.0000      
103.Kok          .              .             1.0000   -208080.0000      
104.Mat          .              .             1.0000   -1.060900E+6      
104.Kut          .              .             1.0000   -530450.0000      
104.Kot          .              .             1.0000   -3.182700E+6      
104.Mak          .              .             1.0000   -212180.0000      
104.Kuk          .              .             1.0000   -318270.0000      
104.Kok          .              .             1.0000   -212180.0000      
105.Mat          .              .             1.0000   -1.081600E+6      
105.Kut          .              .             1.0000   -540800.0000      
105.Kot          .              .             1.0000   -3.244800E+6      
105.Mak          .              .             1.0000   -216320.0000      
105.Kuk          .              .             1.0000   -324480.0000      
105.Kok          .              .             1.0000   -216320.0000      
106.Mat          .              .             1.0000   -1.102500E+6      
106.Kut          .              .             1.0000   -551250.0000      
106.Kot          .              .             1.0000   -3.307500E+6      
106.Mak          .              .             1.0000   -220500.0000      
106.Kuk          .              .             1.0000   -330750.0000      
106.Kok          .              .             1.0000   -220500.0000      
107.Mat          .              .             1.0000   -1.123600E+6      
107.Kut          .              .             1.0000   -561800.0000      
107.Kot          .              .             1.0000   -3.370800E+6      
107.Mak          .              .             1.0000   -224720.0000      
107.Kuk          .              .             1.0000   -337080.0000      
107.Kok          .              .             1.0000   -224720.0000      
GAMS 24.8.1  r59919 Released Dec 22, 2016 DEX-DEG x86 64bit/Mac OS X                                                                                                                                                                  01/17/17 22:39:53 Page 70
G e n e r a l   A l g e b r a i c   M o d e l i n g   S y s t e m
Solution Report     SOLVE final Using MIP From line 358


---- VAR u  1 if we use n boats for product j shiping to region k, 0 otherwise

                  LOWER          LEVEL          UPPER         MARGINAL

1 .Mas .EU          .              .             1.0000         EPS         
1 .Mas .IE          .             1.0000         1.0000         EPS         
1 .Mas .PA          .              .             1.0000         EPS         
1 .Mas .KI          .              .             1.0000         EPS         
1 .Kus .EU          .             1.0000         1.0000         EPS         
1 .Kus .IE          .             1.0000         1.0000         EPS         
1 .Kus .PA          .             1.0000         1.0000         EPS         
1 .Kus .KI          .             1.0000         1.0000         EPS         
1 .Kos .EU          .             1.0000         1.0000         EPS         
1 .Kos .IE          .             1.0000         1.0000         EPS         
1 .Kos .PA          .             1.0000         1.0000         EPS         
1 .Kos .KI          .             1.0000         1.0000         EPS         
1 .Kuv .EU          .              .             1.0000         EPS         
1 .Kuv .IE          .             1.0000         1.0000         EPS         
1 .Kuv .PA          .             1.0000         1.0000         EPS         
1 .Kuv .KI          .             1.0000         1.0000         EPS         
1 .Kov .EU          .              .             1.0000         EPS         
1 .Kov .IE          .             1.0000         1.0000         EPS         
1 .Kov .PA          .             1.0000         1.0000         EPS         
1 .Kov .KI          .             1.0000         1.0000         EPS         
1 .Hsel.EU          .             1.0000         1.0000         EPS         
1 .Hsel.IE          .              .             1.0000         EPS         
1 .Hsel.PA          .             1.0000         1.0000         EPS         
1 .Hsel.KI          .              .             1.0000         EPS         
1 .Lsel.EU          .              .             1.0000         EPS         
1 .Lsel.IE          .              .             1.0000         EPS         
1 .Lsel.PA          .             1.0000         1.0000         EPS         
1 .Lsel.KI          .              .             1.0000         EPS         
1 .Pap .EU          .              .             1.0000         EPS         
1 .Pap .IE          .              .             1.0000         EPS         
1 .Pap .PA          .             1.0000         1.0000         EPS         
1 .Pap .KI          .              .             1.0000         EPS         
2 .Mas .EU          .              .             1.0000     15600.0000      
2 .Mas .IE          .              .             1.0000     12000.0000      
2 .Mas .PA          .             1.0000         1.0000     12800.0000      
2 .Mas .KI          .             1.0000         1.0000     13500.0000      
2 .Kus .EU          .              .             1.0000         EPS         
2 .Kus .IE          .              .             1.0000         EPS         
2 .Kus .PA          .              .             1.0000         EPS         
2 .Kus .KI          .              .             1.0000         EPS         
2 .Kos .EU          .              .             1.0000     11600.0000      
2 .Kos .IE          .              .             1.0000     12000.0000      
2 .Kos .PA          .              .             1.0000     12800.0000      
2 .Kos .KI          .              .             1.0000     13500.0000      
2 .Kuv .EU          .              .             1.0000     43600.0000      
2 .Kuv .IE          .              .             1.0000     37000.0000      
2 .Kuv .PA          .              .             1.0000     34800.0000      
2 .Kuv .KI          .              .             1.0000     33500.0000      
2 .Kov .EU          .              .             1.0000     42600.0000      
GAMS 24.8.1  r59919 Released Dec 22, 2016 DEX-DEG x86 64bit/Mac OS X                                                                                                                                                                  01/17/17 22:39:53 Page 71
G e n e r a l   A l g e b r a i c   M o d e l i n g   S y s t e m
Solution Report     SOLVE final Using MIP From line 358


     VAR u  1 if we use n boats for product j shiping to region k, 0 otherwise

                  LOWER          LEVEL          UPPER         MARGINAL

2 .Kov .IE          .              .             1.0000     40000.0000      
2 .Kov .PA          .              .             1.0000     37800.0000      
2 .Kov .KI          .              .             1.0000     36500.0000      
2 .Hsel.EU          .              .             1.0000     22800.0000      
2 .Hsel.IE          .              .             1.0000     24600.0000      
2 .Hsel.PA          .              .             1.0000     22500.0000      
2 .Hsel.KI          .              .             1.0000     25400.0000      
2 .Lsel.EU          .              .             1.0000     24700.0000      
2 .Lsel.IE          .              .             1.0000     27800.0000      
2 .Lsel.PA          .              .             1.0000     22500.0000      
2 .Lsel.KI          .             1.0000         1.0000     24300.0000      
2 .Pap .EU          .              .             1.0000     44600.0000      
2 .Pap .IE          .              .             1.0000     46000.0000      
2 .Pap .PA          .              .             1.0000     41800.0000      
2 .Pap .KI          .              .             1.0000     46500.0000      
3 .Mas .EU          .              .             1.0000     30400.0000      
3 .Mas .IE          .              .             1.0000     22000.0000      
3 .Mas .PA          .              .             1.0000     23200.0000      
3 .Mas .KI          .              .             1.0000     24000.0000      
3 .Kus .EU          .              .             1.0000         EPS         
3 .Kus .IE          .              .             1.0000         EPS         
3 .Kus .PA          .              .             1.0000         EPS         
3 .Kus .KI          .              .             1.0000         EPS         
3 .Kos .EU          .              .             1.0000     20400.0000      
3 .Kos .IE          .              .             1.0000     20000.0000      
3 .Kos .PA          .              .             1.0000     21200.0000      
3 .Kos .KI          .              .             1.0000     22000.0000      
3 .Kuv .EU          .              .             1.0000     86400.0000      
3 .Kuv .IE          .              .             1.0000     72000.0000      
3 .Kuv .PA          .              .             1.0000     67200.0000      
3 .Kuv .KI          .              .             1.0000     64000.0000      
3 .Kov .EU          .              .             1.0000     84400.0000      
3 .Kov .IE          .              .             1.0000     78000.0000      
3 .Kov .PA          .              .             1.0000     73200.0000      
3 .Kov .KI          .              .             1.0000     70000.0000      
3 .Hsel.EU          .              .             1.0000     45200.0000      
3 .Hsel.IE          .              .             1.0000     48400.0000      
3 .Hsel.PA          .              .             1.0000     44000.0000      
3 .Hsel.KI          .              .             1.0000     49600.0000      
3 .Lsel.EU          .             1.0000         1.0000     48800.0000      
3 .Lsel.IE          .              .             1.0000     55200.0000      
3 .Lsel.PA          .              .             1.0000     44000.0000      
3 .Lsel.KI          .              .             1.0000     47200.0000      
3 .Pap .EU          .              .             1.0000     88400.0000      
3 .Pap .IE          .             1.0000         1.0000     90000.0000      
3 .Pap .PA          .              .             1.0000     81200.0000      
3 .Pap .KI          .             1.0000         1.0000     90000.0000      
4 .Mas .EU          .              .             1.0000     44400.0000      
4 .Mas .IE          .              .             1.0000     30000.0000      
GAMS 24.8.1  r59919 Released Dec 22, 2016 DEX-DEG x86 64bit/Mac OS X                                                                                                                                                                  01/17/17 22:39:53 Page 72
G e n e r a l   A l g e b r a i c   M o d e l i n g   S y s t e m
Solution Report     SOLVE final Using MIP From line 358


     VAR u  1 if we use n boats for product j shiping to region k, 0 otherwise

                  LOWER          LEVEL          UPPER         MARGINAL

4 .Mas .PA          .              .             1.0000     31200.0000      
4 .Mas .KI          .              .             1.0000     31500.0000      
4 .Kus .EU          .              .             1.0000         EPS         
4 .Kus .IE          .              .             1.0000         EPS         
4 .Kus .PA          .              .             1.0000         EPS         
4 .Kus .KI          .              .             1.0000         EPS         
4 .Kos .EU          .              .             1.0000     26400.0000      
4 .Kos .IE          .              .             1.0000     24000.0000      
4 .Kos .PA          .              .             1.0000     25200.0000      
4 .Kos .KI          .              .             1.0000     25500.0000      
4 .Kuv .EU          .              .             1.0000    128400.0000      
4 .Kuv .IE          .              .             1.0000    105000.0000      
4 .Kuv .PA          .              .             1.0000     97200.0000      
4 .Kuv .KI          .              .             1.0000     91500.0000      
4 .Kov .EU          .              .             1.0000    125400.0000      
4 .Kov .IE          .              .             1.0000    114000.0000      
4 .Kov .PA          .              .             1.0000    106200.0000      
4 .Kov .KI          .              .             1.0000    100500.0000      
4 .Hsel.EU          .              .             1.0000     67200.0000      
4 .Hsel.IE          .             1.0000         1.0000     71400.0000      
4 .Hsel.PA          .              .             1.0000     64500.0000      
4 .Hsel.KI          .             1.0000         1.0000     72600.0000      
4 .Lsel.EU          .              .             1.0000     72300.0000      
4 .Lsel.IE          .              .             1.0000     82200.0000      
4 .Lsel.PA          .              .             1.0000     64500.0000      
4 .Lsel.KI          .              .             1.0000     68700.0000      
4 .Pap .EU          .              .             1.0000    131400.0000      
4 .Pap .IE          .              .             1.0000    132000.0000      
4 .Pap .PA          .              .             1.0000    118200.0000      
4 .Pap .KI          .              .             1.0000    130500.0000      
5 .Mas .EU          .              .             1.0000     57600.0000      
5 .Mas .IE          .              .             1.0000     36000.0000      
5 .Mas .PA          .              .             1.0000     36800.0000      
5 .Mas .KI          .              .             1.0000     36000.0000      
5 .Kus .EU          .              .             1.0000         EPS         
5 .Kus .IE          .              .             1.0000         EPS         
5 .Kus .PA          .              .             1.0000         EPS         
5 .Kus .KI          .              .             1.0000         EPS         
5 .Kos .EU          .              .             1.0000     29600.0000      
5 .Kos .IE          .              .             1.0000     24000.0000      
5 .Kos .PA          .              .             1.0000     24800.0000      
5 .Kos .KI          .              .             1.0000     24000.0000      
5 .Kuv .EU          .              .             1.0000    169600.0000      
5 .Kuv .IE          .              .             1.0000    136000.0000      
5 .Kuv .PA          .              .             1.0000    124800.0000      
5 .Kuv .KI          .              .             1.0000    116000.0000      
5 .Kov .EU          .             1.0000         1.0000    165600.0000      
5 .Kov .IE          .              .             1.0000    148000.0000      
5 .Kov .PA          .              .             1.0000    136800.0000      
GAMS 24.8.1  r59919 Released Dec 22, 2016 DEX-DEG x86 64bit/Mac OS X                                                                                                                                                                  01/17/17 22:39:53 Page 73
G e n e r a l   A l g e b r a i c   M o d e l i n g   S y s t e m
Solution Report     SOLVE final Using MIP From line 358


     VAR u  1 if we use n boats for product j shiping to region k, 0 otherwise

                  LOWER          LEVEL          UPPER         MARGINAL

5 .Kov .KI          .              .             1.0000    128000.0000      
5 .Hsel.EU          .              .             1.0000     88800.0000      
5 .Hsel.IE          .              .             1.0000     93600.0000      
5 .Hsel.PA          .              .             1.0000     84000.0000      
5 .Hsel.KI          .              .             1.0000     94400.0000      
5 .Lsel.EU          .              .             1.0000     95200.0000      
5 .Lsel.IE          .              .             1.0000    108800.0000      
5 .Lsel.PA          .              .             1.0000     84000.0000      
5 .Lsel.KI          .              .             1.0000     88800.0000      
5 .Pap .EU          .             1.0000         1.0000    173600.0000      
5 .Pap .IE          .              .             1.0000    172000.0000      
5 .Pap .PA          .              .             1.0000    152800.0000      
5 .Pap .KI          .              .             1.0000    168000.0000      
6 .Mas .EU          .             1.0000         1.0000     70000.0000      
6 .Mas .IE          .              .             1.0000     40000.0000      
6 .Mas .PA          .              .             1.0000     40000.0000      
6 .Mas .KI          .              .             1.0000     37500.0000      
6 .Kus .EU          .              .             1.0000         EPS         
6 .Kus .IE          .              .             1.0000         EPS         
6 .Kus .PA          .              .             1.0000         EPS         
6 .Kus .KI          .              .             1.0000         EPS         
6 .Kos .EU          .              .             1.0000     30000.0000      
6 .Kos .IE          .              .             1.0000     20000.0000      
6 .Kos .PA          .              .             1.0000     20000.0000      
6 .Kos .KI          .              .             1.0000     17500.0000      
6 .Kuv .EU          .             1.0000         1.0000    210000.0000      
6 .Kuv .IE          .              .             1.0000    165000.0000      
6 .Kuv .PA          .              .             1.0000    150000.0000      
6 .Kuv .KI          .              .             1.0000    137500.0000      
6 .Kov .EU          .              .             1.0000    205000.0000      
6 .Kov .IE          .              .             1.0000    180000.0000      
6 .Kov .PA          .              .             1.0000    165000.0000      
6 .Kov .KI          .              .             1.0000    152500.0000      
6 .Hsel.EU          .              .             1.0000    110000.0000      
6 .Hsel.IE          .              .             1.0000    115000.0000      
6 .Hsel.PA          .              .             1.0000    102500.0000      
6 .Hsel.KI          .              .             1.0000    115000.0000      
6 .Lsel.EU          .              .             1.0000    117500.0000      
6 .Lsel.IE          .              .             1.0000    135000.0000      
6 .Lsel.PA          .              .             1.0000    102500.0000      
6 .Lsel.KI          .              .             1.0000    107500.0000      
6 .Pap .EU          .              .             1.0000    215000.0000      
6 .Pap .IE          .              .             1.0000    210000.0000      
6 .Pap .PA          .              .             1.0000    185000.0000      
6 .Pap .KI          .              .             1.0000    202500.0000      
7 .Mas .EU          .              .             1.0000     81600.0000      
7 .Mas .IE          .              .             1.0000     42000.0000      
7 .Mas .PA          .              .             1.0000     40800.0000      
7 .Mas .KI          .              .             1.0000     36000.0000      
GAMS 24.8.1  r59919 Released Dec 22, 2016 DEX-DEG x86 64bit/Mac OS X                                                                                                                                                                  01/17/17 22:39:53 Page 74
G e n e r a l   A l g e b r a i c   M o d e l i n g   S y s t e m
Solution Report     SOLVE final Using MIP From line 358


     VAR u  1 if we use n boats for product j shiping to region k, 0 otherwise

                  LOWER          LEVEL          UPPER         MARGINAL

7 .Kus .EU          .              .             1.0000         EPS         
7 .Kus .IE          .              .             1.0000         EPS         
7 .Kus .PA          .              .             1.0000         EPS         
7 .Kus .KI          .              .             1.0000         EPS         
7 .Kos .EU          .              .             1.0000     27600.0000      
7 .Kos .IE          .              .             1.0000     12000.0000      
7 .Kos .PA          .              .             1.0000     10800.0000      
7 .Kos .KI          .              .             1.0000      6000.0000      
7 .Kuv .EU          .              .             1.0000    249600.0000      
7 .Kuv .IE          .              .             1.0000    192000.0000      
7 .Kuv .PA          .              .             1.0000    172800.0000      
7 .Kuv .KI          .              .             1.0000    156000.0000      
7 .Kov .EU          .              .             1.0000    243600.0000      
7 .Kov .IE          .              .             1.0000    210000.0000      
7 .Kov .PA          .              .             1.0000    190800.0000      
7 .Kov .KI          .              .             1.0000    174000.0000      
7 .Hsel.EU          .              .             1.0000    130800.0000      
7 .Hsel.IE          .              .             1.0000    135600.0000      
7 .Hsel.PA          .              .             1.0000    120000.0000      
7 .Hsel.KI          .              .             1.0000    134400.0000      
7 .Lsel.EU          .              .             1.0000    139200.0000      
7 .Lsel.IE          .              .             1.0000    160800.0000      
7 .Lsel.PA          .              .             1.0000    120000.0000      
7 .Lsel.KI          .              .             1.0000    124800.0000      
7 .Pap .EU          .              .             1.0000    255600.0000      
7 .Pap .IE          .              .             1.0000    246000.0000      
7 .Pap .PA          .              .             1.0000    214800.0000      
7 .Pap .KI          .              .             1.0000    234000.0000      
8 .Mas .EU          .              .             1.0000     92400.0000      
8 .Mas .IE          .              .             1.0000     42000.0000      
8 .Mas .PA          .              .             1.0000     39200.0000      
8 .Mas .KI          .              .             1.0000     31500.0000      
8 .Kus .EU          .              .             1.0000         EPS         
8 .Kus .IE          .              .             1.0000         EPS         
8 .Kus .PA          .              .             1.0000         EPS         
8 .Kus .KI          .              .             1.0000         EPS         
8 .Kos .EU          .              .             1.0000     22400.0000      
8 .Kos .IE          .              .             1.0000         EPS         
8 .Kos .PA          .              .             1.0000     -2800.0000      
8 .Kos .KI          .              .             1.0000    -10500.0000      
8 .Kuv .EU          .              .             1.0000    288400.0000      
8 .Kuv .IE          .              .             1.0000    217000.0000      
8 .Kuv .PA          .              .             1.0000    193200.0000      
8 .Kuv .KI          .              .             1.0000    171500.0000      
8 .Kov .EU          .              .             1.0000    281400.0000      
8 .Kov .IE          .              .             1.0000    238000.0000      
8 .Kov .PA          .              .             1.0000    214200.0000      
8 .Kov .KI          .              .             1.0000    192500.0000      
8 .Hsel.EU          .              .             1.0000    151200.0000      
GAMS 24.8.1  r59919 Released Dec 22, 2016 DEX-DEG x86 64bit/Mac OS X                                                                                                                                                                  01/17/17 22:39:53 Page 75
G e n e r a l   A l g e b r a i c   M o d e l i n g   S y s t e m
Solution Report     SOLVE final Using MIP From line 358


     VAR u  1 if we use n boats for product j shiping to region k, 0 otherwise

                  LOWER          LEVEL          UPPER         MARGINAL

8 .Hsel.IE          .              .             1.0000    155400.0000      
8 .Hsel.PA          .              .             1.0000    136500.0000      
8 .Hsel.KI          .              .             1.0000    152600.0000      
8 .Lsel.EU          .              .             1.0000    160300.0000      
8 .Lsel.IE          .              .             1.0000    186200.0000      
8 .Lsel.PA          .              .             1.0000    136500.0000      
8 .Lsel.KI          .              .             1.0000    140700.0000      
8 .Pap .EU          .              .             1.0000    295400.0000      
8 .Pap .IE          .              .             1.0000    280000.0000      
8 .Pap .PA          .              .             1.0000    242200.0000      
8 .Pap .KI          .              .             1.0000    262500.0000      
9 .Mas .EU          .              .             1.0000    102400.0000      
9 .Mas .IE          .              .             1.0000     40000.0000      
9 .Mas .PA          .              .             1.0000     35200.0000      
9 .Mas .KI          .              .             1.0000     24000.0000      
9 .Kus .EU          .              .             1.0000         EPS         
9 .Kus .IE          .              .             1.0000         EPS         
9 .Kus .PA          .              .             1.0000         EPS         
9 .Kus .KI          .              .             1.0000         EPS         
9 .Kos .EU          .              .             1.0000     14400.0000      
9 .Kos .IE          .              .             1.0000    -16000.0000      
9 .Kos .PA          .              .             1.0000    -20800.0000      
9 .Kos .KI          .              .             1.0000    -32000.0000      
9 .Kuv .EU          .              .             1.0000    326400.0000      
9 .Kuv .IE          .              .             1.0000    240000.0000      
9 .Kuv .PA          .              .             1.0000    211200.0000      
9 .Kuv .KI          .              .             1.0000    184000.0000      
9 .Kov .EU          .              .             1.0000    318400.0000      
9 .Kov .IE          .              .             1.0000    264000.0000      
9 .Kov .PA          .              .             1.0000    235200.0000      
9 .Kov .KI          .              .             1.0000    208000.0000      
9 .Hsel.EU          .              .             1.0000    171200.0000      
9 .Hsel.IE          .              .             1.0000    174400.0000      
9 .Hsel.PA          .              .             1.0000    152000.0000      
9 .Hsel.KI          .              .             1.0000    169600.0000      
9 .Lsel.EU          .              .             1.0000    180800.0000      
9 .Lsel.IE          .              .             1.0000    211200.0000      
9 .Lsel.PA          .              .             1.0000    152000.0000      
9 .Lsel.KI          .              .             1.0000    155200.0000      
9 .Pap .EU          .              .             1.0000    334400.0000      
9 .Pap .IE          .              .             1.0000    312000.0000      
9 .Pap .PA          .              .             1.0000    267200.0000      
9 .Pap .KI          .              .             1.0000    288000.0000      
10.Mas .EU          .              .             1.0000    111600.0000      
10.Mas .IE          .              .             1.0000     36000.0000      
10.Mas .PA          .              .             1.0000     28800.0000      
10.Mas .KI          .              .             1.0000     13500.0000      
10.Kus .EU          .              .             1.0000         EPS         
10.Kus .IE          .              .             1.0000         EPS         
GAMS 24.8.1  r59919 Released Dec 22, 2016 DEX-DEG x86 64bit/Mac OS X                                                                                                                                                                  01/17/17 22:39:53 Page 76
G e n e r a l   A l g e b r a i c   M o d e l i n g   S y s t e m
Solution Report     SOLVE final Using MIP From line 358


     VAR u  1 if we use n boats for product j shiping to region k, 0 otherwise

                  LOWER          LEVEL          UPPER         MARGINAL

10.Kus .PA          .              .             1.0000         EPS         
10.Kus .KI          .              .             1.0000         EPS         
10.Kos .EU          .              .             1.0000      3600.0000      
10.Kos .IE          .              .             1.0000    -36000.0000      
10.Kos .PA          .              .             1.0000    -43200.0000      
10.Kos .KI          .              .             1.0000    -58500.0000      
10.Kuv .EU          .              .             1.0000    363600.0000      
10.Kuv .IE          .              .             1.0000    261000.0000      
10.Kuv .PA          .              .             1.0000    226800.0000      
10.Kuv .KI          .              .             1.0000    193500.0000      
10.Kov .EU          .              .             1.0000    354600.0000      
10.Kov .IE          .              .             1.0000    288000.0000      
10.Kov .PA          .              .             1.0000    253800.0000      
10.Kov .KI          .              .             1.0000    220500.0000      
10.Hsel.EU          .              .             1.0000    190800.0000      
10.Hsel.IE          .              .             1.0000    192600.0000      
10.Hsel.PA          .              .             1.0000    166500.0000      
10.Hsel.KI          .              .             1.0000    185400.0000      
10.Lsel.EU          .              .             1.0000    200700.0000      
10.Lsel.IE          .              .             1.0000    235800.0000      
10.Lsel.PA          .              .             1.0000    166500.0000      
10.Lsel.KI          .              .             1.0000    168300.0000      
10.Pap .EU          .              .             1.0000    372600.0000      
10.Pap .IE          .              .             1.0000    342000.0000      
10.Pap .PA          .              .             1.0000    289800.0000      
10.Pap .KI          .              .             1.0000    310500.0000      
11.Mas .EU          .              .             1.0000    120000.0000      
11.Mas .IE          .              .             1.0000     30000.0000      
11.Mas .PA          .              .             1.0000     20000.0000      
11.Mas .KI          .              .             1.0000         EPS         
11.Kus .EU          .              .             1.0000         EPS         
11.Kus .IE          .              .             1.0000         EPS         
11.Kus .PA          .              .             1.0000         EPS         
11.Kus .KI          .              .             1.0000         EPS         
11.Kos .EU          .              .             1.0000    -10000.0000      
11.Kos .IE          .              .             1.0000    -60000.0000      
11.Kos .PA          .              .             1.0000    -70000.0000      
11.Kos .KI          .              .             1.0000    -90000.0000      
11.Kuv .EU          .              .             1.0000    400000.0000      
11.Kuv .IE          .              .             1.0000    280000.0000      
11.Kuv .PA          .              .             1.0000    240000.0000      
11.Kuv .KI          .              .             1.0000    200000.0000      
11.Kov .EU          .              .             1.0000    390000.0000      
11.Kov .IE          .              .             1.0000    310000.0000      
11.Kov .PA          .              .             1.0000    270000.0000      
11.Kov .KI          .              .             1.0000    230000.0000      
11.Hsel.EU          .              .             1.0000    210000.0000      
11.Hsel.IE          .              .             1.0000    210000.0000      
11.Hsel.PA          .              .             1.0000    180000.0000      
GAMS 24.8.1  r59919 Released Dec 22, 2016 DEX-DEG x86 64bit/Mac OS X                                                                                                                                                                  01/17/17 22:39:53 Page 77
G e n e r a l   A l g e b r a i c   M o d e l i n g   S y s t e m
Solution Report     SOLVE final Using MIP From line 358


     VAR u  1 if we use n boats for product j shiping to region k, 0 otherwise

                  LOWER          LEVEL          UPPER         MARGINAL

11.Hsel.KI          .              .             1.0000    200000.0000      
11.Lsel.EU          .              .             1.0000    220000.0000      
11.Lsel.IE          .             1.0000         1.0000    260000.0000      
11.Lsel.PA          .              .             1.0000    180000.0000      
11.Lsel.KI          .              .             1.0000    180000.0000      
11.Pap .EU          .              .             1.0000    410000.0000      
11.Pap .IE          .              .             1.0000    370000.0000      
11.Pap .PA          .              .             1.0000    310000.0000      
11.Pap .KI          .              .             1.0000    330000.0000      
12.Mas .EU          .              .             1.0000    127600.0000      
12.Mas .IE          .              .             1.0000     22000.0000      
12.Mas .PA          .              .             1.0000      8800.0000      
12.Mas .KI          .              .             1.0000    -16500.0000      
12.Kus .EU          .              .             1.0000         EPS         
12.Kus .IE          .              .             1.0000         EPS         
12.Kus .PA          .              .             1.0000         EPS         
12.Kus .KI          .              .             1.0000         EPS         
12.Kos .EU          .              .             1.0000    -26400.0000      
12.Kos .IE          .              .             1.0000    -88000.0000      
12.Kos .PA          .              .             1.0000   -101200.0000      
12.Kos .KI          .              .             1.0000   -126500.0000      
12.Kuv .EU          .              .             1.0000    435600.0000      
12.Kuv .IE          .              .             1.0000    297000.0000      
12.Kuv .PA          .              .             1.0000    250800.0000      
12.Kuv .KI          .              .             1.0000    203500.0000      
12.Kov .EU          .              .             1.0000    424600.0000      
12.Kov .IE          .              .             1.0000    330000.0000      
12.Kov .PA          .              .             1.0000    283800.0000      
12.Kov .KI          .              .             1.0000    236500.0000      
12.Hsel.EU          .              .             1.0000    228800.0000      
12.Hsel.IE          .              .             1.0000    226600.0000      
12.Hsel.PA          .              .             1.0000    192500.0000      
12.Hsel.KI          .              .             1.0000    213400.0000      
12.Lsel.EU          .              .             1.0000    238700.0000      
12.Lsel.IE          .              .             1.0000    283800.0000      
12.Lsel.PA          .              .             1.0000    192500.0000      
12.Lsel.KI          .              .             1.0000    190300.0000      
12.Pap .EU          .              .             1.0000    446600.0000      
12.Pap .IE          .              .             1.0000    396000.0000      
12.Pap .PA          .              .             1.0000    327800.0000      
12.Pap .KI          .              .             1.0000    346500.0000      
13.Mas .EU          .              .             1.0000    134400.0000      
13.Mas .IE          .              .             1.0000     12000.0000      
13.Mas .PA          .              .             1.0000     -4800.0000      
13.Mas .KI          .              .             1.0000    -36000.0000      
13.Kus .EU          .              .             1.0000         EPS         
13.Kus .IE          .              .             1.0000         EPS         
13.Kus .PA          .              .             1.0000         EPS         
13.Kus .KI          .              .             1.0000         EPS         
GAMS 24.8.1  r59919 Released Dec 22, 2016 DEX-DEG x86 64bit/Mac OS X                                                                                                                                                                  01/17/17 22:39:53 Page 78
G e n e r a l   A l g e b r a i c   M o d e l i n g   S y s t e m
Solution Report     SOLVE final Using MIP From line 358


     VAR u  1 if we use n boats for product j shiping to region k, 0 otherwise

                  LOWER          LEVEL          UPPER         MARGINAL

13.Kos .EU          .              .             1.0000    -45600.0000      
13.Kos .IE          .              .             1.0000   -120000.0000      
13.Kos .PA          .              .             1.0000   -136800.0000      
13.Kos .KI          .              .             1.0000   -168000.0000      
13.Kuv .EU          .              .             1.0000    470400.0000      
13.Kuv .IE          .              .             1.0000    312000.0000      
13.Kuv .PA          .              .             1.0000    259200.0000      
13.Kuv .KI          .              .             1.0000    204000.0000      
13.Kov .EU          .              .             1.0000    458400.0000      
13.Kov .IE          .              .             1.0000    348000.0000      
13.Kov .PA          .              .             1.0000    295200.0000      
13.Kov .KI          .              .             1.0000    240000.0000      
13.Hsel.EU          .              .             1.0000    247200.0000      
13.Hsel.IE          .              .             1.0000    242400.0000      
13.Hsel.PA          .              .             1.0000    204000.0000      
13.Hsel.KI          .              .             1.0000    225600.0000      
13.Lsel.EU          .              .             1.0000    256800.0000      
13.Lsel.IE          .              .             1.0000    307200.0000      
13.Lsel.PA          .              .             1.0000    204000.0000      
13.Lsel.KI          .              .             1.0000    199200.0000      
13.Pap .EU          .              .             1.0000    482400.0000      
13.Pap .IE          .              .             1.0000    420000.0000      
13.Pap .PA          .              .             1.0000    343200.0000      
13.Pap .KI          .              .             1.0000    360000.0000      
14.Mas .EU          .              .             1.0000    140400.0000      
14.Mas .IE          .              .             1.0000         EPS         
14.Mas .PA          .              .             1.0000    -20800.0000      
14.Mas .KI          .              .             1.0000    -58500.0000      
14.Kus .EU          .              .             1.0000         EPS         
14.Kus .IE          .              .             1.0000         EPS         
14.Kus .PA          .              .             1.0000         EPS         
14.Kus .KI          .              .             1.0000         EPS         
14.Kos .EU          .              .             1.0000    -67600.0000      
14.Kos .IE          .              .             1.0000   -156000.0000      
14.Kos .PA          .              .             1.0000   -176800.0000      
14.Kos .KI          .              .             1.0000   -214500.0000      
14.Kuv .EU          .              .             1.0000    504400.0000      
14.Kuv .IE          .              .             1.0000    325000.0000      
14.Kuv .PA          .              .             1.0000    265200.0000      
14.Kuv .KI          .              .             1.0000    201500.0000      
14.Kov .EU          .              .             1.0000    491400.0000      
14.Kov .IE          .              .             1.0000    364000.0000      
14.Kov .PA          .              .             1.0000    304200.0000      
14.Kov .KI          .              .             1.0000    240500.0000      
14.Hsel.EU          .              .             1.0000    265200.0000      
14.Hsel.IE          .              .             1.0000    257400.0000      
14.Hsel.PA          .              .             1.0000    214500.0000      
14.Hsel.KI          .              .             1.0000    236600.0000      
14.Lsel.EU          .              .             1.0000    274300.0000      
GAMS 24.8.1  r59919 Released Dec 22, 2016 DEX-DEG x86 64bit/Mac OS X                                                                                                                                                                  01/17/17 22:39:53 Page 79
G e n e r a l   A l g e b r a i c   M o d e l i n g   S y s t e m
Solution Report     SOLVE final Using MIP From line 358


     VAR u  1 if we use n boats for product j shiping to region k, 0 otherwise

                  LOWER          LEVEL          UPPER         MARGINAL

14.Lsel.IE          .              .             1.0000    330200.0000      
14.Lsel.PA          .              .             1.0000    214500.0000      
14.Lsel.KI          .              .             1.0000    206700.0000      
14.Pap .EU          .              .             1.0000    517400.0000      
14.Pap .IE          .              .             1.0000    442000.0000      
14.Pap .PA          .              .             1.0000    356200.0000      
14.Pap .KI          .              .             1.0000    370500.0000      
15.Mas .EU          .              .             1.0000    145600.0000      
15.Mas .IE          .              .             1.0000    -14000.0000      
15.Mas .PA          .              .             1.0000    -39200.0000      
15.Mas .KI          .              .             1.0000    -84000.0000      
15.Kus .EU          .              .             1.0000         EPS         
15.Kus .IE          .              .             1.0000         EPS         
15.Kus .PA          .              .             1.0000         EPS         
15.Kus .KI          .              .             1.0000         EPS         
15.Kos .EU          .              .             1.0000    -92400.0000      
15.Kos .IE          .              .             1.0000   -196000.0000      
15.Kos .PA          .              .             1.0000   -221200.0000      
15.Kos .KI          .              .             1.0000   -266000.0000      
15.Kuv .EU          .              .             1.0000    537600.0000      
15.Kuv .IE          .              .             1.0000    336000.0000      
15.Kuv .PA          .              .             1.0000    268800.0000      
15.Kuv .KI          .              .             1.0000    196000.0000      
15.Kov .EU          .              .             1.0000    523600.0000      
15.Kov .IE          .              .             1.0000    378000.0000      
15.Kov .PA          .              .             1.0000    310800.0000      
15.Kov .KI          .              .             1.0000    238000.0000      
15.Hsel.EU          .              .             1.0000    282800.0000      
15.Hsel.IE          .              .             1.0000    271600.0000      
15.Hsel.PA          .              .             1.0000    224000.0000      
15.Hsel.KI          .              .             1.0000    246400.0000      
15.Lsel.EU          .              .             1.0000    291200.0000      
15.Lsel.IE          .              .             1.0000    352800.0000      
15.Lsel.PA          .              .             1.0000    224000.0000      
15.Lsel.KI          .              .             1.0000    212800.0000      
15.Pap .EU          .              .             1.0000    551600.0000      
15.Pap .IE          .              .             1.0000    462000.0000      
15.Pap .PA          .              .             1.0000    366800.0000      
15.Pap .KI          .              .             1.0000    378000.0000      
16.Mas .EU          .              .             1.0000    150000.0000      
16.Mas .IE          .              .             1.0000    -30000.0000      
16.Mas .PA          .              .             1.0000    -60000.0000      
16.Mas .KI          .              .             1.0000   -112500.0000      
16.Kus .EU          .              .             1.0000         EPS         
16.Kus .IE          .              .             1.0000         EPS         
16.Kus .PA          .              .             1.0000         EPS         
16.Kus .KI          .              .             1.0000         EPS         
16.Kos .EU          .              .             1.0000   -120000.0000      
16.Kos .IE          .              .             1.0000   -240000.0000      
GAMS 24.8.1  r59919 Released Dec 22, 2016 DEX-DEG x86 64bit/Mac OS X                                                                                                                                                                  01/17/17 22:39:53 Page 80
G e n e r a l   A l g e b r a i c   M o d e l i n g   S y s t e m
Solution Report     SOLVE final Using MIP From line 358


     VAR u  1 if we use n boats for product j shiping to region k, 0 otherwise

                  LOWER          LEVEL          UPPER         MARGINAL

16.Kos .PA          .              .             1.0000   -270000.0000      
16.Kos .KI          .              .             1.0000   -322500.0000      
16.Kuv .EU          .              .             1.0000    570000.0000      
16.Kuv .IE          .              .             1.0000    345000.0000      
16.Kuv .PA          .              .             1.0000    270000.0000      
16.Kuv .KI          .              .             1.0000    187500.0000      
16.Kov .EU          .              .             1.0000    555000.0000      
16.Kov .IE          .              .             1.0000    390000.0000      
16.Kov .PA          .              .             1.0000    315000.0000      
16.Kov .KI          .              .             1.0000    232500.0000      
16.Hsel.EU          .              .             1.0000    300000.0000      
16.Hsel.IE          .              .             1.0000    285000.0000      
16.Hsel.PA          .              .             1.0000    232500.0000      
16.Hsel.KI          .              .             1.0000    255000.0000      
16.Lsel.EU          .              .             1.0000    307500.0000      
16.Lsel.IE          .              .             1.0000    375000.0000      
16.Lsel.PA          .              .             1.0000    232500.0000      
16.Lsel.KI          .              .             1.0000    217500.0000      
16.Pap .EU          .              .             1.0000    585000.0000      
16.Pap .IE          .              .             1.0000    480000.0000      
16.Pap .PA          .              .             1.0000    375000.0000      
16.Pap .KI          .              .             1.0000    382500.0000      
17.Mas .EU          .              .             1.0000    153600.0000      
17.Mas .IE          .              .             1.0000    -48000.0000      
17.Mas .PA          .              .             1.0000    -83200.0000      
17.Mas .KI          .              .             1.0000   -144000.0000      
17.Kus .EU          .              .             1.0000         EPS         
17.Kus .IE          .              .             1.0000         EPS         
17.Kus .PA          .              .             1.0000         EPS         
17.Kus .KI          .              .             1.0000         EPS         
17.Kos .EU          .              .             1.0000   -150400.0000      
17.Kos .IE          .              .             1.0000   -288000.0000      
17.Kos .PA          .              .             1.0000   -323200.0000      
17.Kos .KI          .              .             1.0000   -384000.0000      
17.Kuv .EU          .              .             1.0000    601600.0000      
17.Kuv .IE          .              .             1.0000    352000.0000      
17.Kuv .PA          .              .             1.0000    268800.0000      
17.Kuv .KI          .              .             1.0000    176000.0000      
17.Kov .EU          .              .             1.0000    585600.0000      
17.Kov .IE          .              .             1.0000    400000.0000      
17.Kov .PA          .              .             1.0000    316800.0000      
17.Kov .KI          .              .             1.0000    224000.0000      
17.Hsel.EU          .              .             1.0000    316800.0000      
17.Hsel.IE          .              .             1.0000    297600.0000      
17.Hsel.PA          .              .             1.0000    240000.0000      
17.Hsel.KI          .              .             1.0000    262400.0000      
17.Lsel.EU          .              .             1.0000    323200.0000      
17.Lsel.IE          .              .             1.0000    396800.0000      
17.Lsel.PA          .              .             1.0000    240000.0000      
GAMS 24.8.1  r59919 Released Dec 22, 2016 DEX-DEG x86 64bit/Mac OS X                                                                                                                                                                  01/17/17 22:39:53 Page 81
G e n e r a l   A l g e b r a i c   M o d e l i n g   S y s t e m
Solution Report     SOLVE final Using MIP From line 358


     VAR u  1 if we use n boats for product j shiping to region k, 0 otherwise

                  LOWER          LEVEL          UPPER         MARGINAL

17.Lsel.KI          .              .             1.0000    220800.0000      
17.Pap .EU          .              .             1.0000    617600.0000      
17.Pap .IE          .              .             1.0000    496000.0000      
17.Pap .PA          .              .             1.0000    380800.0000      
17.Pap .KI          .              .             1.0000    384000.0000      
18.Mas .EU          .              .             1.0000    156400.0000      
18.Mas .IE          .              .             1.0000    -68000.0000      
18.Mas .PA          .              .             1.0000   -108800.0000      
18.Mas .KI          .              .             1.0000   -178500.0000      
18.Kus .EU          .              .             1.0000         EPS         
18.Kus .IE          .              .             1.0000         EPS         
18.Kus .PA          .              .             1.0000         EPS         
18.Kus .KI          .              .             1.0000         EPS         
18.Kos .EU          .              .             1.0000   -183600.0000      
18.Kos .IE          .              .             1.0000   -340000.0000      
18.Kos .PA          .              .             1.0000   -380800.0000      
18.Kos .KI          .              .             1.0000   -450500.0000      
18.Kuv .EU          .              .             1.0000    632400.0000      
18.Kuv .IE          .              .             1.0000    357000.0000      
18.Kuv .PA          .              .             1.0000    265200.0000      
18.Kuv .KI          .              .             1.0000    161500.0000      
18.Kov .EU          .              .             1.0000    615400.0000      
18.Kov .IE          .              .             1.0000    408000.0000      
18.Kov .PA          .              .             1.0000    316200.0000      
18.Kov .KI          .              .             1.0000    212500.0000      
18.Hsel.EU          .              .             1.0000    333200.0000      
18.Hsel.IE          .              .             1.0000    309400.0000      
18.Hsel.PA          .              .             1.0000    246500.0000      
18.Hsel.KI          .              .             1.0000    268600.0000      
18.Lsel.EU          .              .             1.0000    338300.0000      
18.Lsel.IE          .              .             1.0000    418200.0000      
18.Lsel.PA          .              .             1.0000    246500.0000      
18.Lsel.KI          .              .             1.0000    222700.0000      
18.Pap .EU          .              .             1.0000    649400.0000      
18.Pap .IE          .              .             1.0000    510000.0000      
18.Pap .PA          .              .             1.0000    384200.0000      
18.Pap .KI          .              .             1.0000    382500.0000      
19.Mas .EU          .              .             1.0000    158400.0000      
19.Mas .IE          .              .             1.0000    -90000.0000      
19.Mas .PA          .              .             1.0000   -136800.0000      
19.Mas .KI          .              .             1.0000   -216000.0000      
19.Kus .EU          .              .             1.0000         EPS         
19.Kus .IE          .              .             1.0000         EPS         
19.Kus .PA          .              .             1.0000         EPS         
19.Kus .KI          .              .             1.0000         EPS         
19.Kos .EU          .              .             1.0000   -219600.0000      
19.Kos .IE          .              .             1.0000   -396000.0000      
19.Kos .PA          .              .             1.0000   -442800.0000      
19.Kos .KI          .              .             1.0000   -522000.0000      
GAMS 24.8.1  r59919 Released Dec 22, 2016 DEX-DEG x86 64bit/Mac OS X                                                                                                                                                                  01/17/17 22:39:53 Page 82
G e n e r a l   A l g e b r a i c   M o d e l i n g   S y s t e m
Solution Report     SOLVE final Using MIP From line 358


     VAR u  1 if we use n boats for product j shiping to region k, 0 otherwise

                  LOWER          LEVEL          UPPER         MARGINAL

19.Kuv .EU          .              .             1.0000    662400.0000      
19.Kuv .IE          .              .             1.0000    360000.0000      
19.Kuv .PA          .              .             1.0000    259200.0000      
19.Kuv .KI          .              .             1.0000    144000.0000      
19.Kov .EU          .              .             1.0000    644400.0000      
19.Kov .IE          .              .             1.0000    414000.0000      
19.Kov .PA          .              .             1.0000    313200.0000      
19.Kov .KI          .              .             1.0000    198000.0000      
19.Hsel.EU          .              .             1.0000    349200.0000      
19.Hsel.IE          .              .             1.0000    320400.0000      
19.Hsel.PA          .              .             1.0000    252000.0000      
19.Hsel.KI          .              .             1.0000    273600.0000      
19.Lsel.EU          .              .             1.0000    352800.0000      
19.Lsel.IE          .              .             1.0000    439200.0000      
19.Lsel.PA          .              .             1.0000    252000.0000      
19.Lsel.KI          .              .             1.0000    223200.0000      
19.Pap .EU          .              .             1.0000    680400.0000      
19.Pap .IE          .              .             1.0000    522000.0000      
19.Pap .PA          .              .             1.0000    385200.0000      
19.Pap .KI          .              .             1.0000    378000.0000      
20.Mas .EU          .              .             1.0000    159600.0000      
20.Mas .IE          .              .             1.0000   -114000.0000      
20.Mas .PA          .              .             1.0000   -167200.0000      
20.Mas .KI          .              .             1.0000   -256500.0000      
20.Kus .EU          .              .             1.0000         EPS         
20.Kus .IE          .              .             1.0000         EPS         
20.Kus .PA          .              .             1.0000         EPS         
20.Kus .KI          .              .             1.0000         EPS         
20.Kos .EU          .              .             1.0000   -258400.0000      
20.Kos .IE          .              .             1.0000   -456000.0000      
20.Kos .PA          .              .             1.0000   -509200.0000      
20.Kos .KI          .              .             1.0000   -598500.0000      
20.Kuv .EU          .              .             1.0000    691600.0000      
20.Kuv .IE          .              .             1.0000    361000.0000      
20.Kuv .PA          .              .             1.0000    250800.0000      
20.Kuv .KI          .              .             1.0000    123500.0000      
20.Kov .EU          .              .             1.0000    672600.0000      
20.Kov .IE          .              .             1.0000    418000.0000      
20.Kov .PA          .              .             1.0000    307800.0000      
20.Kov .KI          .              .             1.0000    180500.0000      
20.Hsel.EU          .              .             1.0000    364800.0000      
20.Hsel.IE          .              .             1.0000    330600.0000      
20.Hsel.PA          .              .             1.0000    256500.0000      
20.Hsel.KI          .              .             1.0000    277400.0000      
20.Lsel.EU          .              .             1.0000    366700.0000      
20.Lsel.IE          .              .             1.0000    459800.0000      
20.Lsel.PA          .              .             1.0000    256500.0000      
20.Lsel.KI          .              .             1.0000    222300.0000      
20.Pap .EU          .              .             1.0000    710600.0000      
GAMS 24.8.1  r59919 Released Dec 22, 2016 DEX-DEG x86 64bit/Mac OS X                                                                                                                                                                  01/17/17 22:39:53 Page 83
G e n e r a l   A l g e b r a i c   M o d e l i n g   S y s t e m
Solution Report     SOLVE final Using MIP From line 358


     VAR u  1 if we use n boats for product j shiping to region k, 0 otherwise

                  LOWER          LEVEL          UPPER         MARGINAL

20.Pap .IE          .              .             1.0000    532000.0000      
20.Pap .PA          .              .             1.0000    383800.0000      
20.Pap .KI          .              .             1.0000    370500.0000      
21.Mas .EU          .              .             1.0000    160000.0000      
21.Mas .IE          .              .             1.0000   -140000.0000      
21.Mas .PA          .              .             1.0000   -200000.0000      
21.Mas .KI          .              .             1.0000   -300000.0000      
21.Kus .EU          .              .             1.0000         EPS         
21.Kus .IE          .              .             1.0000         EPS         
21.Kus .PA          .              .             1.0000         EPS         
21.Kus .KI          .              .             1.0000         EPS         
21.Kos .EU          .              .             1.0000   -300000.0000      
21.Kos .IE          .              .             1.0000   -520000.0000      
21.Kos .PA          .              .             1.0000   -580000.0000      
21.Kos .KI          .              .             1.0000   -680000.0000      
21.Kuv .EU          .              .             1.0000    720000.0000      
21.Kuv .IE          .              .             1.0000    360000.0000      
21.Kuv .PA          .              .             1.0000    240000.0000      
21.Kuv .KI          .              .             1.0000    100000.0000      
21.Kov .EU          .              .             1.0000    700000.0000      
21.Kov .IE          .              .             1.0000    420000.0000      
21.Kov .PA          .              .             1.0000    300000.0000      
21.Kov .KI          .              .             1.0000    160000.0000      
21.Hsel.EU          .              .             1.0000    380000.0000      
21.Hsel.IE          .              .             1.0000    340000.0000      
21.Hsel.PA          .              .             1.0000    260000.0000      
21.Hsel.KI          .              .             1.0000    280000.0000      
21.Lsel.EU          .              .             1.0000    380000.0000      
21.Lsel.IE          .              .             1.0000    480000.0000      
21.Lsel.PA          .              .             1.0000    260000.0000      
21.Lsel.KI          .              .             1.0000    220000.0000      
21.Pap .EU          .              .             1.0000    740000.0000      
21.Pap .IE          .              .             1.0000    540000.0000      
21.Pap .PA          .              .             1.0000    380000.0000      
21.Pap .KI          .              .             1.0000    360000.0000      
22.Mas .EU          .              .             1.0000    159600.0000      
22.Mas .IE          .              .             1.0000   -168000.0000      
22.Mas .PA          .              .             1.0000   -235200.0000      
22.Mas .KI          .              .             1.0000   -346500.0000      
22.Kus .EU          .              .             1.0000         EPS         
22.Kus .IE          .              .             1.0000         EPS         
22.Kus .PA          .              .             1.0000         EPS         
22.Kus .KI          .              .             1.0000         EPS         
22.Kos .EU          .              .             1.0000   -344400.0000      
22.Kos .IE          .              .             1.0000   -588000.0000      
22.Kos .PA          .              .             1.0000   -655200.0000      
22.Kos .KI          .              .             1.0000   -766500.0000      
22.Kuv .EU          .              .             1.0000    747600.0000      
22.Kuv .IE          .              .             1.0000    357000.0000      
GAMS 24.8.1  r59919 Released Dec 22, 2016 DEX-DEG x86 64bit/Mac OS X                                                                                                                                                                  01/17/17 22:39:53 Page 84
G e n e r a l   A l g e b r a i c   M o d e l i n g   S y s t e m
Solution Report     SOLVE final Using MIP From line 358


     VAR u  1 if we use n boats for product j shiping to region k, 0 otherwise

                  LOWER          LEVEL          UPPER         MARGINAL

22.Kuv .PA          .              .             1.0000    226800.0000      
22.Kuv .KI          .              .             1.0000     73500.0000      
22.Kov .EU          .              .             1.0000    726600.0000      
22.Kov .IE          .              .             1.0000    420000.0000      
22.Kov .PA          .              .             1.0000    289800.0000      
22.Kov .KI          .              .             1.0000    136500.0000      
22.Hsel.EU          .              .             1.0000    394800.0000      
22.Hsel.IE          .              .             1.0000    348600.0000      
22.Hsel.PA          .              .             1.0000    262500.0000      
22.Hsel.KI          .              .             1.0000    281400.0000      
22.Lsel.EU          .              .             1.0000    392700.0000      
22.Lsel.IE          .              .             1.0000    499800.0000      
22.Lsel.PA          .              .             1.0000    262500.0000      
22.Lsel.KI          .              .             1.0000    216300.0000      
22.Pap .EU          .              .             1.0000    768600.0000      
22.Pap .IE          .              .             1.0000    546000.0000      
22.Pap .PA          .              .             1.0000    373800.0000      
22.Pap .KI          .              .             1.0000    346500.0000      
23.Mas .EU          .              .             1.0000    158400.0000      
23.Mas .IE          .              .             1.0000   -198000.0000      
23.Mas .PA          .              .             1.0000   -272800.0000      
23.Mas .KI          .              .             1.0000   -396000.0000      
23.Kus .EU          .              .             1.0000         EPS         
23.Kus .IE          .              .             1.0000         EPS         
23.Kus .PA          .              .             1.0000         EPS         
23.Kus .KI          .              .             1.0000         EPS         
23.Kos .EU          .              .             1.0000   -391600.0000      
23.Kos .IE          .              .             1.0000   -660000.0000      
23.Kos .PA          .              .             1.0000   -734800.0000      
23.Kos .KI          .              .             1.0000   -858000.0000      
23.Kuv .EU          .              .             1.0000    774400.0000      
23.Kuv .IE          .              .             1.0000    352000.0000      
23.Kuv .PA          .              .             1.0000    211200.0000      
23.Kuv .KI          .              .             1.0000     44000.0000      
23.Kov .EU          .              .             1.0000    752400.0000      
23.Kov .IE          .              .             1.0000    418000.0000      
23.Kov .PA          .              .             1.0000    277200.0000      
23.Kov .KI          .              .             1.0000    110000.0000      
23.Hsel.EU          .              .             1.0000    409200.0000      
23.Hsel.IE          .              .             1.0000    356400.0000      
23.Hsel.PA          .              .             1.0000    264000.0000      
23.Hsel.KI          .              .             1.0000    281600.0000      
23.Lsel.EU          .              .             1.0000    404800.0000      
23.Lsel.IE          .              .             1.0000    519200.0000      
23.Lsel.PA          .              .             1.0000    264000.0000      
23.Lsel.KI          .              .             1.0000    211200.0000      
23.Pap .EU          .              .             1.0000    796400.0000      
23.Pap .IE          .              .             1.0000    550000.0000      
23.Pap .PA          .              .             1.0000    365200.0000      
GAMS 24.8.1  r59919 Released Dec 22, 2016 DEX-DEG x86 64bit/Mac OS X                                                                                                                                                                  01/17/17 22:39:53 Page 85
G e n e r a l   A l g e b r a i c   M o d e l i n g   S y s t e m
Solution Report     SOLVE final Using MIP From line 358


     VAR u  1 if we use n boats for product j shiping to region k, 0 otherwise

                  LOWER          LEVEL          UPPER         MARGINAL

23.Pap .KI          .              .             1.0000    330000.0000      

---- VAR b  amount of timber i bought

           LOWER          LEVEL          UPPER         MARGINAL

Mat          .        140000.0000        +INF             .          
Kut          .        140000.0000        +INF             .          
Kot          .        120000.0000        +INF             .          
Mak          .        310000.0000        +INF             .          
Kuk          .              .            +INF             .          
Kok          .        550000.0000        +INF             .          


**** REPORT SUMMARY :        0     NONOPT
                             0 INFEASIBLE
                             0  UNBOUNDED
GAMS 24.8.1  r59919 Released Dec 22, 2016 DEX-DEG x86 64bit/Mac OS X                                                                                                                                                                  01/17/17 22:39:53 Page 86
G e n e r a l   A l g e b r a i c   M o d e l i n g   S y s t e m
E x e c u t i o n


----    359 VARIABLE z.L                   =   576036.000  the objective

----    359 VARIABLE u.L  1 if we use n boats for product j shiping to region k, 0 otherwise

                 EU          IE          PA          KI

1 .Mas                    1.000
1 .Kus        1.000       1.000       1.000       1.000
1 .Kos        1.000       1.000       1.000       1.000
1 .Kuv                    1.000       1.000       1.000
1 .Kov                    1.000       1.000       1.000
1 .Hsel       1.000                   1.000
1 .Lsel                               1.000
1 .Pap                                1.000
2 .Mas                                1.000       1.000
2 .Lsel                                           1.000
3 .Lsel       1.000
3 .Pap                    1.000                   1.000
4 .Hsel                   1.000                   1.000
5 .Kov        1.000
5 .Pap        1.000
6 .Mas        1.000
6 .Kuv        1.000
11.Lsel                   1.000


----    359 VARIABLE r.L  1 if we buy n boats of timber i, 0 otherwise

            Mat         Kut         Kot         Mak         Kuk         Kok

1                                                         1.000
13                                1.000
15        1.000       1.000
32                                            1.000
56                                                                    1.000


----    359 VARIABLE y.L  Cubic meters produced of product j

Mas   70000.000,    Kuv   50000.000,    Kov   40000.000,    Hsel  76000.000,    Lsel 146000.000,    Pap   80000.000


----    359 VARIABLE s.L  amount of timber i used to make products

Mat 140000.000,    Kut 140000.000,    Kot 112000.000,    Mak 308800.000,    Kok 549200.000



EXECUTION TIME       =        0.016 SECONDS      3 MB  24.8.1 r59919 DEX-DEG
GAMS 24.8.1  r59919 Released Dec 22, 2016 DEX-DEG x86 64bit/Mac OS X                                                                                                                                                                  01/17/17 22:39:53 Page 87
G e n e r a l   A l g e b r a i c   M o d e l i n g   S y s t e m
E x e c u t i o n


USER: Course License Spring 2017                     A161219:0249AN-GEN
      Management Engineering, Technical University of Denmark    DC8756
      License for teaching and research at degree granting institutions


**** FILE SUMMARY

Input      /Users/AtliPall/AHI/finalA.gms
Output     /Users/AtliPall/AHI/finalA.lst
